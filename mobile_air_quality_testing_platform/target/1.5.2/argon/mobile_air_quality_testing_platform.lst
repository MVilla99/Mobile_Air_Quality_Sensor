
c:/Users/mauri/Documents/IoTc2/Capstone-Deep-Dive-Coding/Code/mobile_air_quality_testing_platform/target/1.5.2/argon/mobile_air_quality_testing_platform.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003504  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d7520  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003de74  000d7524  0001de74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000914  2003dedc  2003dedc  0002dedc  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d758c  000d758c  0002758c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d75b4  000d75b4  000275b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0018c69b  00000000  00000000  000275b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001eb76  00000000  00000000  001b3c53  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00028288  00000000  00000000  001d27c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002b28  00000000  00000000  001faa51  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000051e8  00000000  00000000  001fd579  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004d7b7  00000000  00000000  00202761  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00053d0d  00000000  00000000  0024ff18  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010b1db  00000000  00000000  002a3c25  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000e044  00000000  00000000  003aee00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 f800 	bl	d7032 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 f805 	bl	d7048 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003de74 	.word	0x2003de74
   d4048:	000d7524 	.word	0x000d7524
   d404c:	2003dedc 	.word	0x2003dedc
   d4050:	2003dedc 	.word	0x2003dedc
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 fa0f 	bl	d647c <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d751c 	.word	0x000d751c
   d4080:	000d7498 	.word	0x000d7498

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b87a 	b.w	d417c <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f919 	bl	d42c0 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 b9b5 	b.w	d6400 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f001 bf7b 	b.w	d5f90 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f001 bf79 	b.w	d5f90 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d40ae:	7c03      	ldrb	r3, [r0, #16]
   d40b0:	f003 0308 	and.w	r3, r3, #8
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
   d40b4:	4602      	mov	r2, r0
   d40b6:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d40ba:	b12b      	cbz	r3, d40c8 <_ZN4File9availableEv+0x1a>
   d40bc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   d40be:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d40c0:	1a18      	subs	r0, r3, r0
   d40c2:	bf48      	it	mi
   d40c4:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
   d40c8:	4770      	bx	lr

000d40ca <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d40ca:	4770      	bx	lr

000d40cc <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d40cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d40ce:	4602      	mov	r2, r0
   d40d0:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d40d2:	7913      	ldrb	r3, [r2, #4]
   d40d4:	6895      	ldr	r5, [r2, #8]
   d40d6:	b133      	cbz	r3, d40e6 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d40d8:	b93d      	cbnz	r5, d40ea <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d40da:	490c      	ldr	r1, [pc, #48]	; (d410c <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d40dc:	b004      	add	sp, #16
   d40de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d40e2:	f002 b8c5 	b.w	d6270 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d40e6:	4b0a      	ldr	r3, [pc, #40]	; (d4110 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d40e8:	e000      	b.n	d40ec <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d40ea:	4b0a      	ldr	r3, [pc, #40]	; (d4114 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d40ec:	7b16      	ldrb	r6, [r2, #12]
   d40ee:	4c0a      	ldr	r4, [pc, #40]	; (d4118 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d40f0:	490a      	ldr	r1, [pc, #40]	; (d411c <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d40f2:	7b52      	ldrb	r2, [r2, #13]
   d40f4:	9202      	str	r2, [sp, #8]
   d40f6:	2e01      	cmp	r6, #1
   d40f8:	bf08      	it	eq
   d40fa:	4621      	moveq	r1, r4
   d40fc:	9101      	str	r1, [sp, #4]
   d40fe:	9500      	str	r5, [sp, #0]
   d4100:	4a07      	ldr	r2, [pc, #28]	; (d4120 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d4102:	2100      	movs	r1, #0
   d4104:	f002 f8f1 	bl	d62ea <_ZN5Print11printf_implEbPKcz>
  }
   d4108:	b004      	add	sp, #16
   d410a:	bd70      	pop	{r4, r5, r6, pc}
   d410c:	000d7111 	.word	0x000d7111
   d4110:	000d7293 	.word	0x000d7293
   d4114:	000d7100 	.word	0x000d7100
   d4118:	000d7109 	.word	0x000d7109
   d411c:	000d710d 	.word	0x000d710d
   d4120:	000d7127 	.word	0x000d7127

000d4124 <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d4124:	3010      	adds	r0, #16
   d4126:	f000 bebb 	b.w	d4ea0 <_ZN7FatFile4syncEv>

000d412a <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d412a:	3010      	adds	r0, #16
   d412c:	f000 bdd0 	b.w	d4cd0 <_ZN7FatFile4peekEv>

000d4130 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d4130:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d4132:	2201      	movs	r2, #1
   d4134:	f10d 0107 	add.w	r1, sp, #7
   d4138:	3010      	adds	r0, #16
   d413a:	f000 fd16 	bl	d4b6a <_ZN7FatFile4readEPvj>
   d413e:	2801      	cmp	r0, #1
   d4140:	bf0c      	ite	eq
   d4142:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d4146:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
   d414a:	b003      	add	sp, #12
   d414c:	f85d fb04 	ldr.w	pc, [sp], #4

000d4150 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d4150:	3010      	adds	r0, #16
   d4152:	f000 bf31 	b.w	d4fb8 <_ZN7FatFile5writeEPKvj>

000d4156 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d4156:	b507      	push	{r0, r1, r2, lr}
   d4158:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d415a:	2201      	movs	r2, #1
   d415c:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d4160:	3010      	adds	r0, #16
   d4162:	4619      	mov	r1, r3
   d4164:	f000 ff28 	bl	d4fb8 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d4168:	b003      	add	sp, #12
   d416a:	f85d fb04 	ldr.w	pc, [sp], #4

000d416e <_ZN4FileD0Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d416e:	b510      	push	{r4, lr}
   d4170:	2134      	movs	r1, #52	; 0x34
   d4172:	4604      	mov	r4, r0
   d4174:	f002 fde4 	bl	d6d40 <_ZdlPvj>
   d4178:	4620      	mov	r0, r4
   d417a:	bd10      	pop	{r4, pc}

000d417c <setup>:
int AQvalue;  

int aqRead;

// setup() runs once, when the device is first turned on.
void setup() {
   d417c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  // Put initialization like pinMode and begin functions here.
  Serial.begin(9600);
   d417e:	f002 fa7d 	bl	d667c <_Z16_fetch_usbserialv>
   d4182:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4186:	f002 fa6d 	bl	d6664 <_ZN9USBSerial5beginEl>
  delay(100);
   d418a:	2064      	movs	r0, #100	; 0x64
   d418c:	f002 f8fa 	bl	d6384 <delay>
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d4190:	4c29      	ldr	r4, [pc, #164]	; (d4238 <setup+0xbc>)
  Aq.init();
   d4192:	482a      	ldr	r0, [pc, #168]	; (d423c <setup+0xc0>)
   d4194:	f001 fc81 	bl	d5a9a <_ZN16AirQualitySensor4initEv>
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d4198:	4b29      	ldr	r3, [pc, #164]	; (d4240 <setup+0xc4>)
   d419a:	4a2a      	ldr	r2, [pc, #168]	; (d4244 <setup+0xc8>)
   d419c:	9300      	str	r3, [sp, #0]
   d419e:	f504 668c 	add.w	r6, r4, #1120	; 0x460
   d41a2:	2300      	movs	r3, #0
   d41a4:	f88d 3004 	strb.w	r3, [sp, #4]
   d41a8:	9202      	str	r2, [sp, #8]
   d41aa:	2501      	movs	r5, #1
   d41ac:	f88d 300d 	strb.w	r3, [sp, #13]
   d41b0:	220e      	movs	r2, #14
   d41b2:	466b      	mov	r3, sp
   d41b4:	f204 416c 	addw	r1, r4, #1132	; 0x46c
   d41b8:	4630      	mov	r0, r6
   d41ba:	f88d 500c 	strb.w	r5, [sp, #12]
   d41be:	f001 fa43 	bl	d5648 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d41c2:	b390      	cbz	r0, d422a <setup+0xae>
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   d41c4:	f204 403c 	addw	r0, r4, #1084	; 0x43c
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d41c8:	6026      	str	r6, [r4, #0]
    vwd()->close();
   d41ca:	f000 fe9f 	bl	d4f0c <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d41ce:	4629      	mov	r1, r5
   d41d0:	4620      	mov	r0, r4
   d41d2:	f001 f8e2 	bl	d539a <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d41d6:	4601      	mov	r1, r0
   d41d8:	b140      	cbz	r0, d41ec <setup+0x70>
   d41da:	4c17      	ldr	r4, [pc, #92]	; (d4238 <setup+0xbc>)
   d41dc:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   d41e0:	4621      	mov	r1, r4
   d41e2:	4628      	mov	r0, r5
   d41e4:	f000 fca9 	bl	d4b3a <_ZN7FatFile8openRootEP9FatVolume>
   d41e8:	b1f8      	cbz	r0, d422a <setup+0xae>
   d41ea:	e005      	b.n	d41f8 <setup+0x7c>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d41ec:	4620      	mov	r0, r4
   d41ee:	f001 f8d4 	bl	d539a <_ZN9FatVolume4initEh>
   d41f2:	2800      	cmp	r0, #0
   d41f4:	d1f1      	bne.n	d41da <setup+0x5e>
   d41f6:	e018      	b.n	d422a <setup+0xae>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d41f8:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d41fc:	f013 0f70 	tst.w	r3, #112	; 0x70
   d4200:	d013      	beq.n	d422a <setup+0xae>
      return false;
    }
    m_cwd = dir;
   d4202:	4b11      	ldr	r3, [pc, #68]	; (d4248 <setup+0xcc>)
   d4204:	601d      	str	r5, [r3, #0]
  if(!sd.begin(SD_CS_PIN)){
    Serial.println(" sd init failed");
    return;
  }
  Serial.println("sd init done");
   d4206:	f002 fa39 	bl	d667c <_Z16_fetch_usbserialv>
   d420a:	4910      	ldr	r1, [pc, #64]	; (d424c <setup+0xd0>)
   d420c:	f002 f843 	bl	d6296 <_ZN5Print7printlnEPKc>
  pinMode(A1, OUTPUT);
   d4210:	2101      	movs	r1, #1
   d4212:	2012      	movs	r0, #18
   d4214:	f002 fcf2 	bl	d6bfc <pinMode>
  pinMode(A3, OUTPUT);
   d4218:	2101      	movs	r1, #1
   d421a:	2010      	movs	r0, #16
   d421c:	f002 fcee 	bl	d6bfc <pinMode>
  pinMode(A4, INPUT);
   d4220:	2100      	movs	r1, #0
   d4222:	200f      	movs	r0, #15
   d4224:	f002 fcea 	bl	d6bfc <pinMode>
   d4228:	e004      	b.n	d4234 <setup+0xb8>
  // Put initialization like pinMode and begin functions here.
  Serial.begin(9600);
  delay(100);
  Aq.init();
  if(!sd.begin(SD_CS_PIN)){
    Serial.println(" sd init failed");
   d422a:	f002 fa27 	bl	d667c <_Z16_fetch_usbserialv>
   d422e:	4908      	ldr	r1, [pc, #32]	; (d4250 <setup+0xd4>)
   d4230:	f002 f831 	bl	d6296 <_ZN5Print7printlnEPKc>
  }
  Serial.println("sd init done");
  pinMode(A1, OUTPUT);
  pinMode(A3, OUTPUT);
  pinMode(A4, INPUT);
}
   d4234:	b004      	add	sp, #16
   d4236:	bd70      	pop	{r4, r5, r6, pc}
   d4238:	2003df44 	.word	0x2003df44
   d423c:	2003df20 	.word	0x2003df20
   d4240:	000d70d4 	.word	0x000d70d4
   d4244:	02faf080 	.word	0x02faf080
   d4248:	2003e3cc 	.word	0x2003e3cc
   d424c:	000d7145 	.word	0x000d7145
   d4250:	000d7152 	.word	0x000d7152

000d4254 <_Z10airQualityv>:
  digitalWrite(A3, LOW);
  //Serial.println("off");
} 
}

void airQuality(){
   d4254:	b510      	push	{r4, lr}
  quality = Aq.slope();
   d4256:	4812      	ldr	r0, [pc, #72]	; (d42a0 <_Z10airQualityv+0x4c>)
   d4258:	4c12      	ldr	r4, [pc, #72]	; (d42a4 <_Z10airQualityv+0x50>)
   d425a:	f001 fc4d 	bl	d5af8 <_ZN16AirQualitySensor5slopeEv>
   d425e:	6020      	str	r0, [r4, #0]
  AQvalue = Aq.getValue();
   d4260:	480f      	ldr	r0, [pc, #60]	; (d42a0 <_Z10airQualityv+0x4c>)
   d4262:	f001 fc2f 	bl	d5ac4 <_ZN16AirQualitySensor8getValueEv>
   d4266:	4b10      	ldr	r3, [pc, #64]	; (d42a8 <_Z10airQualityv+0x54>)

  if(quality == AirQualitySensor::FORCE_SIGNAL){
   d4268:	4a10      	ldr	r2, [pc, #64]	; (d42ac <_Z10airQualityv+0x58>)
} 
}

void airQuality(){
  quality = Aq.slope();
  AQvalue = Aq.getValue();
   d426a:	6018      	str	r0, [r3, #0]

  if(quality == AirQualitySensor::FORCE_SIGNAL){
   d426c:	6812      	ldr	r2, [r2, #0]
   d426e:	6823      	ldr	r3, [r4, #0]
   d4270:	4293      	cmp	r3, r2
   d4272:	d101      	bne.n	d4278 <_Z10airQualityv+0x24>
    aqRead = 4;
   d4274:	2204      	movs	r2, #4
   d4276:	e010      	b.n	d429a <_Z10airQualityv+0x46>
  }
  else if(quality == AirQualitySensor::HIGH_POLLUTION){
   d4278:	4a0d      	ldr	r2, [pc, #52]	; (d42b0 <_Z10airQualityv+0x5c>)
   d427a:	6812      	ldr	r2, [r2, #0]
   d427c:	4293      	cmp	r3, r2
   d427e:	d101      	bne.n	d4284 <_Z10airQualityv+0x30>
    aqRead = 3;
   d4280:	2203      	movs	r2, #3
   d4282:	e00a      	b.n	d429a <_Z10airQualityv+0x46>
  }
  else if(quality == AirQualitySensor::LOW_POLLUTION){
   d4284:	4a0b      	ldr	r2, [pc, #44]	; (d42b4 <_Z10airQualityv+0x60>)
   d4286:	6812      	ldr	r2, [r2, #0]
   d4288:	4293      	cmp	r3, r2
   d428a:	d101      	bne.n	d4290 <_Z10airQualityv+0x3c>
    // write to sd low pollution
    aqRead = 2;
   d428c:	2202      	movs	r2, #2
   d428e:	e004      	b.n	d429a <_Z10airQualityv+0x46>
  }
  else if(quality == AirQualitySensor::FRESH_AIR){
   d4290:	4a09      	ldr	r2, [pc, #36]	; (d42b8 <_Z10airQualityv+0x64>)
   d4292:	6812      	ldr	r2, [r2, #0]
   d4294:	4293      	cmp	r3, r2
   d4296:	d102      	bne.n	d429e <_Z10airQualityv+0x4a>
    // write fresh air to sd 
    aqRead = 1;
   d4298:	2201      	movs	r2, #1
   d429a:	4b08      	ldr	r3, [pc, #32]	; (d42bc <_Z10airQualityv+0x68>)
   d429c:	601a      	str	r2, [r3, #0]
   d429e:	bd10      	pop	{r4, pc}
   d42a0:	2003df20 	.word	0x2003df20
   d42a4:	2003df40 	.word	0x2003df40
   d42a8:	2003e3c8 	.word	0x2003e3c8
   d42ac:	000d71ac 	.word	0x000d71ac
   d42b0:	000d71a8 	.word	0x000d71a8
   d42b4:	000d71a0 	.word	0x000d71a0
   d42b8:	000d71a4 	.word	0x000d71a4
   d42bc:	2003df3c 	.word	0x2003df3c

000d42c0 <loop>:
  pinMode(A3, OUTPUT);
  pinMode(A4, INPUT);
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d42c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  // The core of your code will likely live here.
int switchValue = digitalRead(A4);
   d42c2:	200f      	movs	r0, #15
  pinMode(A3, OUTPUT);
  pinMode(A4, INPUT);
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d42c4:	b08f      	sub	sp, #60	; 0x3c
  // The core of your code will likely live here.
int switchValue = digitalRead(A4);
   d42c6:	f002 fcc3 	bl	d6c50 <digitalRead>
if(switchValue == 1){
   d42ca:	2801      	cmp	r0, #1
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
  // The core of your code will likely live here.
int switchValue = digitalRead(A4);
   d42cc:	4604      	mov	r4, r0
if(switchValue == 1){
   d42ce:	d147      	bne.n	d4360 <loop+0xa0>
  digitalWrite(A3, HIGH);
   d42d0:	4601      	mov	r1, r0
   d42d2:	2010      	movs	r0, #16
   d42d4:	f002 fca3 	bl	d6c1e <digitalWrite>
  digitalWrite(A1,LOW);
   d42d8:	2100      	movs	r1, #0
   d42da:	2012      	movs	r0, #18
   d42dc:	f002 fc9f 	bl	d6c1e <digitalWrite>
  airQuality();
   d42e0:	f7ff ffb8 	bl	d4254 <_Z10airQualityv>
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d42e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d42e8:	9303      	str	r3, [sp, #12]
 public:
  File() {}
   d42ea:	4b23      	ldr	r3, [pc, #140]	; (d4378 <loop+0xb8>)
   d42ec:	9301      	str	r3, [sp, #4]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d42ee:	2700      	movs	r7, #0
   * \param[in] oflag open flags.
   * \return a File object.
   */
  File open(const char *path, oflag_t oflag = FILE_READ) {
    File tmpFile;
    tmpFile.open(vwd(), path, oflag);
   d42f0:	f244 2302 	movw	r3, #16898	; 0x4202
   d42f4:	4a21      	ldr	r2, [pc, #132]	; (d437c <loop+0xbc>)
   d42f6:	4922      	ldr	r1, [pc, #136]	; (d4380 <loop+0xc0>)
   d42f8:	f88d 7014 	strb.w	r7, [sp, #20]
   d42fc:	a805      	add	r0, sp, #20
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
   d42fe:	ac05      	add	r4, sp, #20
   d4300:	f88d 7015 	strb.w	r7, [sp, #21]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4304:	9702      	str	r7, [sp, #8]
   d4306:	f000 fe08 	bl	d4f1a <_ZN7FatFile4openEPS_PKci>
   d430a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d430c:	4e1d      	ldr	r6, [pc, #116]	; (d4384 <loop+0xc4>)
   d430e:	f106 0510 	add.w	r5, r6, #16
   d4312:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4314:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4316:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d4318:	6823      	ldr	r3, [r4, #0]
   d431a:	602b      	str	r3, [r5, #0]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
   d431c:	9b02      	ldr	r3, [sp, #8]
   d431e:	6073      	str	r3, [r6, #4]
#define   getFloat(skipChar)  parseFloat(skipChar)
#define   getString( pre_string, post_string, buffer, length)
readBytesBetween( pre_string, terminator, buffer, length)
*/

class Stream : public Print
   d4320:	9b03      	ldr	r3, [sp, #12]
   d4322:	60b3      	str	r3, [r6, #8]
   d4324:	9b04      	ldr	r3, [sp, #16]
   d4326:	60f3      	str	r3, [r6, #12]
  file = sd.open("aqLog.txt", FILE_WRITE);
    if(file){
   d4328:	7c33      	ldrb	r3, [r6, #16]
   d432a:	b313      	cbz	r3, d4372 <loop+0xb2>
      Serial.println("file opened!");
   d432c:	f002 f9a6 	bl	d667c <_Z16_fetch_usbserialv>
   d4330:	4915      	ldr	r1, [pc, #84]	; (d4388 <loop+0xc8>)
   d4332:	f001 ffb0 	bl	d6296 <_ZN5Print7printlnEPKc>
      file.printf("air quality value: %i \n", aqRead);
   d4336:	4b15      	ldr	r3, [pc, #84]	; (d438c <loop+0xcc>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4338:	4a15      	ldr	r2, [pc, #84]	; (d4390 <loop+0xd0>)
   d433a:	681b      	ldr	r3, [r3, #0]
   d433c:	4639      	mov	r1, r7
   d433e:	4630      	mov	r0, r6
   d4340:	f001 ffd3 	bl	d62ea <_ZN5Print11printf_implEbPKcz>
      Serial.println("printing...");
   d4344:	f002 f99a 	bl	d667c <_Z16_fetch_usbserialv>
   d4348:	4912      	ldr	r1, [pc, #72]	; (d4394 <loop+0xd4>)
   d434a:	f001 ffa4 	bl	d6296 <_ZN5Print7printlnEPKc>
      delay(10000);
   d434e:	f242 7010 	movw	r0, #10000	; 0x2710
   d4352:	f002 f817 	bl	d6384 <delay>
      file.close();
   d4356:	f1a5 0020 	sub.w	r0, r5, #32
   d435a:	f000 fdd7 	bl	d4f0c <_ZN7FatFile5closeEv>
   d435e:	e008      	b.n	d4372 <loop+0xb2>
    }
}
else if(switchValue == 0){
   d4360:	b938      	cbnz	r0, d4372 <loop+0xb2>
  digitalWrite(A1, HIGH);
   d4362:	2101      	movs	r1, #1
   d4364:	2012      	movs	r0, #18
   d4366:	f002 fc5a 	bl	d6c1e <digitalWrite>
  digitalWrite(A3, LOW);
   d436a:	4621      	mov	r1, r4
   d436c:	2010      	movs	r0, #16
   d436e:	f002 fc56 	bl	d6c1e <digitalWrite>
  //Serial.println("off");
} 
}
   d4372:	b00f      	add	sp, #60	; 0x3c
   d4374:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4376:	bf00      	nop
   d4378:	000d70e0 	.word	0x000d70e0
   d437c:	000d7162 	.word	0x000d7162
   d4380:	2003e380 	.word	0x2003e380
   d4384:	2003deec 	.word	0x2003deec
   d4388:	000d716c 	.word	0x000d716c
   d438c:	2003df3c 	.word	0x2003df3c
   d4390:	000d7179 	.word	0x000d7179
   d4394:	000d7191 	.word	0x000d7191

000d4398 <_GLOBAL__sub_I_logTime>:
  else if(quality == AirQualitySensor::FRESH_AIR){
    // write fresh air to sd 
    aqRead = 1;
  }

}
   d4398:	b570      	push	{r4, r5, r6, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d439a:	f001 fbed 	bl	d5b78 <HAL_Pin_Map>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d439e:	4b20      	ldr	r3, [pc, #128]	; (d4420 <_GLOBAL__sub_I_logTime+0x88>)

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d43a0:	4e20      	ldr	r6, [pc, #128]	; (d4424 <_GLOBAL__sub_I_logTime+0x8c>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d43a2:	2164      	movs	r1, #100	; 0x64
   d43a4:	f883 1460 	strb.w	r1, [r3, #1120]	; 0x460
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d43a8:	491f      	ldr	r1, [pc, #124]	; (d4428 <_GLOBAL__sub_I_logTime+0x90>)
   d43aa:	f8c3 1470 	str.w	r1, [r3, #1136]	; 0x470
   d43ae:	2101      	movs	r1, #1
   d43b0:	f883 1474 	strb.w	r1, [r3, #1140]	; 0x474
   d43b4:	6831      	ldr	r1, [r6, #0]
   d43b6:	2200      	movs	r2, #0
   d43b8:	f011 0501 	ands.w	r5, r1, #1
   d43bc:	71da      	strb	r2, [r3, #7]
   d43be:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
   d43c2:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
   d43c6:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
   d43ca:	f8c3 2478 	str.w	r2, [r3, #1144]	; 0x478
   d43ce:	f883 247c 	strb.w	r2, [r3, #1148]	; 0x47c
   d43d2:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
   d43d6:	461c      	mov	r4, r3
   d43d8:	d10a      	bne.n	d43f0 <_GLOBAL__sub_I_logTime+0x58>
   d43da:	4630      	mov	r0, r6
   d43dc:	f7ff fe5f 	bl	d409e <__cxa_guard_acquire>
   d43e0:	b130      	cbz	r0, d43f0 <_GLOBAL__sub_I_logTime+0x58>
   d43e2:	4629      	mov	r1, r5
   d43e4:	4811      	ldr	r0, [pc, #68]	; (d442c <_GLOBAL__sub_I_logTime+0x94>)
   d43e6:	f001 fe27 	bl	d6038 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d43ea:	4630      	mov	r0, r6
   d43ec:	f7ff fe5c 	bl	d40a8 <__cxa_guard_release>
   d43f0:	480f      	ldr	r0, [pc, #60]	; (d4430 <_GLOBAL__sub_I_logTime+0x98>)
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d43f2:	4b0e      	ldr	r3, [pc, #56]	; (d442c <_GLOBAL__sub_I_logTime+0x94>)
   d43f4:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
   d43f8:	2300      	movs	r3, #0
   d43fa:	7403      	strb	r3, [r0, #16]
   d43fc:	7443      	strb	r3, [r0, #17]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d43fe:	6043      	str	r3, [r0, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4400:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4404:	6083      	str	r3, [r0, #8]
#include <SPI.h>
  /*  for sd card   */
unsigned long logTime;
  #define SD_CS_PIN SS
SdFat sd;
File file;
   d4406:	490b      	ldr	r1, [pc, #44]	; (d4434 <_GLOBAL__sub_I_logTime+0x9c>)
 public:
  File() {}
   d4408:	4b0b      	ldr	r3, [pc, #44]	; (d4438 <_GLOBAL__sub_I_logTime+0xa0>)
   d440a:	4a0c      	ldr	r2, [pc, #48]	; (d443c <_GLOBAL__sub_I_logTime+0xa4>)
   d440c:	6003      	str	r3, [r0, #0]
   d440e:	f002 fc89 	bl	d6d24 <__aeabi_atexit>
  #define FILE_BASE_NAME "aqdata"
char fileName[13] = FILE_BASE_NAME "00.csv";
const uint8_t BASE_NAME_SIZE = sizeof(FILE_BASE_NAME) -1;
  #define error(msg) sd.errorHalt(msg)
  /* for air quality  */
AirQualitySensor Aq(A2); // put sensor pin in here
   d4412:	2111      	movs	r1, #17
   d4414:	480a      	ldr	r0, [pc, #40]	; (d4440 <_GLOBAL__sub_I_logTime+0xa8>)
  else if(quality == AirQualitySensor::FRESH_AIR){
    // write fresh air to sd 
    aqRead = 1;
  }

}
   d4416:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  #define FILE_BASE_NAME "aqdata"
char fileName[13] = FILE_BASE_NAME "00.csv";
const uint8_t BASE_NAME_SIZE = sizeof(FILE_BASE_NAME) -1;
  #define error(msg) sd.errorHalt(msg)
  /* for air quality  */
AirQualitySensor Aq(A2); // put sensor pin in here
   d441a:	f001 bb39 	b.w	d5a90 <_ZN16AirQualitySensorC1Ei>
   d441e:	bf00      	nop
   d4420:	2003df44 	.word	0x2003df44
   d4424:	2003dee0 	.word	0x2003dee0
   d4428:	000d70d4 	.word	0x000d70d4
   d442c:	2003dee4 	.word	0x2003dee4
   d4430:	2003deec 	.word	0x2003deec
   d4434:	000d40cb 	.word	0x000d40cb
   d4438:	000d70e0 	.word	0x000d70e0
   d443c:	2003dedc 	.word	0x2003dedc
   d4440:	2003df20 	.word	0x2003df20

000d4444 <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
   d4444:	f001 bb98 	b.w	d5b78 <HAL_Pin_Map>

000d4448 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
   d4448:	f001 bb96 	b.w	d5b78 <HAL_Pin_Map>

000d444c <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d444c:	f001 bb94 	b.w	d5b78 <HAL_Pin_Map>

000d4450 <_GLOBAL__sub_I__ZN7istream3getEv>:
   d4450:	f001 bb92 	b.w	d5b78 <HAL_Pin_Map>

000d4454 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d4454:	b510      	push	{r4, lr}
   d4456:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d4458:	3024      	adds	r0, #36	; 0x24
   d445a:	f000 fe8f 	bl	d517c <_ZN8FatCache4syncEv>
   d445e:	b128      	cbz	r0, d446c <_ZN9FatVolume9cacheSyncEv+0x18>
   d4460:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d4464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d4468:	f000 be88 	b.w	d517c <_ZN8FatCache4syncEv>
  }
   d446c:	bd10      	pop	{r4, pc}

000d446e <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
   d446e:	1e41      	subs	r1, r0, #1
   d4470:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
   d4474:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d4476:	0843      	lsrs	r3, r0, #1
   d4478:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
   d447c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d4480:	fa53 f080 	uxtab	r0, r3, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d4484:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d4486:	b2c0      	uxtb	r0, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d4488:	d1f5      	bne.n	d4476 <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
   d448a:	4770      	bx	lr

000d448c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d448c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d4490:	7803      	ldrb	r3, [r0, #0]
   d4492:	2b20      	cmp	r3, #32
   d4494:	f100 0401 	add.w	r4, r0, #1
   d4498:	d101      	bne.n	d449e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12>
   d449a:	4620      	mov	r0, r4
   d449c:	e7f8      	b.n	d4490 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d449e:	4f70      	ldr	r7, [pc, #448]	; (d4660 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
   d44a0:	6088      	str	r0, [r1, #8]
   d44a2:	4605      	mov	r5, r0
   d44a4:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
   d44a6:	462e      	mov	r6, r5
   d44a8:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
   d44ac:	b30b      	cbz	r3, d44f2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d44ae:	2b2f      	cmp	r3, #47	; 0x2f
   d44b0:	d101      	bne.n	d44b6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2a>
   d44b2:	1903      	adds	r3, r0, r4
   d44b4:	e017      	b.n	d44e6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d44b6:	2b5c      	cmp	r3, #92	; 0x5c
   d44b8:	d102      	bne.n	d44c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x34>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d44ba:	2000      	movs	r0, #0
   d44bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d44c0:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
   d44c4:	b2e4      	uxtb	r4, r4
   d44c6:	2c1d      	cmp	r4, #29
   d44c8:	d803      	bhi.n	d44d2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x46>
   d44ca:	fa27 f404 	lsr.w	r4, r7, r4
   d44ce:	07e4      	lsls	r4, r4, #31
   d44d0:	d4f3      	bmi.n	d44ba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d44d2:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
   d44d6:	2c3c      	cmp	r4, #60	; 0x3c
   d44d8:	d0ef      	beq.n	d44ba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
   d44da:	3b20      	subs	r3, #32
   d44dc:	2b5e      	cmp	r3, #94	; 0x5e
   d44de:	d9e1      	bls.n	d44a4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18>
   d44e0:	e7eb      	b.n	d44ba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d44e2:	2d2f      	cmp	r5, #47	; 0x2f
   d44e4:	d105      	bne.n	d44f2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d44e6:	461e      	mov	r6, r3
   d44e8:	f813 5b01 	ldrb.w	r5, [r3], #1
   d44ec:	2d20      	cmp	r5, #32
   d44ee:	d1f8      	bne.n	d44e2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x56>
   d44f0:	e7f9      	b.n	d44e6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  *ptr = &path[end];
   d44f2:	6016      	str	r6, [r2, #0]
   d44f4:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
   d44f6:	4298      	cmp	r0, r3
   d44f8:	ebc0 0803 	rsb	r8, r0, r3
   d44fc:	d009      	beq.n	d4512 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x86>
    c = path[len - 1];
   d44fe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d4502:	2a2e      	cmp	r2, #46	; 0x2e
   d4504:	d0f7      	beq.n	d44f6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
   d4506:	2a20      	cmp	r2, #32
   d4508:	d0f5      	beq.n	d44f6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
   d450a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d450e:	dcd4      	bgt.n	d44ba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
   d4510:	e001      	b.n	d4516 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8a>
   d4512:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
   d4516:	f8c1 8004 	str.w	r8, [r1, #4]
   d451a:	f101 030c 	add.w	r3, r1, #12
   d451e:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   d4522:	2420      	movs	r4, #32
   d4524:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   d4528:	4293      	cmp	r3, r2
   d452a:	d1fb      	bne.n	d4524 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d452c:	4603      	mov	r3, r0
   d452e:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d4530:	f813 4b01 	ldrb.w	r4, [r3], #1
   d4534:	2c2e      	cmp	r4, #46	; 0x2e
   d4536:	d0fa      	beq.n	d452e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
   d4538:	2c20      	cmp	r4, #32
   d453a:	d0f8      	beq.n	d452e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
  // Not 8.3 if leading dot or space.
  is83 = !si;
   d453c:	fab2 f482 	clz	r4, r2
   d4540:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d4542:	f108 36ff 	add.w	r6, r8, #4294967295
   d4546:	1c73      	adds	r3, r6, #1
   d4548:	d107      	bne.n	d455a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   d454a:	2700      	movs	r7, #0
   d454c:	f04f 0e07 	mov.w	lr, #7
   d4550:	463d      	mov	r5, r7
   d4552:	46ba      	mov	sl, r7
   d4554:	f04f 0908 	mov.w	r9, #8
   d4558:	e009      	b.n	d456e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe2>
   d455a:	5d83      	ldrb	r3, [r0, r6]
   d455c:	2b2e      	cmp	r3, #46	; 0x2e
   d455e:	d0f4      	beq.n	d454a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
   d4560:	3e01      	subs	r6, #1
   d4562:	e7f0      	b.n	d4546 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (; si < len; si++) {
    c = path[si];
   d4564:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
   d4566:	2b20      	cmp	r3, #32
   d4568:	d104      	bne.n	d4574 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe8>
      is83 = false;
   d456a:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
   d456c:	3201      	adds	r2, #1
   d456e:	4542      	cmp	r2, r8
   d4570:	dbf8      	blt.n	d4564 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd8>
   d4572:	e04b      	b.n	d460c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x180>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
   d4574:	2b2e      	cmp	r3, #46	; 0x2e
   d4576:	d102      	bne.n	d457e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf2>
   d4578:	42b2      	cmp	r2, r6
   d457a:	d1f6      	bne.n	d456a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d457c:	e003      	b.n	d4586 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xfa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d457e:	2b22      	cmp	r3, #34	; 0x22
   d4580:	d017      	beq.n	d45b2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
   d4582:	2b7c      	cmp	r3, #124	; 0x7c
   d4584:	d015      	beq.n	d45b2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d4586:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d458a:	f1bc 0f05 	cmp.w	ip, #5
   d458e:	d801      	bhi.n	d4594 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d4590:	2b2d      	cmp	r3, #45	; 0x2d
   d4592:	d10e      	bne.n	d45b2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d4594:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d4598:	f1bc 0f05 	cmp.w	ip, #5
   d459c:	d909      	bls.n	d45b2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d459e:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d45a2:	f1bc 0f02 	cmp.w	ip, #2
   d45a6:	d904      	bls.n	d45b2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
   d45a8:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d45ac:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d45b0:	d902      	bls.n	d45b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12c>
   d45b2:	42b2      	cmp	r2, r6
   d45b4:	d10e      	bne.n	d45d4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x148>
   d45b6:	e049      	b.n	d464c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d45b8:	42b2      	cmp	r2, r6
   d45ba:	d047      	beq.n	d464c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
   d45bc:	4575      	cmp	r5, lr
   d45be:	d821      	bhi.n	d4604 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
   d45c0:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d45c4:	f1bc 0f19 	cmp.w	ip, #25
   d45c8:	d808      	bhi.n	d45dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x150>
        c += 'A' - 'a';
   d45ca:	3b20      	subs	r3, #32
   d45cc:	b2db      	uxtb	r3, r3
        lc |= bit;
   d45ce:	ea49 0707 	orr.w	r7, r9, r7
   d45d2:	e00a      	b.n	d45ea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d45d4:	4575      	cmp	r5, lr
   d45d6:	d815      	bhi.n	d4604 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
   d45d8:	2400      	movs	r4, #0
      c = '_';
   d45da:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
   d45dc:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d45e0:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d45e4:	bf98      	it	ls
   d45e6:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
   d45ea:	f105 0c01 	add.w	ip, r5, #1
   d45ee:	fa5f fc8c 	uxtb.w	ip, ip
   d45f2:	440d      	add	r5, r1
      if (i < 7) {
   d45f4:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
   d45f8:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
   d45fa:	d801      	bhi.n	d4600 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x174>
        fname->seqPos = i;
   d45fc:	f881 c00c 	strb.w	ip, [r1, #12]
   d4600:	4665      	mov	r5, ip
   d4602:	e7b3      	b.n	d456c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d4604:	f1be 0f0a 	cmp.w	lr, #10
   d4608:	d117      	bne.n	d463a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ae>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
   d460a:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   d460c:	7b4b      	ldrb	r3, [r1, #13]
   d460e:	2b20      	cmp	r3, #32
   d4610:	f43f af53 	beq.w	d44ba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
    return false;
  }

  if (is83) {
   d4614:	b13c      	cbz	r4, d4626 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x19a>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d4616:	ea1a 0f07 	tst.w	sl, r7
   d461a:	bf18      	it	ne
   d461c:	2702      	movne	r7, #2
   d461e:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   d4620:	2001      	movs	r0, #1
   d4622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   d4626:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d4628:	2001      	movs	r0, #1
   d462a:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d462c:	4419      	add	r1, r3
   d462e:	237e      	movs	r3, #126	; 0x7e
   d4630:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d4632:	2331      	movs	r3, #49	; 0x31
   d4634:	738b      	strb	r3, [r1, #14]
   d4636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
   d463a:	42b2      	cmp	r2, r6
   d463c:	dce5      	bgt.n	d460a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d463e:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d4640:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d4644:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d4646:	f04f 0910 	mov.w	r9, #16
   d464a:	e78e      	b.n	d456a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d464c:	f1be 0f0a 	cmp.w	lr, #10
   d4650:	d0db      	beq.n	d460a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d4652:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d4654:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d4658:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d465a:	f04f 0910 	mov.w	r9, #16
   d465e:	e785      	b.n	d456c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
   d4660:	31000101 	.word	0x31000101

000d4664 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d4664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d4668:	f891 900c 	ldrb.w	r9, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d466c:	4606      	mov	r6, r0
   d466e:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d4670:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d4672:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d4674:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d4678:	6869      	ldr	r1, [r5, #4]
   d467a:	68aa      	ldr	r2, [r5, #8]
   d467c:	1863      	adds	r3, r4, r1
   d467e:	b29b      	uxth	r3, r3
   d4680:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
   d4682:	4291      	cmp	r1, r2
   d4684:	d006      	beq.n	d4694 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
   d4686:	f812 0b01 	ldrb.w	r0, [r2], #1
   d468a:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d468e:	4043      	eors	r3, r0
   d4690:	b29b      	uxth	r3, r3
   d4692:	e7f6      	b.n	d4682 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
   d4694:	f1b9 0f03 	cmp.w	r9, #3
   d4698:	bf28      	it	cs
   d469a:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d469e:	f109 0204 	add.w	r2, r9, #4
   d46a2:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d46a4:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d46a8:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d46aa:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d46ac:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d46ae:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d46b0:	bf94      	ite	ls
   d46b2:	3130      	addls	r1, #48	; 0x30
   d46b4:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d46b6:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d46b8:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d46ba:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d46be:	d3f1      	bcc.n	d46a4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d46c0:	eb05 0309 	add.w	r3, r5, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d46c4:	2100      	movs	r1, #0
   d46c6:	735f      	strb	r7, [r3, #13]
   d46c8:	4630      	mov	r0, r6
   d46ca:	f000 fb31 	bl	d4d30 <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
   d46ce:	2101      	movs	r1, #1
   d46d0:	4630      	mov	r0, r6
   d46d2:	f000 fb10 	bl	d4cf6 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d46d6:	4601      	mov	r1, r0
   d46d8:	b928      	cbnz	r0, d46e6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d46da:	7870      	ldrb	r0, [r6, #1]
   d46dc:	fab0 f080 	clz	r0, r0
   d46e0:	0940      	lsrs	r0, r0, #5
   d46e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d46e6:	7803      	ldrb	r3, [r0, #0]
   d46e8:	b14b      	cbz	r3, d46fe <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d46ea:	7ac3      	ldrb	r3, [r0, #11]
   d46ec:	071b      	lsls	r3, r3, #28
   d46ee:	d4ee      	bmi.n	d46ce <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d46f0:	220b      	movs	r2, #11
   d46f2:	4640      	mov	r0, r8
   d46f4:	f002 fc8e 	bl	d7014 <memcmp>
   d46f8:	2800      	cmp	r0, #0
   d46fa:	d1e8      	bne.n	d46ce <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d46fc:	e002      	b.n	d4704 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
   d46fe:	2001      	movs	r0, #1
   d4700:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d4704:	3401      	adds	r4, #1
   d4706:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
   d4708:	2c64      	cmp	r4, #100	; 0x64
   d470a:	d1b5      	bne.n	d4678 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
   d470c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4710 <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d4710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4714:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d4716:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d4718:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d471a:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d471e:	9005      	str	r0, [sp, #20]
   d4720:	460e      	mov	r6, r1
   d4722:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d4724:	d101      	bne.n	d472a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
   d4726:	2000      	movs	r0, #0
   d4728:	e1a0      	b.n	d4a6c <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d472a:	9b05      	ldr	r3, [sp, #20]
   d472c:	781b      	ldrb	r3, [r3, #0]
   d472e:	2b00      	cmp	r3, #0
   d4730:	d1f9      	bne.n	d4726 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
   d4732:	6853      	ldr	r3, [r2, #4]
   d4734:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d4736:	7813      	ldrb	r3, [r2, #0]
   d4738:	079b      	lsls	r3, r3, #30
   d473a:	f000 818d 	beq.w	d4a58 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
   d473e:	9b02      	ldr	r3, [sp, #8]
   d4740:	270d      	movs	r7, #13
   d4742:	330c      	adds	r3, #12
   d4744:	fbb3 f7f7 	udiv	r7, r3, r7
   d4748:	3701      	adds	r7, #1
   d474a:	b2ff      	uxtb	r7, r7
   d474c:	2100      	movs	r1, #0
   d474e:	4630      	mov	r0, r6
   d4750:	f000 faee 	bl	d4d30 <_ZN7FatFile7seekSetEm>
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
   d4754:	f04f 0800 	mov.w	r8, #0
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d4758:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
   d475c:	f8cd 800c 	str.w	r8, [sp, #12]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
   d4760:	4643      	mov	r3, r8
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
   d4762:	4644      	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
   d4764:	4645      	mov	r5, r8
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
   d4766:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d476a:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d476c:	6972      	ldr	r2, [r6, #20]
   d476e:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d4770:	2101      	movs	r1, #1
   d4772:	4630      	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d4774:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d4778:	f000 fabd 	bl	d4cf6 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d477c:	9b07      	ldr	r3, [sp, #28]
   d477e:	b920      	cbnz	r0, d478a <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
   d4780:	7873      	ldrb	r3, [r6, #1]
   d4782:	2b00      	cmp	r3, #0
   d4784:	f000 8090 	beq.w	d48a8 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
   d4788:	e7cd      	b.n	d4726 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d478a:	7802      	ldrb	r2, [r0, #0]
   d478c:	2ae5      	cmp	r2, #229	; 0xe5
   d478e:	d000      	beq.n	d4792 <_ZN7FatFile4openEPS_P7fname_ti+0x82>
   d4790:	b942      	cbnz	r2, d47a4 <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d4792:	2c00      	cmp	r4, #0
   d4794:	bf08      	it	eq
   d4796:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
   d4798:	42bc      	cmp	r4, r7
        freeFound++;
   d479a:	bf3c      	itt	cc
   d479c:	3401      	addcc	r4, #1
   d479e:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d47a0:	b922      	cbnz	r2, d47ac <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
   d47a2:	e081      	b.n	d48a8 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
   d47a4:	42bc      	cmp	r4, r7
   d47a6:	bf38      	it	cc
   d47a8:	2400      	movcc	r4, #0
   d47aa:	e003      	b.n	d47b4 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d47ac:	2ae5      	cmp	r2, #229	; 0xe5
   d47ae:	d101      	bne.n	d47b4 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   d47b0:	2500      	movs	r5, #0
   d47b2:	e7db      	b.n	d476c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d47b4:	2a2e      	cmp	r2, #46	; 0x2e
   d47b6:	d0fb      	beq.n	d47b0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d47b8:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d47ba:	290f      	cmp	r1, #15
   d47bc:	d152      	bne.n	d4864 <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
   d47be:	b93d      	cbnz	r5, d47d0 <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d47c0:	0651      	lsls	r1, r2, #25
   d47c2:	d5d3      	bpl.n	d476c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
   d47c4:	7b43      	ldrb	r3, [r0, #13]
   d47c6:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
   d47c8:	f002 051f 	and.w	r5, r2, #31
   d47cc:	462b      	mov	r3, r5
   d47ce:	e007      	b.n	d47e0 <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d47d0:	3b01      	subs	r3, #1
   d47d2:	b2db      	uxtb	r3, r3
   d47d4:	429a      	cmp	r2, r3
   d47d6:	d1eb      	bne.n	d47b0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d47d8:	7b42      	ldrb	r2, [r0, #13]
   d47da:	9903      	ldr	r1, [sp, #12]
   d47dc:	4291      	cmp	r1, r2
   d47de:	d1e7      	bne.n	d47b0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
   d47e0:	1e5a      	subs	r2, r3, #1
   d47e2:	f04f 0c0d 	mov.w	ip, #13
   d47e6:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
   d47ea:	9a02      	ldr	r2, [sp, #8]
   d47ec:	4562      	cmp	r2, ip
   d47ee:	d9df      	bls.n	d47b0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d47f0:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d47f4:	f1be 0f04 	cmp.w	lr, #4
   d47f8:	fa5f f28e 	uxtb.w	r2, lr
   d47fc:	d804      	bhi.n	d4808 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
   d47fe:	eb00 024e 	add.w	r2, r0, lr, lsl #1
   d4802:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   d4806:	e00c      	b.n	d4822 <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d4808:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d480a:	bf95      	itete	ls
   d480c:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d4810:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d4814:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d4818:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d481c:	bf94      	ite	ls
   d481e:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d4820:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
   d4822:	9902      	ldr	r1, [sp, #8]
   d4824:	4561      	cmp	r1, ip
   d4826:	d103      	bne.n	d4830 <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
   d4828:	2a00      	cmp	r2, #0
   d482a:	bf18      	it	ne
   d482c:	2500      	movne	r5, #0
   d482e:	e79d      	b.n	d476c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d4830:	2aff      	cmp	r2, #255	; 0xff
   d4832:	d8bd      	bhi.n	d47b0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d4834:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d4836:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d483a:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d483c:	f8d9 1008 	ldr.w	r1, [r9, #8]
   d4840:	f811 100c 	ldrb.w	r1, [r1, ip]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d4844:	bf98      	it	ls
   d4846:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d4848:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d484c:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   d4850:	bf98      	it	ls
   d4852:	b2d2      	uxtbls	r2, r2
   d4854:	f1bc 0f19 	cmp.w	ip, #25
   d4858:	bf9c      	itt	ls
   d485a:	3120      	addls	r1, #32
   d485c:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d485e:	4291      	cmp	r1, r2
   d4860:	d1a6      	bne.n	d47b0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d4862:	e0fb      	b.n	d4a5c <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d4864:	0709      	lsls	r1, r1, #28
   d4866:	d4a3      	bmi.n	d47b0 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
   d4868:	b14d      	cbz	r5, d487e <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d486a:	2b01      	cmp	r3, #1
   d486c:	f47f af5b 	bne.w	d4726 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d4870:	f7ff fdfd 	bl	d446e <_ZN7FatFile11lfnChecksumEPh>
   d4874:	9b03      	ldr	r3, [sp, #12]
   d4876:	4283      	cmp	r3, r0
   d4878:	f47f af55 	bne.w	d4726 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d487c:	e00f      	b.n	d489e <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d487e:	220b      	movs	r2, #11
   d4880:	9906      	ldr	r1, [sp, #24]
   d4882:	9307      	str	r3, [sp, #28]
   d4884:	f002 fbc6 	bl	d7014 <memcmp>
   d4888:	9b07      	ldr	r3, [sp, #28]
   d488a:	2800      	cmp	r0, #0
   d488c:	f47f af6e 	bne.w	d476c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d4890:	f899 2000 	ldrb.w	r2, [r9]
   d4894:	07d2      	lsls	r2, r2, #31
   d4896:	d502      	bpl.n	d489e <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
   d4898:	2201      	movs	r2, #1
   d489a:	9204      	str	r2, [sp, #16]
   d489c:	e766      	b.n	d476c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
   d489e:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   d48a2:	f000 80d1 	beq.w	d4a48 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
   d48a6:	e73e      	b.n	d4726 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d48a8:	f41b 7f00 	tst.w	fp, #512	; 0x200
   d48ac:	f43f af3b 	beq.w	d4726 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d48b0:	f00b 0303 	and.w	r3, fp, #3
   d48b4:	3b01      	subs	r3, #1
   d48b6:	2b01      	cmp	r3, #1
   d48b8:	f63f af35 	bhi.w	d4726 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
   d48bc:	2c00      	cmp	r4, #0
   d48be:	bf08      	it	eq
   d48c0:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d48c2:	42bc      	cmp	r4, r7
   d48c4:	d302      	bcc.n	d48cc <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
   d48c6:	9b04      	ldr	r3, [sp, #16]
   d48c8:	b9cb      	cbnz	r3, d48fe <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
   d48ca:	e01f      	b.n	d490c <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
   d48cc:	2100      	movs	r1, #0
   d48ce:	4630      	mov	r0, r6
   d48d0:	f000 fa11 	bl	d4cf6 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d48d4:	b910      	cbnz	r0, d48dc <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
   d48d6:	7873      	ldrb	r3, [r6, #1]
   d48d8:	b15b      	cbz	r3, d48f2 <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
   d48da:	e724      	b.n	d4726 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   d48dc:	3401      	adds	r4, #1
   d48de:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d48e0:	e7ef      	b.n	d48c2 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   d48e2:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d48e4:	791b      	ldrb	r3, [r3, #4]
   d48e6:	2b01      	cmp	r3, #1
   d48e8:	d8ed      	bhi.n	d48c6 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
   d48ea:	3410      	adds	r4, #16
   d48ec:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
   d48ee:	42a7      	cmp	r7, r4
   d48f0:	d9e9      	bls.n	d48c6 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
   d48f2:	4630      	mov	r0, r6
   d48f4:	f000 f8d2 	bl	d4a9c <_ZN7FatFile13addDirClusterEv>
   d48f8:	2800      	cmp	r0, #0
   d48fa:	d1f2      	bne.n	d48e2 <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
   d48fc:	e713      	b.n	d4726 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
   d48fe:	4649      	mov	r1, r9
   d4900:	4630      	mov	r0, r6
   d4902:	f7ff feaf 	bl	d4664 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d4906:	2800      	cmp	r0, #0
   d4908:	f43f af0d 	beq.w	d4726 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d490c:	ea4f 1148 	mov.w	r1, r8, lsl #5
   d4910:	4630      	mov	r0, r6
   d4912:	f000 fa0d 	bl	d4d30 <_ZN7FatFile7seekSetEm>
   d4916:	2800      	cmp	r0, #0
   d4918:	f43f af05 	beq.w	d4726 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
   d491c:	1e7d      	subs	r5, r7, #1
   d491e:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d4920:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d4922:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
   d4926:	f04f 080f 	mov.w	r8, #15
   d492a:	e041      	b.n	d49b0 <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d492c:	2100      	movs	r1, #0
   d492e:	4630      	mov	r0, r6
   d4930:	f000 f9e1 	bl	d4cf6 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d4934:	4607      	mov	r7, r0
   d4936:	2800      	cmp	r0, #0
   d4938:	f43f aef5 	beq.w	d4726 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
   d493c:	68b2      	ldr	r2, [r6, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
   d493e:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d4942:	42ac      	cmp	r4, r5
   d4944:	f043 0301 	orr.w	r3, r3, #1
   d4948:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d494c:	bf0c      	ite	eq
   d494e:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
   d4952:	4622      	movne	r2, r4
   d4954:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d4956:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   d495a:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d495e:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d4962:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d4964:	f7ff fd83 	bl	d446e <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d4968:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d496a:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
   d496c:	f887 a01a 	strb.w	sl, [r7, #26]
   d4970:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d4974:	f002 021f 	and.w	r2, r2, #31
   d4978:	230d      	movs	r3, #13
   d497a:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
   d497c:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d4980:	435a      	muls	r2, r3
   d4982:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d4984:	9902      	ldr	r1, [sp, #8]
   d4986:	4291      	cmp	r1, r2
   d4988:	d915      	bls.n	d49b6 <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
   d498a:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
   d498e:	2b04      	cmp	r3, #4
   d4990:	fa5f fc83 	uxtb.w	ip, r3
   d4994:	f103 0001 	add.w	r0, r3, #1
   d4998:	d813      	bhi.n	d49c2 <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
   d499a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   d499e:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
   d49a2:	280d      	cmp	r0, #13
   d49a4:	f102 0201 	add.w	r2, r2, #1
   d49a8:	4603      	mov	r3, r0
   d49aa:	d1eb      	bne.n	d4984 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d49ac:	3c01      	subs	r4, #1
   d49ae:	b2e4      	uxtb	r4, r4
   d49b0:	2c00      	cmp	r4, #0
   d49b2:	d1bb      	bne.n	d492c <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
   d49b4:	e00e      	b.n	d49d4 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d49b6:	bf14      	ite	ne
   d49b8:	f04f 31ff 	movne.w	r1, #4294967295
   d49bc:	2100      	moveq	r1, #0
   d49be:	b289      	uxth	r1, r1
   d49c0:	e7e5      	b.n	d498e <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d49c2:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d49c6:	bf94      	ite	ls
   d49c8:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d49cc:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
   d49d0:	8099      	strh	r1, [r3, #4]
   d49d2:	e7e6      	b.n	d49a2 <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d49d4:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
   d49d6:	4621      	mov	r1, r4
   d49d8:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d49da:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
   d49de:	f000 f98a 	bl	d4cf6 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d49e2:	4607      	mov	r7, r0
   d49e4:	2800      	cmp	r0, #0
   d49e6:	f43f ae9e 	beq.w	d4726 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
   d49ea:	2220      	movs	r2, #32
   d49ec:	4621      	mov	r1, r4
   d49ee:	f002 fb2b 	bl	d7048 <memset>
  memcpy(dir->name, fname->sfn, 11);
   d49f2:	464b      	mov	r3, r9
   d49f4:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d49f8:	603a      	str	r2, [r7, #0]
   d49fa:	685a      	ldr	r2, [r3, #4]
   d49fc:	607a      	str	r2, [r7, #4]
   d49fe:	891a      	ldrh	r2, [r3, #8]
   d4a00:	813a      	strh	r2, [r7, #8]
   d4a02:	7a9b      	ldrb	r3, [r3, #10]
   d4a04:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d4a06:	f899 3000 	ldrb.w	r3, [r9]
   d4a0a:	f003 0318 	and.w	r3, r3, #24
   d4a0e:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
   d4a10:	4b18      	ldr	r3, [pc, #96]	; (d4a74 <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
   d4a12:	681b      	ldr	r3, [r3, #0]
   d4a14:	b12b      	cbz	r3, d4a22 <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d4a16:	f107 010e 	add.w	r1, r7, #14
   d4a1a:	f107 0010 	add.w	r0, r7, #16
   d4a1e:	4798      	blx	r3
   d4a20:	e006      	b.n	d4a30 <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
   d4a22:	2321      	movs	r3, #33	; 0x21
   d4a24:	743b      	strb	r3, [r7, #16]
   d4a26:	2328      	movs	r3, #40	; 0x28
   d4a28:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d4a2a:	2308      	movs	r3, #8
   d4a2c:	73bc      	strb	r4, [r7, #14]
   d4a2e:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
   d4a30:	8a3b      	ldrh	r3, [r7, #16]
   d4a32:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
   d4a34:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
   d4a36:	89fb      	ldrh	r3, [r7, #14]
   d4a38:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
   d4a3a:	68b2      	ldr	r2, [r6, #8]
   d4a3c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d4a40:	f043 0301 	orr.w	r3, r3, #1
   d4a44:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d4a48:	9500      	str	r5, [sp, #0]
   d4a4a:	465b      	mov	r3, fp
   d4a4c:	4652      	mov	r2, sl
   d4a4e:	4631      	mov	r1, r6
   d4a50:	9805      	ldr	r0, [sp, #20]
   d4a52:	f000 f9b6 	bl	d4dc2 <_ZN7FatFile15openCachedEntryEPS_tih>
   d4a56:	e009      	b.n	d4a6c <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d4a58:	2701      	movs	r7, #1
   d4a5a:	e677      	b.n	d474c <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
   d4a5c:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
   d4a60:	f1be 0f0d 	cmp.w	lr, #13
   d4a64:	f43f ae82 	beq.w	d476c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d4a68:	46d4      	mov	ip, sl
   d4a6a:	e6c3      	b.n	d47f4 <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
   d4a6c:	b009      	add	sp, #36	; 0x24
   d4a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4a72:	bf00      	nop
   d4a74:	2003e3d0 	.word	0x2003e3d0

000d4a78 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d4a78:	f001 b87e 	b.w	d5b78 <HAL_Pin_Map>

000d4a7c <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d4a7c:	f001 b87c 	b.w	d5b78 <HAL_Pin_Map>

000d4a80 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d4a80:	f001 b87a 	b.w	d5b78 <HAL_Pin_Map>

000d4a84 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d4a84:	f001 b878 	b.w	d5b78 <HAL_Pin_Map>

000d4a88 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d4a88:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d4a8a:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d4a8c:	f043 0304 	orr.w	r3, r3, #4
   d4a90:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d4a92:	f100 0210 	add.w	r2, r0, #16
   d4a96:	6880      	ldr	r0, [r0, #8]
   d4a98:	f000 bc26 	b.w	d52e8 <_ZN9FatVolume15allocateClusterEmPm>

000d4a9c <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d4a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d4aa0:	7803      	ldrb	r3, [r0, #0]
   d4aa2:	f003 0320 	and.w	r3, r3, #32
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d4aa6:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d4aa8:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d4aac:	b10b      	cbz	r3, d4ab2 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d4aae:	2600      	movs	r6, #0
   d4ab0:	e02e      	b.n	d4b10 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   d4ab2:	6942      	ldr	r2, [r0, #20]
   d4ab4:	4b18      	ldr	r3, [pc, #96]	; (d4b18 <_ZN7FatFile13addDirClusterEv+0x7c>)
   d4ab6:	429a      	cmp	r2, r3
   d4ab8:	d8f9      	bhi.n	d4aae <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
   d4aba:	f7ff ffe5 	bl	d4a88 <_ZN7FatFile10addClusterEv>
   d4abe:	4606      	mov	r6, r0
   d4ac0:	2800      	cmp	r0, #0
   d4ac2:	d0f4      	beq.n	d4aae <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
   d4ac4:	6921      	ldr	r1, [r4, #16]
   d4ac6:	68a0      	ldr	r0, [r4, #8]
   d4ac8:	f000 fba3 	bl	d5212 <_ZNK9FatVolume17clusterFirstBlockEm>
   d4acc:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d4ace:	68a0      	ldr	r0, [r4, #8]
   d4ad0:	2205      	movs	r2, #5
   d4ad2:	4639      	mov	r1, r7
   d4ad4:	3024      	adds	r0, #36	; 0x24
   d4ad6:	f000 fb78 	bl	d51ca <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
   d4ada:	4680      	mov	r8, r0
   d4adc:	2800      	cmp	r0, #0
   d4ade:	d0e6      	beq.n	d4aae <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
   d4ae0:	4629      	mov	r1, r5
   d4ae2:	f44f 7200 	mov.w	r2, #512	; 0x200
   d4ae6:	f002 faaf 	bl	d7048 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d4aea:	2501      	movs	r5, #1
   d4aec:	68a3      	ldr	r3, [r4, #8]
   d4aee:	791a      	ldrb	r2, [r3, #4]
   d4af0:	42aa      	cmp	r2, r5
   d4af2:	d909      	bls.n	d4b08 <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d4af4:	4642      	mov	r2, r8
   d4af6:	19e9      	adds	r1, r5, r7
   d4af8:	6818      	ldr	r0, [r3, #0]
   d4afa:	f000 fee3 	bl	d58c4 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d4afe:	2800      	cmp	r0, #0
   d4b00:	d0d5      	beq.n	d4aae <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d4b02:	3501      	adds	r5, #1
   d4b04:	b2ed      	uxtb	r5, r5
   d4b06:	e7f1      	b.n	d4aec <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d4b08:	6963      	ldr	r3, [r4, #20]
   d4b0a:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d4b0e:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
   d4b10:	4630      	mov	r0, r6
   d4b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4b16:	bf00      	nop
   d4b18:	001ffdff 	.word	0x001ffdff

000d4b1c <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d4b1c:	b510      	push	{r4, lr}
   d4b1e:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d4b20:	6880      	ldr	r0, [r0, #8]
   d4b22:	460a      	mov	r2, r1
   d4b24:	3024      	adds	r0, #36	; 0x24
   d4b26:	69a1      	ldr	r1, [r4, #24]
   d4b28:	f000 fb4f 	bl	d51ca <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d4b2c:	b120      	cbz	r0, d4b38 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d4b2e:	88a3      	ldrh	r3, [r4, #4]
   d4b30:	f003 030f 	and.w	r3, r3, #15
   d4b34:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d4b38:	bd10      	pop	{r4, pc}

000d4b3a <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d4b3a:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d4b3c:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d4b3e:	4605      	mov	r5, r0
   d4b40:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d4b42:	b984      	cbnz	r4, d4b66 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d4b44:	2224      	movs	r2, #36	; 0x24
   d4b46:	4621      	mov	r1, r4
   d4b48:	f002 fa7e 	bl	d7048 <memset>

  m_vol = vol;
   d4b4c:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d4b4e:	79f3      	ldrb	r3, [r6, #7]
   d4b50:	2b10      	cmp	r3, #16
   d4b52:	d003      	beq.n	d4b5c <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d4b54:	2b20      	cmp	r3, #32
   d4b56:	d106      	bne.n	d4b66 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d4b58:	2340      	movs	r3, #64	; 0x40
   d4b5a:	e000      	b.n	d4b5e <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d4b5c:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d4b5e:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d4b60:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d4b62:	70a8      	strb	r0, [r5, #2]
   d4b64:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d4b66:	2000      	movs	r0, #0
   d4b68:	bd70      	pop	{r4, r5, r6, pc}

000d4b6a <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d4b6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4b6e:	7803      	ldrb	r3, [r0, #0]
   d4b70:	4604      	mov	r4, r0
   d4b72:	4689      	mov	r9, r1
   d4b74:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d4b76:	b14b      	cbz	r3, d4b8c <_ZN7FatFile4readEPvj+0x22>
   d4b78:	7882      	ldrb	r2, [r0, #2]
   d4b7a:	07d1      	lsls	r1, r2, #31
   d4b7c:	d506      	bpl.n	d4b8c <_ZN7FatFile4readEPvj+0x22>
   d4b7e:	e00c      	b.n	d4b9a <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d4b80:	465a      	mov	r2, fp
   d4b82:	6921      	ldr	r1, [r4, #16]
   d4b84:	f000 fb4b 	bl	d521e <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d4b88:	2800      	cmp	r0, #0
   d4b8a:	da3d      	bge.n	d4c08 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d4b8c:	7863      	ldrb	r3, [r4, #1]
   d4b8e:	f043 0302 	orr.w	r3, r3, #2
   d4b92:	7063      	strb	r3, [r4, #1]
  return -1;
   d4b94:	f04f 30ff 	mov.w	r0, #4294967295
   d4b98:	e097      	b.n	d4cca <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d4b9a:	071a      	lsls	r2, r3, #28
   d4b9c:	d503      	bpl.n	d4ba6 <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d4b9e:	69e3      	ldr	r3, [r4, #28]
   d4ba0:	6962      	ldr	r2, [r4, #20]
   d4ba2:	1a9b      	subs	r3, r3, r2
   d4ba4:	e007      	b.n	d4bb6 <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d4ba6:	069a      	lsls	r2, r3, #26
   d4ba8:	d508      	bpl.n	d4bbc <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d4baa:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d4bac:	891a      	ldrh	r2, [r3, #8]
   d4bae:	6963      	ldr	r3, [r4, #20]
   d4bb0:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d4bb4:	b29b      	uxth	r3, r3
   d4bb6:	429d      	cmp	r5, r3
   d4bb8:	bf28      	it	cs
   d4bba:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d4bbc:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d4bbe:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d4bc2:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d4bc6:	2e00      	cmp	r6, #0
   d4bc8:	d035      	beq.n	d4c36 <_ZN7FatFile4readEPvj+0xcc>
   d4bca:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d4bcc:	6963      	ldr	r3, [r4, #20]
   d4bce:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d4bd0:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d4bd4:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d4bd8:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d4bdc:	d002      	beq.n	d4be4 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d4bde:	6a03      	ldr	r3, [r0, #32]
   d4be0:	4419      	add	r1, r3
   d4be2:	e01d      	b.n	d4c20 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d4be4:	f890 8005 	ldrb.w	r8, [r0, #5]
   d4be8:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d4bec:	f1ba 0f00 	cmp.w	sl, #0
   d4bf0:	d110      	bne.n	d4c14 <_ZN7FatFile4readEPvj+0xaa>
   d4bf2:	f1b8 0f00 	cmp.w	r8, #0
   d4bf6:	d10d      	bne.n	d4c14 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d4bf8:	2b00      	cmp	r3, #0
   d4bfa:	d1c1      	bne.n	d4b80 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d4bfc:	0653      	lsls	r3, r2, #25
   d4bfe:	bf4c      	ite	mi
   d4c00:	6a03      	ldrmi	r3, [r0, #32]
   d4c02:	6a23      	ldrpl	r3, [r4, #32]
   d4c04:	6123      	str	r3, [r4, #16]
   d4c06:	e005      	b.n	d4c14 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d4c08:	d104      	bne.n	d4c14 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d4c0a:	7823      	ldrb	r3, [r4, #0]
   d4c0c:	f013 0f70 	tst.w	r3, #112	; 0x70
   d4c10:	d111      	bne.n	d4c36 <_ZN7FatFile4readEPvj+0xcc>
   d4c12:	e7bb      	b.n	d4b8c <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d4c14:	6921      	ldr	r1, [r4, #16]
   d4c16:	68a0      	ldr	r0, [r4, #8]
   d4c18:	f000 fafb 	bl	d5212 <_ZNK9FatVolume17clusterFirstBlockEm>
   d4c1c:	eb08 0100 	add.w	r1, r8, r0
   d4c20:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d4c22:	f1ba 0f00 	cmp.w	sl, #0
   d4c26:	d135      	bne.n	d4c94 <_ZN7FatFile4readEPvj+0x12a>
   d4c28:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d4c2c:	d332      	bcc.n	d4c94 <_ZN7FatFile4readEPvj+0x12a>
   d4c2e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d4c30:	4299      	cmp	r1, r3
   d4c32:	d102      	bne.n	d4c3a <_ZN7FatFile4readEPvj+0xd0>
   d4c34:	e02e      	b.n	d4c94 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d4c36:	1ba8      	subs	r0, r5, r6
   d4c38:	e047      	b.n	d4cca <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d4c3a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d4c3e:	d31b      	bcc.n	d4c78 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d4c40:	7822      	ldrb	r2, [r4, #0]
   d4c42:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d4c44:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d4c48:	d406      	bmi.n	d4c58 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d4c4a:	7902      	ldrb	r2, [r0, #4]
   d4c4c:	ebc8 0202 	rsb	r2, r8, r2
   d4c50:	b2d2      	uxtb	r2, r2
   d4c52:	4592      	cmp	sl, r2
   d4c54:	bf28      	it	cs
   d4c56:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d4c58:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d4c5a:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d4c5e:	d207      	bcs.n	d4c70 <_ZN7FatFile4readEPvj+0x106>
   d4c60:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d4c62:	4653      	mov	r3, sl
   d4c64:	464a      	mov	r2, r9
   d4c66:	6800      	ldr	r0, [r0, #0]
   d4c68:	f000 fdea 	bl	d5840 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d4c6c:	b960      	cbnz	r0, d4c88 <_ZN7FatFile4readEPvj+0x11e>
   d4c6e:	e78d      	b.n	d4b8c <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d4c70:	4453      	add	r3, sl
   d4c72:	4299      	cmp	r1, r3
   d4c74:	d321      	bcc.n	d4cba <_ZN7FatFile4readEPvj+0x150>
   d4c76:	e7f3      	b.n	d4c60 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d4c78:	464a      	mov	r2, r9
   d4c7a:	6800      	ldr	r0, [r0, #0]
   d4c7c:	f000 fd98 	bl	d57b0 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d4c80:	2800      	cmp	r0, #0
   d4c82:	d083      	beq.n	d4b8c <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d4c84:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d4c88:	6963      	ldr	r3, [r4, #20]
   d4c8a:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d4c8c:	44b9      	add	r9, r7
    m_curPosition += n;
   d4c8e:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d4c90:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d4c92:	e798      	b.n	d4bc6 <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d4c94:	2200      	movs	r2, #0
   d4c96:	3024      	adds	r0, #36	; 0x24
   d4c98:	f000 fa97 	bl	d51ca <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d4c9c:	2800      	cmp	r0, #0
   d4c9e:	f43f af75 	beq.w	d4b8c <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d4ca2:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d4ca6:	42b7      	cmp	r7, r6
   d4ca8:	bf28      	it	cs
   d4caa:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d4cac:	eb00 010a 	add.w	r1, r0, sl
   d4cb0:	463a      	mov	r2, r7
   d4cb2:	4648      	mov	r0, r9
   d4cb4:	f002 f9bd 	bl	d7032 <memcpy>
   d4cb8:	e7e6      	b.n	d4c88 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d4cba:	3024      	adds	r0, #36	; 0x24
   d4cbc:	9101      	str	r1, [sp, #4]
   d4cbe:	f000 fa5d 	bl	d517c <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d4cc2:	9901      	ldr	r1, [sp, #4]
   d4cc4:	2800      	cmp	r0, #0
   d4cc6:	d1cb      	bne.n	d4c60 <_ZN7FatFile4readEPvj+0xf6>
   d4cc8:	e760      	b.n	d4b8c <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d4cca:	b003      	add	sp, #12
   d4ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4cd0 <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
   d4cd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d4cd2:	2201      	movs	r2, #1
   d4cd4:	f10d 0107 	add.w	r1, sp, #7
   d4cd8:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
   d4cda:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
   d4cdc:	6905      	ldr	r5, [r0, #16]
   d4cde:	f7ff ff44 	bl	d4b6a <_ZN7FatFile4readEPvj>
   d4ce2:	2801      	cmp	r0, #1
   d4ce4:	bf05      	ittet	eq
   d4ce6:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
   d4cea:	6166      	streq	r6, [r4, #20]
   d4cec:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = pos->cluster;
   d4cf0:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
   d4cf2:	b002      	add	sp, #8
   d4cf4:	bd70      	pop	{r4, r5, r6, pc}

000d4cf6 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d4cf6:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d4cf8:	6943      	ldr	r3, [r0, #20]
   d4cfa:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d4cfe:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
   d4d00:	b105      	cbz	r5, d4d04 <_ZN7FatFile12readDirCacheEb+0xe>
   d4d02:	b969      	cbnz	r1, d4d20 <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
   d4d04:	2201      	movs	r2, #1
   d4d06:	f10d 0107 	add.w	r1, sp, #7
   d4d0a:	4620      	mov	r0, r4
   d4d0c:	f7ff ff2d 	bl	d4b6a <_ZN7FatFile4readEPvj>
   d4d10:	b240      	sxtb	r0, r0
    if  (n != 1) {
   d4d12:	2801      	cmp	r0, #1
   d4d14:	d001      	beq.n	d4d1a <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   d4d16:	2000      	movs	r0, #0
   d4d18:	e008      	b.n	d4d2c <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
   d4d1a:	6963      	ldr	r3, [r4, #20]
   d4d1c:	331f      	adds	r3, #31
   d4d1e:	e000      	b.n	d4d22 <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
   d4d20:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d4d22:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
   d4d24:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d4d26:	3030      	adds	r0, #48	; 0x30
   d4d28:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
   d4d2c:	b003      	add	sp, #12
   d4d2e:	bd30      	pop	{r4, r5, pc}

000d4d30 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d4d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4d34:	460e      	mov	r6, r1
   d4d36:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d4d38:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d4d3a:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d4d3c:	2900      	cmp	r1, #0
   d4d3e:	d039      	beq.n	d4db4 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d4d40:	6945      	ldr	r5, [r0, #20]
   d4d42:	42b5      	cmp	r5, r6
   d4d44:	d03a      	beq.n	d4dbc <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d4d46:	b90e      	cbnz	r6, d4d4c <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d4d48:	6106      	str	r6, [r0, #16]
    goto done;
   d4d4a:	e031      	b.n	d4db0 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d4d4c:	070b      	lsls	r3, r1, #28
   d4d4e:	d503      	bpl.n	d4d58 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d4d50:	69c3      	ldr	r3, [r0, #28]
   d4d52:	429e      	cmp	r6, r3
   d4d54:	d82e      	bhi.n	d4db4 <_ZN7FatFile7seekSetEm+0x84>
   d4d56:	e007      	b.n	d4d68 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d4d58:	0688      	lsls	r0, r1, #26
   d4d5a:	d505      	bpl.n	d4d68 <_ZN7FatFile7seekSetEm+0x38>
   d4d5c:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d4d5e:	891b      	ldrh	r3, [r3, #8]
   d4d60:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d4d64:	d826      	bhi.n	d4db4 <_ZN7FatFile7seekSetEm+0x84>
   d4d66:	e023      	b.n	d4db0 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d4d68:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d4d6c:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d4d70:	1e6a      	subs	r2, r5, #1
   d4d72:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d4d76:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d4d78:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d4d7a:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d4d7c:	429a      	cmp	r2, r3
   d4d7e:	d800      	bhi.n	d4d82 <_ZN7FatFile7seekSetEm+0x52>
   d4d80:	b94d      	cbnz	r5, d4d96 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d4d82:	064a      	lsls	r2, r1, #25
   d4d84:	bf4c      	ite	mi
   d4d86:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d4d8a:	6a22      	ldrpl	r2, [r4, #32]
   d4d8c:	6122      	str	r2, [r4, #16]
   d4d8e:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d4d90:	f104 0810 	add.w	r8, r4, #16
   d4d94:	e00a      	b.n	d4dac <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d4d96:	1a9b      	subs	r3, r3, r2
   d4d98:	e7f9      	b.n	d4d8e <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d4d9a:	4642      	mov	r2, r8
   d4d9c:	6921      	ldr	r1, [r4, #16]
   d4d9e:	68a0      	ldr	r0, [r4, #8]
   d4da0:	f000 fa3d 	bl	d521e <_ZN9FatVolume6fatGetEmPm>
   d4da4:	2800      	cmp	r0, #0
   d4da6:	f105 35ff 	add.w	r5, r5, #4294967295
   d4daa:	dd03      	ble.n	d4db4 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d4dac:	2d00      	cmp	r5, #0
   d4dae:	d1f4      	bne.n	d4d9a <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d4db0:	6166      	str	r6, [r4, #20]
   d4db2:	e003      	b.n	d4dbc <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d4db4:	6127      	str	r7, [r4, #16]
  return false;
   d4db6:	2000      	movs	r0, #0
   d4db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d4dbc:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d4dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4dc2 <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d4dc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4dc4:	460f      	mov	r7, r1
   d4dc6:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d4dc8:	2100      	movs	r1, #0
   d4dca:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d4dcc:	4604      	mov	r4, r0
   d4dce:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d4dd0:	f002 f93a 	bl	d7048 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
   d4dd4:	68b8      	ldr	r0, [r7, #8]
   d4dd6:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d4dd8:	f005 020f 	and.w	r2, r5, #15
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
   d4ddc:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d4dde:	f100 0130 	add.w	r1, r0, #48	; 0x30
   d4de2:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
   d4de4:	6a3b      	ldr	r3, [r7, #32]
   d4de6:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d4de8:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d4dea:	7acb      	ldrb	r3, [r1, #11]
   d4dec:	071d      	lsls	r5, r3, #28
   d4dee:	d44c      	bmi.n	d4e8a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d4df0:	1883      	adds	r3, r0, r2
   d4df2:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d4df6:	f003 0317 	and.w	r3, r3, #23
   d4dfa:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d4dfc:	7ac9      	ldrb	r1, [r1, #11]
   d4dfe:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   d4e02:	bf04      	itt	eq
   d4e04:	f043 0308 	orreq.w	r3, r3, #8
   d4e08:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
   d4e0a:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d4e0e:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
   d4e10:	f006 0303 	and.w	r3, r6, #3
   d4e14:	2b01      	cmp	r3, #1
   d4e16:	d009      	beq.n	d4e2c <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
   d4e18:	2b02      	cmp	r3, #2
   d4e1a:	d005      	beq.n	d4e28 <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
   d4e1c:	2b00      	cmp	r3, #0
   d4e1e:	d134      	bne.n	d4e8a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
   d4e20:	0571      	lsls	r1, r6, #21
   d4e22:	d432      	bmi.n	d4e8a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
   d4e24:	2301      	movs	r3, #1
   d4e26:	e002      	b.n	d4e2e <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
   d4e28:	2303      	movs	r3, #3
   d4e2a:	e000      	b.n	d4e2e <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
   d4e2c:	2302      	movs	r3, #2
   d4e2e:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
   d4e30:	78a1      	ldrb	r1, [r4, #2]
   d4e32:	078b      	lsls	r3, r1, #30
   d4e34:	d503      	bpl.n	d4e3e <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
   d4e36:	7823      	ldrb	r3, [r4, #0]
   d4e38:	f013 0f11 	tst.w	r3, #17
   d4e3c:	d125      	bne.n	d4e8a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d4e3e:	b24b      	sxtb	r3, r1
   d4e40:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   d4e44:	f006 0108 	and.w	r1, r6, #8
   d4e48:	bf14      	ite	ne
   d4e4a:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
   d4e4e:	2700      	moveq	r7, #0
   d4e50:	4319      	orrs	r1, r3
   d4e52:	4339      	orrs	r1, r7
   d4e54:	70a1      	strb	r1, [r4, #2]
   d4e56:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();
   d4e58:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d4e5a:	4402      	add	r2, r0
                 | dir->firstClusterLow;

  if (oflag & O_TRUNC) {
   d4e5c:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
   d4e5e:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
   d4e62:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
   d4e66:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
   d4e6a:	d504      	bpl.n	d4e76 <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d4e6c:	b181      	cbz	r1, d4e90 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d4e6e:	f000 fa76 	bl	d535e <_ZN9FatVolume9freeChainEm>
   d4e72:	b968      	cbnz	r0, d4e90 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d4e74:	e009      	b.n	d4e8a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
   d4e76:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d4e78:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   d4e7a:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d4e7c:	0473      	lsls	r3, r6, #17
   d4e7e:	d50c      	bpl.n	d4e9a <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
   d4e80:	69e1      	ldr	r1, [r4, #28]
   d4e82:	4620      	mov	r0, r4
   d4e84:	f7ff ff54 	bl	d4d30 <_ZN7FatFile7seekSetEm>
   d4e88:	b938      	cbnz	r0, d4e9a <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
   d4e8a:	2000      	movs	r0, #0
   d4e8c:	7020      	strb	r0, [r4, #0]
  return false;
   d4e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
   d4e90:	78a3      	ldrb	r3, [r4, #2]
   d4e92:	f043 0304 	orr.w	r3, r3, #4
   d4e96:	70a3      	strb	r3, [r4, #2]
   d4e98:	e7f0      	b.n	d4e7c <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
   d4e9a:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
   d4e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d4ea0 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d4ea0:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d4ea2:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d4ea4:	4604      	mov	r4, r0
  if (!isOpen()) {
   d4ea6:	b90b      	cbnz	r3, d4eac <_ZN7FatFile4syncEv+0xc>
    return true;
   d4ea8:	2001      	movs	r0, #1
   d4eaa:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d4eac:	7883      	ldrb	r3, [r0, #2]
   d4eae:	075a      	lsls	r2, r3, #29
   d4eb0:	d523      	bpl.n	d4efa <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d4eb2:	2101      	movs	r1, #1
   d4eb4:	f7ff fe32 	bl	d4b1c <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d4eb8:	4605      	mov	r5, r0
   d4eba:	b928      	cbnz	r0, d4ec8 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d4ebc:	7863      	ldrb	r3, [r4, #1]
   d4ebe:	f043 0301 	orr.w	r3, r3, #1
   d4ec2:	7063      	strb	r3, [r4, #1]
  return false;
   d4ec4:	2000      	movs	r0, #0
   d4ec6:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d4ec8:	7803      	ldrb	r3, [r0, #0]
   d4eca:	2be5      	cmp	r3, #229	; 0xe5
   d4ecc:	d0f6      	beq.n	d4ebc <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d4ece:	7823      	ldrb	r3, [r4, #0]
   d4ed0:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d4ed2:	bf44      	itt	mi
   d4ed4:	69e3      	ldrmi	r3, [r4, #28]
   d4ed6:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d4ed8:	8c23      	ldrh	r3, [r4, #32]
   d4eda:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d4edc:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d4ede:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d4ee0:	4b09      	ldr	r3, [pc, #36]	; (d4f08 <_ZN7FatFile4syncEv+0x68>)
   d4ee2:	681b      	ldr	r3, [r3, #0]
   d4ee4:	b12b      	cbz	r3, d4ef2 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d4ee6:	f100 0116 	add.w	r1, r0, #22
   d4eea:	3018      	adds	r0, #24
   d4eec:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d4eee:	8b2b      	ldrh	r3, [r5, #24]
   d4ef0:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d4ef2:	78a3      	ldrb	r3, [r4, #2]
   d4ef4:	f023 0304 	bic.w	r3, r3, #4
   d4ef8:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d4efa:	68a0      	ldr	r0, [r4, #8]
   d4efc:	f7ff faaa 	bl	d4454 <_ZN9FatVolume9cacheSyncEv>
   d4f00:	2800      	cmp	r0, #0
   d4f02:	d0db      	beq.n	d4ebc <_ZN7FatFile4syncEv+0x1c>
   d4f04:	e7d0      	b.n	d4ea8 <_ZN7FatFile4syncEv+0x8>
   d4f06:	bf00      	nop
   d4f08:	2003e3d0 	.word	0x2003e3d0

000d4f0c <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d4f0c:	b510      	push	{r4, lr}
   d4f0e:	4604      	mov	r4, r0
  bool rtn = sync();
   d4f10:	f7ff ffc6 	bl	d4ea0 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d4f14:	2300      	movs	r3, #0
   d4f16:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d4f18:	bd10      	pop	{r4, pc}

000d4f1a <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d4f1a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4f1c:	b093      	sub	sp, #76	; 0x4c
   d4f1e:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4f20:	2300      	movs	r3, #0
   d4f22:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d4f26:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d4f2a:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d4f2c:	9201      	str	r2, [sp, #4]
   d4f2e:	4606      	mov	r6, r0
   d4f30:	460c      	mov	r4, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d4f32:	b10b      	cbz	r3, d4f38 <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
   d4f34:	2000      	movs	r0, #0
   d4f36:	e03d      	b.n	d4fb4 <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d4f38:	780b      	ldrb	r3, [r1, #0]
   d4f3a:	f013 0f70 	tst.w	r3, #112	; 0x70
   d4f3e:	d0f9      	beq.n	d4f34 <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d4f40:	7813      	ldrb	r3, [r2, #0]
   d4f42:	2b2f      	cmp	r3, #47	; 0x2f
   d4f44:	d112      	bne.n	d4f6c <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   d4f46:	9b01      	ldr	r3, [sp, #4]
   d4f48:	781a      	ldrb	r2, [r3, #0]
   d4f4a:	2a2f      	cmp	r2, #47	; 0x2f
   d4f4c:	d102      	bne.n	d4f54 <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   d4f4e:	3301      	adds	r3, #1
   d4f50:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d4f52:	e7f8      	b.n	d4f46 <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
   d4f54:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
   d4f56:	b91a      	cbnz	r2, d4f60 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   d4f58:	4630      	mov	r0, r6
   d4f5a:	f7ff fdee 	bl	d4b3a <_ZN7FatFile8openRootEP9FatVolume>
   d4f5e:	e029      	b.n	d4fb4 <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d4f60:	a809      	add	r0, sp, #36	; 0x24
   d4f62:	f7ff fdea 	bl	d4b3a <_ZN7FatFile8openRootEP9FatVolume>
   d4f66:	2800      	cmp	r0, #0
   d4f68:	d0e4      	beq.n	d4f34 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
   d4f6a:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d4f6c:	aa01      	add	r2, sp, #4
   d4f6e:	a903      	add	r1, sp, #12
   d4f70:	9801      	ldr	r0, [sp, #4]
   d4f72:	f7ff fa8b 	bl	d448c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d4f76:	2800      	cmp	r0, #0
   d4f78:	d0dc      	beq.n	d4f34 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
   d4f7a:	9b01      	ldr	r3, [sp, #4]
   d4f7c:	781b      	ldrb	r3, [r3, #0]
   d4f7e:	b19b      	cbz	r3, d4fa8 <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
   d4f80:	2300      	movs	r3, #0
   d4f82:	aa03      	add	r2, sp, #12
   d4f84:	4621      	mov	r1, r4
   d4f86:	4630      	mov	r0, r6
   d4f88:	f7ff fbc2 	bl	d4710 <_ZN7FatFile4openEPS_P7fname_ti>
   d4f8c:	2800      	cmp	r0, #0
   d4f8e:	d0d1      	beq.n	d4f34 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
   d4f90:	4635      	mov	r5, r6
   d4f92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4f94:	ac09      	add	r4, sp, #36	; 0x24
   d4f96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4f98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4f9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4f9c:	682b      	ldr	r3, [r5, #0]
   d4f9e:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
   d4fa0:	4630      	mov	r0, r6
   d4fa2:	f7ff ffb3 	bl	d4f0c <_ZN7FatFile5closeEv>
   d4fa6:	e7e0      	b.n	d4f6a <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
   d4fa8:	463b      	mov	r3, r7
   d4faa:	aa03      	add	r2, sp, #12
   d4fac:	4621      	mov	r1, r4
   d4fae:	4630      	mov	r0, r6
   d4fb0:	f7ff fbae 	bl	d4710 <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
   d4fb4:	b013      	add	sp, #76	; 0x4c
   d4fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4fb8 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d4fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d4fbc:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d4fbe:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d4fc0:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d4fc2:	4604      	mov	r4, r0
   d4fc4:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d4fc6:	d508      	bpl.n	d4fda <_ZN7FatFile5writeEPKvj+0x22>
   d4fc8:	7883      	ldrb	r3, [r0, #2]
   d4fca:	079a      	lsls	r2, r3, #30
   d4fcc:	d505      	bpl.n	d4fda <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d4fce:	071b      	lsls	r3, r3, #28
   d4fd0:	d50b      	bpl.n	d4fea <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d4fd2:	69e1      	ldr	r1, [r4, #28]
   d4fd4:	f7ff feac 	bl	d4d30 <_ZN7FatFile7seekSetEm>
   d4fd8:	b938      	cbnz	r0, d4fea <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d4fda:	7863      	ldrb	r3, [r4, #1]
   d4fdc:	f043 0301 	orr.w	r3, r3, #1
   d4fe0:	7063      	strb	r3, [r4, #1]
  return -1;
   d4fe2:	f04f 30ff 	mov.w	r0, #4294967295
   d4fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d4fea:	6963      	ldr	r3, [r4, #20]
   d4fec:	43db      	mvns	r3, r3
   d4fee:	4598      	cmp	r8, r3
   d4ff0:	d8f3      	bhi.n	d4fda <_ZN7FatFile5writeEPKvj+0x22>
   d4ff2:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d4ff4:	f04f 0a00 	mov.w	sl, #0
   d4ff8:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d4ffa:	2e00      	cmp	r6, #0
   d4ffc:	f000 8081 	beq.w	d5102 <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d5000:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d5002:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d5004:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d5008:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d500c:	d11c      	bne.n	d5048 <_ZN7FatFile5writeEPKvj+0x90>
   d500e:	b9df      	cbnz	r7, d5048 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d5010:	6921      	ldr	r1, [r4, #16]
   d5012:	b171      	cbz	r1, d5032 <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5014:	f104 0210 	add.w	r2, r4, #16
   d5018:	f000 f901 	bl	d521e <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d501c:	2800      	cmp	r0, #0
   d501e:	dbdc      	blt.n	d4fda <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d5020:	f040 808e 	bne.w	d5140 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d5024:	4620      	mov	r0, r4
   d5026:	f7ff fd2f 	bl	d4a88 <_ZN7FatFile10addClusterEv>
   d502a:	2800      	cmp	r0, #0
   d502c:	f040 8088 	bne.w	d5140 <_ZN7FatFile5writeEPKvj+0x188>
   d5030:	e7d3      	b.n	d4fda <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d5032:	6a23      	ldr	r3, [r4, #32]
   d5034:	b93b      	cbnz	r3, d5046 <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d5036:	4620      	mov	r0, r4
   d5038:	f7ff fd26 	bl	d4a88 <_ZN7FatFile10addClusterEv>
   d503c:	2800      	cmp	r0, #0
   d503e:	d0cc      	beq.n	d4fda <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d5040:	6923      	ldr	r3, [r4, #16]
   d5042:	6223      	str	r3, [r4, #32]
   d5044:	e000      	b.n	d5048 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d5046:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5048:	6921      	ldr	r1, [r4, #16]
   d504a:	68a0      	ldr	r0, [r4, #8]
   d504c:	f000 f8e1 	bl	d5212 <_ZNK9FatVolume17clusterFirstBlockEm>
   d5050:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d5052:	b917      	cbnz	r7, d505a <_ZN7FatFile5writeEPKvj+0xa2>
   d5054:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5058:	d221      	bcs.n	d509e <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d505a:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d505e:	42b5      	cmp	r5, r6
   d5060:	bf28      	it	cs
   d5062:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d5064:	b937      	cbnz	r7, d5074 <_ZN7FatFile5writeEPKvj+0xbc>
   d5066:	6963      	ldr	r3, [r4, #20]
   d5068:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d506a:	4293      	cmp	r3, r2
   d506c:	bf34      	ite	cc
   d506e:	2201      	movcc	r2, #1
   d5070:	2205      	movcs	r2, #5
   d5072:	e000      	b.n	d5076 <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d5074:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5076:	68a0      	ldr	r0, [r4, #8]
   d5078:	3024      	adds	r0, #36	; 0x24
   d507a:	f000 f8a6 	bl	d51ca <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d507e:	2800      	cmp	r0, #0
   d5080:	d0ab      	beq.n	d4fda <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d5082:	4438      	add	r0, r7
   d5084:	462a      	mov	r2, r5
   d5086:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d5088:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d508a:	f001 ffd2 	bl	d7032 <memcpy>
      if (512 == (n + blockOffset)) {
   d508e:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d5092:	d130      	bne.n	d50f6 <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d5094:	68a0      	ldr	r0, [r4, #8]
   d5096:	3024      	adds	r0, #36	; 0x24
   d5098:	f000 f870 	bl	d517c <_ZN8FatCache4syncEv>
   d509c:	e017      	b.n	d50ce <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d509e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d50a2:	68a0      	ldr	r0, [r4, #8]
   d50a4:	d315      	bcc.n	d50d2 <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d50a6:	7902      	ldrb	r2, [r0, #4]
   d50a8:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d50aa:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d50ac:	b2d2      	uxtb	r2, r2
   d50ae:	4293      	cmp	r3, r2
   d50b0:	bf28      	it	cs
   d50b2:	4613      	movcs	r3, r2
   d50b4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d50b6:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d50b8:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d50bc:	d302      	bcc.n	d50c4 <_ZN7FatFile5writeEPKvj+0x10c>
   d50be:	441a      	add	r2, r3
   d50c0:	4291      	cmp	r1, r2
   d50c2:	d337      	bcc.n	d5134 <_ZN7FatFile5writeEPKvj+0x17c>
   d50c4:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d50c6:	464a      	mov	r2, r9
   d50c8:	6838      	ldr	r0, [r7, #0]
   d50ca:	f000 fc6d 	bl	d59a8 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d50ce:	b990      	cbnz	r0, d50f6 <_ZN7FatFile5writeEPKvj+0x13e>
   d50d0:	e783      	b.n	d4fda <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d50d2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d50d4:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d50d6:	bf02      	ittt	eq
   d50d8:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d50dc:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d50e0:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d50e2:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d50e4:	464a      	mov	r2, r9
   d50e6:	6818      	ldr	r0, [r3, #0]
   d50e8:	f000 fbec 	bl	d58c4 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d50ec:	2800      	cmp	r0, #0
   d50ee:	f43f af74 	beq.w	d4fda <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d50f2:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d50f6:	6963      	ldr	r3, [r4, #20]
   d50f8:	442b      	add	r3, r5
   d50fa:	6163      	str	r3, [r4, #20]
    src += n;
   d50fc:	44a9      	add	r9, r5
    nToWrite -= n;
   d50fe:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d5100:	e77a      	b.n	d4ff8 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d5102:	69e2      	ldr	r2, [r4, #28]
   d5104:	4293      	cmp	r3, r2
   d5106:	d901      	bls.n	d510c <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d5108:	61e3      	str	r3, [r4, #28]
   d510a:	e002      	b.n	d5112 <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d510c:	4b0f      	ldr	r3, [pc, #60]	; (d514c <_ZN7FatFile5writeEPKvj+0x194>)
   d510e:	681b      	ldr	r3, [r3, #0]
   d5110:	b11b      	cbz	r3, d511a <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d5112:	78a3      	ldrb	r3, [r4, #2]
   d5114:	f043 0304 	orr.w	r3, r3, #4
   d5118:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d511a:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d511e:	2b00      	cmp	r3, #0
   d5120:	db02      	blt.n	d5128 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d5122:	4640      	mov	r0, r8
   d5124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d5128:	4620      	mov	r0, r4
   d512a:	f7ff feb9 	bl	d4ea0 <_ZN7FatFile4syncEv>
   d512e:	2800      	cmp	r0, #0
   d5130:	d1f7      	bne.n	d5122 <_ZN7FatFile5writeEPKvj+0x16a>
   d5132:	e752      	b.n	d4fda <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5134:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5138:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d513c:	62c2      	str	r2, [r0, #44]	; 0x2c
   d513e:	e7c1      	b.n	d50c4 <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5140:	6921      	ldr	r1, [r4, #16]
   d5142:	68a0      	ldr	r0, [r4, #8]
   d5144:	f000 f865 	bl	d5212 <_ZNK9FatVolume17clusterFirstBlockEm>
   d5148:	4601      	mov	r1, r0
   d514a:	e783      	b.n	d5054 <_ZN7FatFile5writeEPKvj+0x9c>
   d514c:	2003e3d0 	.word	0x2003e3d0

000d5150 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d5150:	f000 bd12 	b.w	d5b78 <HAL_Pin_Map>

000d5154 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5154:	b570      	push	{r4, r5, r6, lr}
   d5156:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5158:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d515a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d515c:	b149      	cbz	r1, d5172 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d515e:	f001 ffa3 	bl	d70a8 <strlen>
   d5162:	682b      	ldr	r3, [r5, #0]
   d5164:	4602      	mov	r2, r0
   d5166:	4621      	mov	r1, r4
   d5168:	4628      	mov	r0, r5
   d516a:	68db      	ldr	r3, [r3, #12]
    }
   d516c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5170:	4718      	bx	r3
    }
   d5172:	bd70      	pop	{r4, r5, r6, pc}

000d5174 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d5174:	f000 bd00 	b.w	d5b78 <HAL_Pin_Map>

000d5178 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d5178:	f000 bcfe 	b.w	d5b78 <HAL_Pin_Map>

000d517c <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d517c:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d517e:	7803      	ldrb	r3, [r0, #0]
   d5180:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d5182:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d5184:	d51e      	bpl.n	d51c4 <_ZN8FatCache4syncEv+0x48>
   d5186:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5188:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d518a:	f100 060c 	add.w	r6, r0, #12
   d518e:	4632      	mov	r2, r6
   d5190:	6818      	ldr	r0, [r3, #0]
   d5192:	f000 fb97 	bl	d58c4 <_ZN9SdSpiCard10writeBlockEmPKh>
   d5196:	4605      	mov	r5, r0
   d5198:	b908      	cbnz	r0, d519e <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d519a:	2500      	movs	r5, #0
   d519c:	e013      	b.n	d51c6 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d519e:	7823      	ldrb	r3, [r4, #0]
   d51a0:	079b      	lsls	r3, r3, #30
   d51a2:	d404      	bmi.n	d51ae <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d51a4:	7823      	ldrb	r3, [r4, #0]
   d51a6:	f023 0301 	bic.w	r3, r3, #1
   d51aa:	7023      	strb	r3, [r4, #0]
   d51ac:	e00b      	b.n	d51c6 <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d51ae:	6863      	ldr	r3, [r4, #4]
   d51b0:	68a0      	ldr	r0, [r4, #8]
   d51b2:	6919      	ldr	r1, [r3, #16]
   d51b4:	4632      	mov	r2, r6
   d51b6:	4401      	add	r1, r0
   d51b8:	6818      	ldr	r0, [r3, #0]
   d51ba:	f000 fb83 	bl	d58c4 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d51be:	2800      	cmp	r0, #0
   d51c0:	d1f0      	bne.n	d51a4 <_ZN8FatCache4syncEv+0x28>
   d51c2:	e7ea      	b.n	d519a <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d51c4:	2501      	movs	r5, #1

fail:
  return false;
}
   d51c6:	4628      	mov	r0, r5
   d51c8:	bd70      	pop	{r4, r5, r6, pc}

000d51ca <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d51ca:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d51cc:	6883      	ldr	r3, [r0, #8]
   d51ce:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d51d0:	4604      	mov	r4, r0
   d51d2:	460e      	mov	r6, r1
   d51d4:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d51d6:	d014      	beq.n	d5202 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d51d8:	f7ff ffd0 	bl	d517c <_ZN8FatCache4syncEv>
   d51dc:	b908      	cbnz	r0, d51e2 <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d51de:	2000      	movs	r0, #0
   d51e0:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d51e2:	076b      	lsls	r3, r5, #29
   d51e4:	d503      	bpl.n	d51ee <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d51e6:	2300      	movs	r3, #0
   d51e8:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d51ea:	60a6      	str	r6, [r4, #8]
   d51ec:	e009      	b.n	d5202 <_ZN8FatCache4readEmh+0x38>
   d51ee:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d51f0:	f104 020c 	add.w	r2, r4, #12
   d51f4:	4631      	mov	r1, r6
   d51f6:	6818      	ldr	r0, [r3, #0]
   d51f8:	f000 fada 	bl	d57b0 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d51fc:	2800      	cmp	r0, #0
   d51fe:	d1f2      	bne.n	d51e6 <_ZN8FatCache4readEmh+0x1c>
   d5200:	e7ed      	b.n	d51de <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d5202:	7823      	ldrb	r3, [r4, #0]
   d5204:	4620      	mov	r0, r4
   d5206:	f005 0503 	and.w	r5, r5, #3
   d520a:	431d      	orrs	r5, r3
   d520c:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d5210:	bd70      	pop	{r4, r5, r6, pc}

000d5212 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d5212:	7983      	ldrb	r3, [r0, #6]
   d5214:	6940      	ldr	r0, [r0, #20]
   d5216:	3902      	subs	r1, #2
   d5218:	4099      	lsls	r1, r3
}
   d521a:	4408      	add	r0, r1
   d521c:	4770      	bx	lr

000d521e <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d521e:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d5220:	b570      	push	{r4, r5, r6, lr}
   d5222:	4605      	mov	r5, r0
   d5224:	460c      	mov	r4, r1
   d5226:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5228:	d802      	bhi.n	d5230 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d522a:	f04f 30ff 	mov.w	r0, #4294967295
   d522e:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5230:	69c3      	ldr	r3, [r0, #28]
   d5232:	4299      	cmp	r1, r3
   d5234:	d8f9      	bhi.n	d522a <_ZN9FatVolume6fatGetEmPm+0xc>
   d5236:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d5238:	2b20      	cmp	r3, #32
   d523a:	d110      	bne.n	d525e <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d523c:	6981      	ldr	r1, [r0, #24]
   d523e:	2202      	movs	r2, #2
   d5240:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d5244:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5248:	f7ff ffbf 	bl	d51ca <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d524c:	2800      	cmp	r0, #0
   d524e:	d0ec      	beq.n	d522a <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d5250:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d5254:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d5258:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d525c:	e00f      	b.n	d527e <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d525e:	2b10      	cmp	r3, #16
   d5260:	d1e3      	bne.n	d522a <_ZN9FatVolume6fatGetEmPm+0xc>
   d5262:	6983      	ldr	r3, [r0, #24]
   d5264:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d5268:	2202      	movs	r2, #2
   d526a:	4419      	add	r1, r3
   d526c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d5270:	f7ff ffab 	bl	d51ca <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d5274:	2800      	cmp	r0, #0
   d5276:	d0d8      	beq.n	d522a <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d5278:	b2e4      	uxtb	r4, r4
   d527a:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d527e:	69ea      	ldr	r2, [r5, #28]
   d5280:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d5282:	bf9a      	itte	ls
   d5284:	6033      	strls	r3, [r6, #0]
  return 1;
   d5286:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d5288:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d528a:	bd70      	pop	{r4, r5, r6, pc}

000d528c <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d528c:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d528e:	b538      	push	{r3, r4, r5, lr}
   d5290:	460c      	mov	r4, r1
   d5292:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5294:	d801      	bhi.n	d529a <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d5296:	2000      	movs	r0, #0
   d5298:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d529a:	69c3      	ldr	r3, [r0, #28]
   d529c:	4299      	cmp	r1, r3
   d529e:	d8fa      	bhi.n	d5296 <_ZN9FatVolume6fatPutEmm+0xa>
   d52a0:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d52a2:	2b20      	cmp	r3, #32
   d52a4:	d10e      	bne.n	d52c4 <_ZN9FatVolume6fatPutEmm+0x38>
   d52a6:	6981      	ldr	r1, [r0, #24]
   d52a8:	2203      	movs	r2, #3
   d52aa:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d52ae:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d52b2:	f7ff ff8a 	bl	d51ca <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d52b6:	2800      	cmp	r0, #0
   d52b8:	d0ed      	beq.n	d5296 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d52ba:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d52be:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d52c2:	e00f      	b.n	d52e4 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d52c4:	2b10      	cmp	r3, #16
   d52c6:	d1e6      	bne.n	d5296 <_ZN9FatVolume6fatPutEmm+0xa>
   d52c8:	6983      	ldr	r3, [r0, #24]
   d52ca:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d52ce:	2203      	movs	r2, #3
   d52d0:	4419      	add	r1, r3
   d52d2:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d52d6:	f7ff ff78 	bl	d51ca <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d52da:	2800      	cmp	r0, #0
   d52dc:	d0db      	beq.n	d5296 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d52de:	b2e4      	uxtb	r4, r4
   d52e0:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d52e4:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d52e6:	bd38      	pop	{r3, r4, r5, pc}

000d52e8 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d52e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d52ec:	68c4      	ldr	r4, [r0, #12]
   d52ee:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d52f0:	4605      	mov	r5, r0
   d52f2:	460e      	mov	r6, r1
   d52f4:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d52f6:	d207      	bcs.n	d5308 <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d52f8:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d52fa:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d52fc:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d52fe:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d5300:	429c      	cmp	r4, r3
   d5302:	d903      	bls.n	d530c <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d5304:	b9cf      	cbnz	r7, d533a <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d5306:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d5308:	2701      	movs	r7, #1
   d530a:	e7f7      	b.n	d52fc <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d530c:	42a6      	cmp	r6, r4
   d530e:	d014      	beq.n	d533a <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d5310:	aa01      	add	r2, sp, #4
   d5312:	4621      	mov	r1, r4
   d5314:	4628      	mov	r0, r5
   d5316:	f7ff ff82 	bl	d521e <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d531a:	2800      	cmp	r0, #0
   d531c:	db0d      	blt.n	d533a <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d531e:	d0ed      	beq.n	d52fc <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d5320:	9b01      	ldr	r3, [sp, #4]
   d5322:	2b00      	cmp	r3, #0
   d5324:	d1ea      	bne.n	d52fc <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d5326:	b107      	cbz	r7, d532a <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d5328:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d532a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d532e:	4621      	mov	r1, r4
   d5330:	4628      	mov	r0, r5
   d5332:	f7ff ffab 	bl	d528c <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d5336:	4607      	mov	r7, r0
   d5338:	b908      	cbnz	r0, d533e <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d533a:	2700      	movs	r7, #0
   d533c:	e00b      	b.n	d5356 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d533e:	b916      	cbnz	r6, d5346 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d5340:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d5344:	e007      	b.n	d5356 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d5346:	4622      	mov	r2, r4
   d5348:	4631      	mov	r1, r6
   d534a:	4628      	mov	r0, r5
   d534c:	f7ff ff9e 	bl	d528c <_ZN9FatVolume6fatPutEmm>
   d5350:	2800      	cmp	r0, #0
   d5352:	d1f5      	bne.n	d5340 <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d5354:	e7f1      	b.n	d533a <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d5356:	4638      	mov	r0, r7
   d5358:	b002      	add	sp, #8
   d535a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d535e <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d535e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5360:	4605      	mov	r5, r0
   d5362:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d5364:	aa01      	add	r2, sp, #4
   d5366:	4621      	mov	r1, r4
   d5368:	4628      	mov	r0, r5
   d536a:	f7ff ff58 	bl	d521e <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d536e:	1e06      	subs	r6, r0, #0
   d5370:	da01      	bge.n	d5376 <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
   d5372:	2000      	movs	r0, #0
   d5374:	e00f      	b.n	d5396 <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d5376:	2200      	movs	r2, #0
   d5378:	4621      	mov	r1, r4
   d537a:	4628      	mov	r0, r5
   d537c:	f7ff ff86 	bl	d528c <_ZN9FatVolume6fatPutEmm>
   d5380:	2800      	cmp	r0, #0
   d5382:	d0f6      	beq.n	d5372 <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d5384:	68eb      	ldr	r3, [r5, #12]
   d5386:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
   d5388:	bf9c      	itt	ls
   d538a:	f104 34ff 	addls.w	r4, r4, #4294967295
   d538e:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
   d5390:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
   d5392:	2e00      	cmp	r6, #0
   d5394:	d1e6      	bne.n	d5364 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d5396:	b002      	add	sp, #8
   d5398:	bd70      	pop	{r4, r5, r6, pc}

000d539a <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d539a:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d539c:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d539e:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d53a0:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d53a2:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d53a4:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d53a8:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d53aa:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d53ac:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d53ae:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d53b2:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d53b4:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d53b8:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d53bc:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d53c0:	b1a1      	cbz	r1, d53ec <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d53c2:	2904      	cmp	r1, #4
   d53c4:	d85d      	bhi.n	d5482 <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d53c6:	4611      	mov	r1, r2
   d53c8:	3024      	adds	r0, #36	; 0x24
   d53ca:	f7ff fefe 	bl	d51ca <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d53ce:	2800      	cmp	r0, #0
   d53d0:	d057      	beq.n	d5482 <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d53d2:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d53d6:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d53da:	065b      	lsls	r3, r3, #25
   d53dc:	d151      	bne.n	d5482 <_ZN9FatVolume4initEh+0xe8>
   d53de:	351b      	adds	r5, #27
   d53e0:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d53e4:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d53e8:	2d00      	cmp	r5, #0
   d53ea:	d04a      	beq.n	d5482 <_ZN9FatVolume4initEh+0xe8>
   d53ec:	2200      	movs	r2, #0
   d53ee:	4629      	mov	r1, r5
   d53f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d53f4:	f7ff fee9 	bl	d51ca <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d53f8:	2800      	cmp	r0, #0
   d53fa:	d042      	beq.n	d5482 <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d53fc:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d5400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d5404:	d13d      	bne.n	d5482 <_ZN9FatVolume4initEh+0xe8>
   d5406:	7c03      	ldrb	r3, [r0, #16]
   d5408:	2b02      	cmp	r3, #2
   d540a:	d13a      	bne.n	d5482 <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d540c:	89c3      	ldrh	r3, [r0, #14]
   d540e:	2b00      	cmp	r3, #0
   d5410:	d037      	beq.n	d5482 <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d5412:	7b41      	ldrb	r1, [r0, #13]
   d5414:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d5416:	1e4b      	subs	r3, r1, #1
   d5418:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d541a:	2300      	movs	r3, #0
   d541c:	71a3      	strb	r3, [r4, #6]
   d541e:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d5420:	2301      	movs	r3, #1
   d5422:	428b      	cmp	r3, r1
   d5424:	d007      	beq.n	d5436 <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d5426:	3e01      	subs	r6, #1
   d5428:	d02b      	beq.n	d5482 <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d542a:	79a2      	ldrb	r2, [r4, #6]
   d542c:	005b      	lsls	r3, r3, #1
   d542e:	3201      	adds	r2, #1
   d5430:	b2db      	uxtb	r3, r3
   d5432:	71a2      	strb	r2, [r4, #6]
   d5434:	e7f5      	b.n	d5422 <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d5436:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d5438:	b902      	cbnz	r2, d543c <_ZN9FatVolume4initEh+0xa2>
   d543a:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d543c:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d543e:	89c6      	ldrh	r6, [r0, #14]
   d5440:	442e      	add	r6, r5
   d5442:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d5444:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d5448:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d544a:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d544e:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d5450:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d5454:	0152      	lsls	r2, r2, #5
   d5456:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d545a:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d545e:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d5460:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d5464:	b903      	cbnz	r3, d5468 <_ZN9FatVolume4initEh+0xce>
   d5466:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d5468:	1aad      	subs	r5, r5, r2
   d546a:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d546c:	79a5      	ldrb	r5, [r4, #6]
   d546e:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d5472:	1c6b      	adds	r3, r5, #1
   d5474:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d5476:	f640 73f4 	movw	r3, #4084	; 0xff4
   d547a:	429d      	cmp	r5, r3
   d547c:	d803      	bhi.n	d5486 <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d547e:	230c      	movs	r3, #12
   d5480:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d5482:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d5484:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d5486:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d548a:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d548c:	bf85      	ittet	hi
   d548e:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d5490:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d5492:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d5494:	2320      	movhi	r3, #32
   d5496:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d5498:	2001      	movs	r0, #1

fail:
  return false;
}
   d549a:	bd70      	pop	{r4, r5, r6, pc}

000d549c <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d549c:	f000 bb6c 	b.w	d5b78 <HAL_Pin_Map>

000d54a0 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d54a0:	f000 bb6a 	b.w	d5b78 <HAL_Pin_Map>

000d54a4 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d54a4:	f000 bb68 	b.w	d5b78 <HAL_Pin_Map>

000d54a8 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d54a8:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d54aa:	4c0e      	ldr	r4, [pc, #56]	; (d54e4 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d54ac:	460e      	mov	r6, r1
   d54ae:	4615      	mov	r5, r2
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d54b0:	f000 fbf2 	bl	d5c98 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d54b4:	6823      	ldr	r3, [r4, #0]
   d54b6:	1ac0      	subs	r0, r0, r3
   d54b8:	4b0b      	ldr	r3, [pc, #44]	; (d54e8 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d54ba:	4298      	cmp	r0, r3
   d54bc:	d908      	bls.n	d54d0 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d54be:	f000 fbf3 	bl	d5ca8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d54c2:	4b0a      	ldr	r3, [pc, #40]	; (d54ec <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d54c4:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d54c6:	f000 fd4b 	bl	d5f60 <spark_process>
   d54ca:	f000 fbe5 	bl	d5c98 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d54ce:	6020      	str	r0, [r4, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d54d0:	f000 fbea 	bl	d5ca8 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d54d4:	b280      	uxth	r0, r0
   d54d6:	1b80      	subs	r0, r0, r6
}
   d54d8:	42a8      	cmp	r0, r5
   d54da:	bfd4      	ite	le
   d54dc:	2000      	movle	r0, #0
   d54de:	2001      	movgt	r0, #1
   d54e0:	bd70      	pop	{r4, r5, r6, pc}
   d54e2:	bf00      	nop
   d54e4:	2003e3d4 	.word	0x2003e3d4
   d54e8:	000186a0 	.word	0x000186a0
   d54ec:	2003e730 	.word	0x2003e730

000d54f0 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d54f0:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d54f2:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d54f4:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d54f6:	b94d      	cbnz	r5, d550c <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d54f8:	6840      	ldr	r0, [r0, #4]
   d54fa:	f000 fa7d 	bl	d59f8 <_ZN14SdSpiAltDriver8activateEv>
   d54fe:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d5500:	4629      	mov	r1, r5
   d5502:	7d18      	ldrb	r0, [r3, #20]
   d5504:	f001 fb8b 	bl	d6c1e <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d5508:	2301      	movs	r3, #1
   d550a:	7223      	strb	r3, [r4, #8]
   d550c:	bd38      	pop	{r3, r4, r5, pc}

000d550e <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d550e:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d5510:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d5512:	4604      	mov	r4, r0
  if (m_spiActive) {
   d5514:	b16b      	cbz	r3, d5532 <_ZN9SdSpiCard7spiStopEv+0x24>
   d5516:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d5518:	2101      	movs	r1, #1
   d551a:	7d18      	ldrb	r0, [r3, #20]
   d551c:	f001 fb7f 	bl	d6c1e <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5520:	21ff      	movs	r1, #255	; 0xff
   d5522:	6860      	ldr	r0, [r4, #4]
   d5524:	f000 fa9a 	bl	d5a5c <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d5528:	6860      	ldr	r0, [r4, #4]
   d552a:	f000 fa79 	bl	d5a20 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d552e:	2300      	movs	r3, #0
   d5530:	7223      	strb	r3, [r4, #8]
   d5532:	bd10      	pop	{r4, pc}

000d5534 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d5534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5536:	4604      	mov	r4, r0
   d5538:	460d      	mov	r5, r1
   d553a:	4616      	mov	r6, r2
   d553c:	f000 fbb4 	bl	d5ca8 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d5540:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5542:	6860      	ldr	r0, [r4, #4]
   d5544:	f000 fa6f 	bl	d5a26 <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d5548:	28ff      	cmp	r0, #255	; 0xff
   d554a:	7260      	strb	r0, [r4, #9]
   d554c:	d109      	bne.n	d5562 <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d554e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5552:	4639      	mov	r1, r7
   d5554:	4620      	mov	r0, r4
   d5556:	f7ff ffa7 	bl	d54a8 <_ZN9SdSpiCard10isTimedOutEtt>
   d555a:	2800      	cmp	r0, #0
   d555c:	d0f1      	beq.n	d5542 <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d555e:	2355      	movs	r3, #85	; 0x55
   d5560:	e00b      	b.n	d557a <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d5562:	28fe      	cmp	r0, #254	; 0xfe
   d5564:	d001      	beq.n	d556a <_ZN9SdSpiCard8readDataEPhj+0x36>
   d5566:	2350      	movs	r3, #80	; 0x50
   d5568:	e007      	b.n	d557a <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d556a:	4632      	mov	r2, r6
   d556c:	4629      	mov	r1, r5
   d556e:	6860      	ldr	r0, [r4, #4]
   d5570:	f000 fa5e 	bl	d5a30 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d5574:	7260      	strb	r0, [r4, #9]
   d5576:	b130      	cbz	r0, d5586 <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5578:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d557a:	4620      	mov	r0, r4
   d557c:	7023      	strb	r3, [r4, #0]
   d557e:	f7ff ffc6 	bl	d550e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5582:	2000      	movs	r0, #0
}
   d5584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5586:	6860      	ldr	r0, [r4, #4]
   d5588:	f000 fa4d 	bl	d5a26 <_ZN14SdSpiAltDriver7receiveEv>
   d558c:	6860      	ldr	r0, [r4, #4]
   d558e:	f000 fa4a 	bl	d5a26 <_ZN14SdSpiAltDriver7receiveEv>
   d5592:	2001      	movs	r0, #1
   d5594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5596 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d5596:	b570      	push	{r4, r5, r6, lr}
   d5598:	4604      	mov	r4, r0
   d559a:	460e      	mov	r6, r1
   d559c:	f000 fb84 	bl	d5ca8 <HAL_Timer_Get_Milli_Seconds>
   d55a0:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d55a2:	4632      	mov	r2, r6
   d55a4:	4629      	mov	r1, r5
   d55a6:	4620      	mov	r0, r4
   d55a8:	f7ff ff7e 	bl	d54a8 <_ZN9SdSpiCard10isTimedOutEtt>
   d55ac:	b930      	cbnz	r0, d55bc <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d55ae:	6860      	ldr	r0, [r4, #4]
   d55b0:	f000 fa39 	bl	d5a26 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d55b4:	28ff      	cmp	r0, #255	; 0xff
   d55b6:	d1f4      	bne.n	d55a2 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d55b8:	2001      	movs	r0, #1
   d55ba:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d55bc:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d55be:	bd70      	pop	{r4, r5, r6, pc}

000d55c0 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d55c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d55c2:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d55c4:	9201      	str	r2, [sp, #4]
   d55c6:	4604      	mov	r4, r0
   d55c8:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d55ca:	b90b      	cbnz	r3, d55d0 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d55cc:	f7ff ff90 	bl	d54f0 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d55d0:	b125      	cbz	r5, d55dc <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d55d2:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d55d6:	4620      	mov	r0, r4
   d55d8:	f7ff ffdd 	bl	d5596 <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d55dc:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d55e0:	6860      	ldr	r0, [r4, #4]
   d55e2:	f000 fa3b 	bl	d5a5c <_ZN14SdSpiAltDriver4sendEh>
   d55e6:	f10d 0607 	add.w	r6, sp, #7
   d55ea:	f10d 0703 	add.w	r7, sp, #3
   d55ee:	f816 1901 	ldrb.w	r1, [r6], #-1
   d55f2:	6860      	ldr	r0, [r4, #4]
   d55f4:	f000 fa32 	bl	d5a5c <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d55f8:	42be      	cmp	r6, r7
   d55fa:	d1f8      	bne.n	d55ee <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d55fc:	2d00      	cmp	r5, #0
   d55fe:	bf0c      	ite	eq
   d5600:	2195      	moveq	r1, #149	; 0x95
   d5602:	2187      	movne	r1, #135	; 0x87
   d5604:	6860      	ldr	r0, [r4, #4]
   d5606:	f000 fa29 	bl	d5a5c <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d560a:	6860      	ldr	r0, [r4, #4]
   d560c:	f000 fa0b 	bl	d5a26 <_ZN14SdSpiAltDriver7receiveEv>
   d5610:	250b      	movs	r5, #11
   d5612:	6860      	ldr	r0, [r4, #4]
   d5614:	f000 fa07 	bl	d5a26 <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d5618:	0603      	lsls	r3, r0, #24
   d561a:	7260      	strb	r0, [r4, #9]
   d561c:	d503      	bpl.n	d5626 <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d561e:	3d01      	subs	r5, #1
   d5620:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d5624:	d1f5      	bne.n	d5612 <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d5626:	b003      	add	sp, #12
   d5628:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d562a <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d562a:	b570      	push	{r4, r5, r6, lr}
   d562c:	4604      	mov	r4, r0
   d562e:	460d      	mov	r5, r1
   d5630:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d5632:	2137      	movs	r1, #55	; 0x37
   d5634:	2200      	movs	r2, #0
   d5636:	f7ff ffc3 	bl	d55c0 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d563a:	4632      	mov	r2, r6
   d563c:	4629      	mov	r1, r5
   d563e:	4620      	mov	r0, r4
  }
   d5640:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d5644:	f7ff bfbc 	b.w	d55c0 <_ZN9SdSpiCard11cardCommandEhm>

000d5648 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d5648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d564c:	2500      	movs	r5, #0
   d564e:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d5650:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d5652:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d5654:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d5656:	4604      	mov	r4, r0
   d5658:	4690      	mov	r8, r2
   d565a:	461e      	mov	r6, r3
   d565c:	f000 fb24 	bl	d5ca8 <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d5660:	4641      	mov	r1, r8
   d5662:	4607      	mov	r7, r0
   d5664:	6860      	ldr	r0, [r4, #4]
   d5666:	f000 f9cb 	bl	d5a00 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d566a:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_ARDUINO = 16*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d566c:	4a4f      	ldr	r2, [pc, #316]	; (d57ac <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d566e:	721d      	strb	r5, [r3, #8]
   d5670:	f04f 0801 	mov.w	r8, #1
   d5674:	60da      	str	r2, [r3, #12]
   d5676:	745d      	strb	r5, [r3, #17]
   d5678:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d567c:	4620      	mov	r0, r4
   d567e:	f7ff ff37 	bl	d54f0 <_ZN9SdSpiCard8spiStartEv>
   d5682:	6863      	ldr	r3, [r4, #4]
   d5684:	4641      	mov	r1, r8
   d5686:	7d18      	ldrb	r0, [r3, #20]
   d5688:	f001 fac9 	bl	d6c1e <digitalWrite>
   d568c:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d568e:	21ff      	movs	r1, #255	; 0xff
   d5690:	6860      	ldr	r0, [r4, #4]
   d5692:	3d01      	subs	r5, #1
   d5694:	f000 f9e2 	bl	d5a5c <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d5698:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d569c:	d1f7      	bne.n	d568e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d569e:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d56a0:	4629      	mov	r1, r5
   d56a2:	7d18      	ldrb	r0, [r3, #20]
   d56a4:	f001 fabb 	bl	d6c1e <digitalWrite>
   d56a8:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d56aa:	2200      	movs	r2, #0
   d56ac:	4611      	mov	r1, r2
   d56ae:	4620      	mov	r0, r4
   d56b0:	f7ff ff86 	bl	d55c0 <_ZN9SdSpiCard11cardCommandEhm>
   d56b4:	2801      	cmp	r0, #1
   d56b6:	4680      	mov	r8, r0
   d56b8:	d012      	beq.n	d56e0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d56ba:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d56bc:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d56c0:	d101      	bne.n	d56c6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d56c2:	2320      	movs	r3, #32
   d56c4:	e057      	b.n	d5776 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d56c6:	21fd      	movs	r1, #253	; 0xfd
   d56c8:	6860      	ldr	r0, [r4, #4]
   d56ca:	f000 f9c7 	bl	d5a5c <_ZN14SdSpiAltDriver4sendEh>
   d56ce:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d56d2:	6860      	ldr	r0, [r4, #4]
   d56d4:	f000 f9a7 	bl	d5a26 <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d56d8:	f1b8 0801 	subs.w	r8, r8, #1
   d56dc:	d1f9      	bne.n	d56d2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d56de:	e7e4      	b.n	d56aa <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d56e0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d56e4:	2108      	movs	r1, #8
   d56e6:	4620      	mov	r0, r4
   d56e8:	f7ff ff6a 	bl	d55c0 <_ZN9SdSpiCard11cardCommandEhm>
   d56ec:	2805      	cmp	r0, #5
   d56ee:	d102      	bne.n	d56f6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d56f0:	f884 800a 	strb.w	r8, [r4, #10]
   d56f4:	e00f      	b.n	d5716 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d56f6:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d56f8:	6860      	ldr	r0, [r4, #4]
   d56fa:	f000 f994 	bl	d5a26 <_ZN14SdSpiAltDriver7receiveEv>
   d56fe:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d5700:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d5704:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d5706:	d1f7      	bne.n	d56f8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d5708:	28aa      	cmp	r0, #170	; 0xaa
   d570a:	d102      	bne.n	d5712 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d570c:	2302      	movs	r3, #2
   d570e:	72a3      	strb	r3, [r4, #10]
   d5710:	e001      	b.n	d5716 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d5712:	2325      	movs	r3, #37	; 0x25
   d5714:	e02f      	b.n	d5776 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d5716:	7aa3      	ldrb	r3, [r4, #10]
   d5718:	2b02      	cmp	r3, #2
   d571a:	bf0c      	ite	eq
   d571c:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d5720:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d5722:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d5724:	462a      	mov	r2, r5
   d5726:	2129      	movs	r1, #41	; 0x29
   d5728:	4620      	mov	r0, r4
   d572a:	f7ff ff7e 	bl	d562a <_ZN9SdSpiCard8cardAcmdEhm>
   d572e:	4602      	mov	r2, r0
   d5730:	b148      	cbz	r0, d5746 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d5732:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d5736:	4639      	mov	r1, r7
   d5738:	4620      	mov	r0, r4
   d573a:	f7ff feb5 	bl	d54a8 <_ZN9SdSpiCard10isTimedOutEtt>
   d573e:	2800      	cmp	r0, #0
   d5740:	d0f0      	beq.n	d5724 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d5742:	2343      	movs	r3, #67	; 0x43
   d5744:	e017      	b.n	d5776 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d5746:	7aa3      	ldrb	r3, [r4, #10]
   d5748:	2b02      	cmp	r3, #2
   d574a:	d00e      	beq.n	d576a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d574c:	4620      	mov	r0, r4
   d574e:	f7ff fede 	bl	d550e <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d5752:	6863      	ldr	r3, [r4, #4]
   d5754:	68b0      	ldr	r0, [r6, #8]
   d5756:	7934      	ldrb	r4, [r6, #4]
   d5758:	7b31      	ldrb	r1, [r6, #12]
   d575a:	7b72      	ldrb	r2, [r6, #13]
   d575c:	745a      	strb	r2, [r3, #17]
   d575e:	60d8      	str	r0, [r3, #12]
   d5760:	721c      	strb	r4, [r3, #8]
   d5762:	7419      	strb	r1, [r3, #16]
  return true;
   d5764:	2001      	movs	r0, #1
   d5766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d576a:	213a      	movs	r1, #58	; 0x3a
   d576c:	4620      	mov	r0, r4
   d576e:	f7ff ff27 	bl	d55c0 <_ZN9SdSpiCard11cardCommandEhm>
   d5772:	b138      	cbz	r0, d5784 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d5774:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d5776:	4620      	mov	r0, r4
   d5778:	7023      	strb	r3, [r4, #0]
   d577a:	f7ff fec8 	bl	d550e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d577e:	2000      	movs	r0, #0
}
   d5780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5784:	6860      	ldr	r0, [r4, #4]
   d5786:	f000 f94e 	bl	d5a26 <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d578a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d578e:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d5790:	bf04      	itt	eq
   d5792:	2303      	moveq	r3, #3
   d5794:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d5796:	6860      	ldr	r0, [r4, #4]
   d5798:	f000 f945 	bl	d5a26 <_ZN14SdSpiAltDriver7receiveEv>
   d579c:	6860      	ldr	r0, [r4, #4]
   d579e:	f000 f942 	bl	d5a26 <_ZN14SdSpiAltDriver7receiveEv>
   d57a2:	6860      	ldr	r0, [r4, #4]
   d57a4:	f000 f93f 	bl	d5a26 <_ZN14SdSpiAltDriver7receiveEv>
   d57a8:	e7d0      	b.n	d574c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d57aa:	bf00      	nop
   d57ac:	0003d090 	.word	0x0003d090

000d57b0 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d57b0:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d57b2:	7a83      	ldrb	r3, [r0, #10]
   d57b4:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d57b6:	bf18      	it	ne
   d57b8:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d57ba:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d57bc:	460a      	mov	r2, r1
   d57be:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d57c0:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d57c2:	f7ff fefd 	bl	d55c0 <_ZN9SdSpiCard11cardCommandEhm>
   d57c6:	b110      	cbz	r0, d57ce <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d57c8:	2330      	movs	r3, #48	; 0x30
   d57ca:	7023      	strb	r3, [r4, #0]
   d57cc:	e00b      	b.n	d57e6 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d57ce:	4629      	mov	r1, r5
   d57d0:	f44f 7200 	mov.w	r2, #512	; 0x200
   d57d4:	4620      	mov	r0, r4
   d57d6:	f7ff fead 	bl	d5534 <_ZN9SdSpiCard8readDataEPhj>
   d57da:	4605      	mov	r5, r0
   d57dc:	b118      	cbz	r0, d57e6 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d57de:	4620      	mov	r0, r4
   d57e0:	f7ff fe95 	bl	d550e <_ZN9SdSpiCard7spiStopEv>
  return true;
   d57e4:	e003      	b.n	d57ee <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d57e6:	4620      	mov	r0, r4
   d57e8:	f7ff fe91 	bl	d550e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d57ec:	2500      	movs	r5, #0
}
   d57ee:	4628      	mov	r0, r5
   d57f0:	bd38      	pop	{r3, r4, r5, pc}

000d57f2 <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d57f2:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d57f4:	7a83      	ldrb	r3, [r0, #10]
   d57f6:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d57f8:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d57fa:	bf18      	it	ne
   d57fc:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d57fe:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d5800:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d5802:	f7ff fedd 	bl	d55c0 <_ZN9SdSpiCard11cardCommandEhm>
   d5806:	b130      	cbz	r0, d5816 <_ZN9SdSpiCard9readStartEm+0x24>
   d5808:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d580a:	4620      	mov	r0, r4
   d580c:	7023      	strb	r3, [r4, #0]
   d580e:	f7ff fe7e 	bl	d550e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5812:	2000      	movs	r0, #0
   d5814:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d5816:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d5818:	bd10      	pop	{r4, pc}

000d581a <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d581a:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d581c:	2200      	movs	r2, #0
   d581e:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d5820:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d5822:	f7ff fecd 	bl	d55c0 <_ZN9SdSpiCard11cardCommandEhm>
   d5826:	b130      	cbz	r0, d5836 <_ZN9SdSpiCard8readStopEv+0x1c>
   d5828:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d582a:	4620      	mov	r0, r4
   d582c:	7023      	strb	r3, [r4, #0]
   d582e:	f7ff fe6e 	bl	d550e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5832:	2000      	movs	r0, #0
   d5834:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d5836:	4620      	mov	r0, r4
   d5838:	f7ff fe69 	bl	d550e <_ZN9SdSpiCard7spiStopEv>
  return true;
   d583c:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d583e:	bd10      	pop	{r4, pc}

000d5840 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d5840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5842:	4605      	mov	r5, r0
   d5844:	4616      	mov	r6, r2
   d5846:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d5848:	f7ff ffd3 	bl	d57f2 <_ZN9SdSpiCard9readStartEm>
   d584c:	b198      	cbz	r0, d5876 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d584e:	2400      	movs	r4, #0
   d5850:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d5852:	429f      	cmp	r7, r3
   d5854:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d5858:	d908      	bls.n	d586c <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d585a:	f44f 7200 	mov.w	r2, #512	; 0x200
   d585e:	4628      	mov	r0, r5
   d5860:	f7ff fe68 	bl	d5534 <_ZN9SdSpiCard8readDataEPhj>
   d5864:	3401      	adds	r4, #1
   d5866:	2800      	cmp	r0, #0
   d5868:	d1f2      	bne.n	d5850 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d586a:	e004      	b.n	d5876 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d586c:	4628      	mov	r0, r5
}
   d586e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d5872:	f7ff bfd2 	b.w	d581a <_ZN9SdSpiCard8readStopEv>
}
   d5876:	2000      	movs	r0, #0
   d5878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d587a <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d587a:	b538      	push	{r3, r4, r5, lr}
   d587c:	4604      	mov	r4, r0
   d587e:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5880:	6840      	ldr	r0, [r0, #4]
   d5882:	f000 f8eb 	bl	d5a5c <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d5886:	f44f 7200 	mov.w	r2, #512	; 0x200
   d588a:	4629      	mov	r1, r5
   d588c:	6860      	ldr	r0, [r4, #4]
   d588e:	f000 f8e9 	bl	d5a64 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5892:	21ff      	movs	r1, #255	; 0xff
   d5894:	6860      	ldr	r0, [r4, #4]
   d5896:	f000 f8e1 	bl	d5a5c <_ZN14SdSpiAltDriver4sendEh>
   d589a:	21ff      	movs	r1, #255	; 0xff
   d589c:	6860      	ldr	r0, [r4, #4]
   d589e:	f000 f8dd 	bl	d5a5c <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d58a2:	6860      	ldr	r0, [r4, #4]
   d58a4:	f000 f8bf 	bl	d5a26 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d58a8:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d58aa:	f000 001f 	and.w	r0, r0, #31
   d58ae:	2805      	cmp	r0, #5
   d58b0:	d006      	beq.n	d58c0 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d58b2:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d58b4:	4620      	mov	r0, r4
   d58b6:	7023      	strb	r3, [r4, #0]
   d58b8:	f7ff fe29 	bl	d550e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d58bc:	2000      	movs	r0, #0
   d58be:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d58c0:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d58c2:	bd38      	pop	{r3, r4, r5, pc}

000d58c4 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d58c4:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d58c6:	7a83      	ldrb	r3, [r0, #10]
   d58c8:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d58ca:	bf18      	it	ne
   d58cc:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d58ce:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d58d0:	460a      	mov	r2, r1
   d58d2:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d58d4:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d58d6:	f7ff fe73 	bl	d55c0 <_ZN9SdSpiCard11cardCommandEhm>
   d58da:	4606      	mov	r6, r0
   d58dc:	b108      	cbz	r0, d58e2 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d58de:	2332      	movs	r3, #50	; 0x32
   d58e0:	e01d      	b.n	d591e <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d58e2:	462a      	mov	r2, r5
   d58e4:	21fe      	movs	r1, #254	; 0xfe
   d58e6:	4620      	mov	r0, r4
   d58e8:	f7ff ffc7 	bl	d587a <_ZN9SdSpiCard9writeDataEhPKh>
   d58ec:	b1c0      	cbz	r0, d5920 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d58ee:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d58f2:	4620      	mov	r0, r4
   d58f4:	f7ff fe4f 	bl	d5596 <_ZN9SdSpiCard11waitNotBusyEt>
   d58f8:	4605      	mov	r5, r0
   d58fa:	b908      	cbnz	r0, d5900 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d58fc:	235a      	movs	r3, #90	; 0x5a
   d58fe:	e00e      	b.n	d591e <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d5900:	4632      	mov	r2, r6
   d5902:	210d      	movs	r1, #13
   d5904:	4620      	mov	r0, r4
   d5906:	f7ff fe5b 	bl	d55c0 <_ZN9SdSpiCard11cardCommandEhm>
   d590a:	b938      	cbnz	r0, d591c <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d590c:	6860      	ldr	r0, [r4, #4]
   d590e:	f000 f88a 	bl	d5a26 <_ZN14SdSpiAltDriver7receiveEv>
   d5912:	b918      	cbnz	r0, d591c <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d5914:	4620      	mov	r0, r4
   d5916:	f7ff fdfa 	bl	d550e <_ZN9SdSpiCard7spiStopEv>
  return true;
   d591a:	e005      	b.n	d5928 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d591c:	2329      	movs	r3, #41	; 0x29
   d591e:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d5920:	4620      	mov	r0, r4
   d5922:	f7ff fdf4 	bl	d550e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5926:	2500      	movs	r5, #0
}
   d5928:	4628      	mov	r0, r5
   d592a:	bd70      	pop	{r4, r5, r6, pc}

000d592c <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d592c:	b538      	push	{r3, r4, r5, lr}
   d592e:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5930:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d5934:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5936:	f7ff fe2e 	bl	d5596 <_ZN9SdSpiCard11waitNotBusyEt>
   d593a:	b910      	cbnz	r0, d5942 <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d593c:	235b      	movs	r3, #91	; 0x5b
   d593e:	7023      	strb	r3, [r4, #0]
   d5940:	e005      	b.n	d594e <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d5942:	462a      	mov	r2, r5
   d5944:	21fc      	movs	r1, #252	; 0xfc
   d5946:	4620      	mov	r0, r4
   d5948:	f7ff ff97 	bl	d587a <_ZN9SdSpiCard9writeDataEhPKh>
   d594c:	b918      	cbnz	r0, d5956 <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d594e:	4620      	mov	r0, r4
   d5950:	f7ff fddd 	bl	d550e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5954:	2000      	movs	r0, #0
}
   d5956:	bd38      	pop	{r3, r4, r5, pc}

000d5958 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d5958:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d595a:	7a83      	ldrb	r3, [r0, #10]
   d595c:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d595e:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d5960:	bf18      	it	ne
   d5962:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d5964:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d5966:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d5968:	f7ff fe2a 	bl	d55c0 <_ZN9SdSpiCard11cardCommandEhm>
   d596c:	b130      	cbz	r0, d597c <_ZN9SdSpiCard10writeStartEm+0x24>
   d596e:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d5970:	4620      	mov	r0, r4
   d5972:	7023      	strb	r3, [r4, #0]
   d5974:	f7ff fdcb 	bl	d550e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d5978:	2000      	movs	r0, #0
   d597a:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d597c:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d597e:	bd10      	pop	{r4, pc}

000d5980 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d5980:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5982:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d5986:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d5988:	f7ff fe05 	bl	d5596 <_ZN9SdSpiCard11waitNotBusyEt>
   d598c:	4605      	mov	r5, r0
   d598e:	b120      	cbz	r0, d599a <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d5990:	21fd      	movs	r1, #253	; 0xfd
   d5992:	6860      	ldr	r0, [r4, #4]
   d5994:	f000 f862 	bl	d5a5c <_ZN14SdSpiAltDriver4sendEh>
   d5998:	e001      	b.n	d599e <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d599a:	2356      	movs	r3, #86	; 0x56
   d599c:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d599e:	4620      	mov	r0, r4
   d59a0:	f7ff fdb5 	bl	d550e <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d59a4:	4628      	mov	r0, r5
   d59a6:	bd38      	pop	{r3, r4, r5, pc}

000d59a8 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d59a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d59aa:	4605      	mov	r5, r0
   d59ac:	4616      	mov	r6, r2
   d59ae:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d59b0:	f7ff ffd2 	bl	d5958 <_ZN9SdSpiCard10writeStartEm>
   d59b4:	b170      	cbz	r0, d59d4 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d59b6:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d59b8:	42bc      	cmp	r4, r7
   d59ba:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d59be:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d59c0:	d004      	beq.n	d59cc <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d59c2:	f7ff ffb3 	bl	d592c <_ZN9SdSpiCard9writeDataEPKh>
   d59c6:	b128      	cbz	r0, d59d4 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d59c8:	3401      	adds	r4, #1
   d59ca:	e7f5      	b.n	d59b8 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d59cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d59d0:	f7ff bfd6 	b.w	d5980 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d59d4:	4628      	mov	r0, r5
   d59d6:	f7ff fd9a 	bl	d550e <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d59da:	2000      	movs	r0, #0
   d59dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d59de <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d59de:	f000 b8cb 	b.w	d5b78 <HAL_Pin_Map>

000d59e2 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d59e2:	f000 b8c9 	b.w	d5b78 <HAL_Pin_Map>

000d59e6 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d59e6:	f000 b8c7 	b.w	d5b78 <HAL_Pin_Map>
	...

000d59ec <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d59ec:	4b01      	ldr	r3, [pc, #4]	; (d59f4 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d59ee:	2201      	movs	r2, #1
   d59f0:	701a      	strb	r2, [r3, #0]
   d59f2:	4770      	bx	lr
   d59f4:	2003e3d8 	.word	0x2003e3d8

000d59f8 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d59f8:	1d01      	adds	r1, r0, #4
   d59fa:	6800      	ldr	r0, [r0, #0]
   d59fc:	f000 bb50 	b.w	d60a0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d5a00 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d5a00:	b510      	push	{r4, lr}
   d5a02:	4604      	mov	r4, r0
  m_csPin = csPin;
   d5a04:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d5a06:	6800      	ldr	r0, [r0, #0]
   d5a08:	f000 fb20 	bl	d604c <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d5a0c:	7d20      	ldrb	r0, [r4, #20]
   d5a0e:	2101      	movs	r1, #1
   d5a10:	f001 f8f4 	bl	d6bfc <pinMode>
  digitalWrite(m_csPin, HIGH);
   d5a14:	7d20      	ldrb	r0, [r4, #20]
   d5a16:	2101      	movs	r1, #1
}
   d5a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d5a1c:	f001 b8ff 	b.w	d6c1e <digitalWrite>

000d5a20 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d5a20:	6800      	ldr	r0, [r0, #0]
   d5a22:	f000 bb24 	b.w	d606e <_ZN8SPIClass14endTransactionEv>

000d5a26 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d5a26:	21ff      	movs	r1, #255	; 0xff
   d5a28:	6800      	ldr	r0, [r0, #0]
   d5a2a:	f000 bba9 	b.w	d6180 <_ZN8SPIClass8transferEh>
	...

000d5a30 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d5a30:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d5a32:	4b08      	ldr	r3, [pc, #32]	; (d5a54 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d5a34:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5a36:	2500      	movs	r5, #0
   d5a38:	4c07      	ldr	r4, [pc, #28]	; (d5a58 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d5a3a:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5a3c:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d5a3e:	4613      	mov	r3, r2
   d5a40:	460a      	mov	r2, r1
   d5a42:	4629      	mov	r1, r5
   d5a44:	f000 fba2 	bl	d618c <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d5a48:	7823      	ldrb	r3, [r4, #0]
   d5a4a:	2b00      	cmp	r3, #0
   d5a4c:	d0fc      	beq.n	d5a48 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d5a4e:	2000      	movs	r0, #0
   d5a50:	b003      	add	sp, #12
   d5a52:	bd30      	pop	{r4, r5, pc}
   d5a54:	000d59ed 	.word	0x000d59ed
   d5a58:	2003e3d8 	.word	0x2003e3d8

000d5a5c <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d5a5c:	6800      	ldr	r0, [r0, #0]
   d5a5e:	f000 bb8f 	b.w	d6180 <_ZN8SPIClass8transferEh>
	...

000d5a64 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d5a64:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d5a66:	4b07      	ldr	r3, [pc, #28]	; (d5a84 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d5a68:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5a6a:	2500      	movs	r5, #0
   d5a6c:	4c06      	ldr	r4, [pc, #24]	; (d5a88 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d5a6e:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d5a70:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d5a72:	4613      	mov	r3, r2
   d5a74:	462a      	mov	r2, r5
   d5a76:	f000 fb89 	bl	d618c <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d5a7a:	7823      	ldrb	r3, [r4, #0]
   d5a7c:	2b00      	cmp	r3, #0
   d5a7e:	d0fc      	beq.n	d5a7a <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d5a80:	b003      	add	sp, #12
   d5a82:	bd30      	pop	{r4, r5, pc}
   d5a84:	000d59ed 	.word	0x000d59ed
   d5a88:	2003e3d8 	.word	0x2003e3d8

000d5a8c <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d5a8c:	f000 b874 	b.w	d5b78 <HAL_Pin_Map>

000d5a90 <_ZN16AirQualitySensorC1Ei>:
const int AirQualitySensor::HIGH_POLLUTION = 1;
const int AirQualitySensor::LOW_POLLUTION  = 2;
const int AirQualitySensor::FRESH_AIR      = 3;

AirQualitySensor::AirQualitySensor(int pin) 
: _pin(pin), _voltageSum(0), _volSumCount(0) {
   d5a90:	2200      	movs	r2, #0
   d5a92:	6001      	str	r1, [r0, #0]
   d5a94:	6102      	str	r2, [r0, #16]
   d5a96:	6142      	str	r2, [r0, #20]
    // do nothing
}
   d5a98:	4770      	bx	lr

000d5a9a <_ZN16AirQualitySensor4initEv>:

bool AirQualitySensor::init(void) {
   d5a9a:	b510      	push	{r4, lr}
   d5a9c:	4604      	mov	r4, r0
    int initVoltage = analogRead(_pin);
   d5a9e:	8800      	ldrh	r0, [r0, #0]
   d5aa0:	f001 f8e9 	bl	d6c76 <analogRead>

    if (10 < initVoltage && initVoltage < 798) {
   d5aa4:	f240 3312 	movw	r3, #786	; 0x312
   d5aa8:	f1a0 020b 	sub.w	r2, r0, #11
   d5aac:	429a      	cmp	r2, r3
   d5aae:	d807      	bhi.n	d5ac0 <_ZN16AirQualitySensor4initEv+0x26>
        _currentVoltage = initVoltage;
   d5ab0:	60a0      	str	r0, [r4, #8]
        _lastVoltage = _currentVoltage;
   d5ab2:	6060      	str	r0, [r4, #4]

        _standardVoltage = initVoltage;
   d5ab4:	60e0      	str	r0, [r4, #12]
   d5ab6:	f000 f8f7 	bl	d5ca8 <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();
   d5aba:	61a0      	str	r0, [r4, #24]

        return true;
   d5abc:	2001      	movs	r0, #1
   d5abe:	bd10      	pop	{r4, pc}
    }
    else {
        return false;
   d5ac0:	2000      	movs	r0, #0
    }
}
   d5ac2:	bd10      	pop	{r4, pc}

000d5ac4 <_ZN16AirQualitySensor8getValueEv>:
    return -1;
}

int AirQualitySensor::getValue(void) {
    return _currentVoltage;
}
   d5ac4:	6880      	ldr	r0, [r0, #8]
   d5ac6:	4770      	bx	lr

000d5ac8 <_ZN16AirQualitySensor21updateStandardVoltageEv>:

void AirQualitySensor::updateStandardVoltage(void) {
   d5ac8:	b510      	push	{r4, lr}
   d5aca:	4604      	mov	r4, r0
   d5acc:	f000 f8ec 	bl	d5ca8 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - _lastStdVolUpdated > 500000) {
   d5ad0:	69a3      	ldr	r3, [r4, #24]
   d5ad2:	1ac0      	subs	r0, r0, r3
   d5ad4:	4b07      	ldr	r3, [pc, #28]	; (d5af4 <_ZN16AirQualitySensor21updateStandardVoltageEv+0x2c>)
   d5ad6:	4298      	cmp	r0, r3
   d5ad8:	d90a      	bls.n	d5af0 <_ZN16AirQualitySensor21updateStandardVoltageEv+0x28>
        _standardVoltage = _voltageSum / _volSumCount;
   d5ada:	6923      	ldr	r3, [r4, #16]
   d5adc:	6962      	ldr	r2, [r4, #20]
   d5ade:	fb93 f3f2 	sdiv	r3, r3, r2
   d5ae2:	60e3      	str	r3, [r4, #12]
   d5ae4:	f000 f8e0 	bl	d5ca8 <HAL_Timer_Get_Milli_Seconds>
        _lastStdVolUpdated = millis();

        _voltageSum = 0;
   d5ae8:	2300      	movs	r3, #0
}

void AirQualitySensor::updateStandardVoltage(void) {
    if (millis() - _lastStdVolUpdated > 500000) {
        _standardVoltage = _voltageSum / _volSumCount;
        _lastStdVolUpdated = millis();
   d5aea:	61a0      	str	r0, [r4, #24]

        _voltageSum = 0;
   d5aec:	6123      	str	r3, [r4, #16]
        _volSumCount = 0;
   d5aee:	6163      	str	r3, [r4, #20]
   d5af0:	bd10      	pop	{r4, pc}
   d5af2:	bf00      	nop
   d5af4:	0007a120 	.word	0x0007a120

000d5af8 <_ZN16AirQualitySensor5slopeEv>:
    else {
        return false;
    }
}

int AirQualitySensor::slope(void) {
   d5af8:	b510      	push	{r4, lr}
    _lastVoltage = _currentVoltage;
   d5afa:	6883      	ldr	r3, [r0, #8]
   d5afc:	6043      	str	r3, [r0, #4]
    else {
        return false;
    }
}

int AirQualitySensor::slope(void) {
   d5afe:	4604      	mov	r4, r0
    _lastVoltage = _currentVoltage;
    _currentVoltage = analogRead(_pin);
   d5b00:	8800      	ldrh	r0, [r0, #0]
   d5b02:	f001 f8b8 	bl	d6c76 <analogRead>

    _voltageSum += _currentVoltage;
   d5b06:	6923      	ldr	r3, [r4, #16]
    }
}

int AirQualitySensor::slope(void) {
    _lastVoltage = _currentVoltage;
    _currentVoltage = analogRead(_pin);
   d5b08:	60a0      	str	r0, [r4, #8]

    _voltageSum += _currentVoltage;
   d5b0a:	4418      	add	r0, r3
    _volSumCount += 1;
   d5b0c:	6963      	ldr	r3, [r4, #20]

int AirQualitySensor::slope(void) {
    _lastVoltage = _currentVoltage;
    _currentVoltage = analogRead(_pin);

    _voltageSum += _currentVoltage;
   d5b0e:	6120      	str	r0, [r4, #16]
    _volSumCount += 1;
   d5b10:	3301      	adds	r3, #1
   d5b12:	6163      	str	r3, [r4, #20]

    updateStandardVoltage();
   d5b14:	4620      	mov	r0, r4
   d5b16:	f7ff ffd7 	bl	d5ac8 <_ZN16AirQualitySensor21updateStandardVoltageEv>
    if (_currentVoltage - _lastVoltage > 400 || _currentVoltage > 700) {
   d5b1a:	68a2      	ldr	r2, [r4, #8]
   d5b1c:	6861      	ldr	r1, [r4, #4]
   d5b1e:	1a51      	subs	r1, r2, r1
   d5b20:	f5b1 7fc8 	cmp.w	r1, #400	; 0x190
   d5b24:	dc10      	bgt.n	d5b48 <_ZN16AirQualitySensor5slopeEv+0x50>
   d5b26:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
   d5b2a:	dc0d      	bgt.n	d5b48 <_ZN16AirQualitySensor5slopeEv+0x50>
        return AirQualitySensor::FORCE_SIGNAL;
    }
    else if ((_currentVoltage - _lastVoltage > 400 && _currentVoltage < 700)
             || _currentVoltage - _standardVoltage > 150) {
   d5b2c:	68e3      	ldr	r3, [r4, #12]
   d5b2e:	1ad3      	subs	r3, r2, r3
   d5b30:	2b96      	cmp	r3, #150	; 0x96
   d5b32:	dc0b      	bgt.n	d5b4c <_ZN16AirQualitySensor5slopeEv+0x54>
        return AirQualitySensor::HIGH_POLLUTION;
    }
    else if ((_currentVoltage - _lastVoltage > 200 && _currentVoltage < 700)
   d5b34:	29c8      	cmp	r1, #200	; 0xc8
   d5b36:	dd02      	ble.n	d5b3e <_ZN16AirQualitySensor5slopeEv+0x46>
   d5b38:	f5b2 7f2f 	cmp.w	r2, #700	; 0x2bc
   d5b3c:	d108      	bne.n	d5b50 <_ZN16AirQualitySensor5slopeEv+0x58>
             || _currentVoltage - _standardVoltage > 50) {
        return AirQualitySensor::LOW_POLLUTION;
    }
    else {
        return AirQualitySensor::FRESH_AIR;
   d5b3e:	2b32      	cmp	r3, #50	; 0x32
   d5b40:	bfcc      	ite	gt
   d5b42:	2002      	movgt	r0, #2
   d5b44:	2003      	movle	r0, #3
   d5b46:	bd10      	pop	{r4, pc}
    _voltageSum += _currentVoltage;
    _volSumCount += 1;

    updateStandardVoltage();
    if (_currentVoltage - _lastVoltage > 400 || _currentVoltage > 700) {
        return AirQualitySensor::FORCE_SIGNAL;
   d5b48:	2000      	movs	r0, #0
   d5b4a:	bd10      	pop	{r4, pc}
    }
    else if ((_currentVoltage - _lastVoltage > 400 && _currentVoltage < 700)
             || _currentVoltage - _standardVoltage > 150) {
        return AirQualitySensor::HIGH_POLLUTION;
   d5b4c:	2001      	movs	r0, #1
   d5b4e:	bd10      	pop	{r4, pc}
    }
    else if ((_currentVoltage - _lastVoltage > 200 && _currentVoltage < 700)
             || _currentVoltage - _standardVoltage > 50) {
        return AirQualitySensor::LOW_POLLUTION;
   d5b50:	2002      	movs	r0, #2
    else {
        return AirQualitySensor::FRESH_AIR;
    }

    return -1;
}
   d5b52:	bd10      	pop	{r4, pc}

000d5b54 <_GLOBAL__sub_I__ZN16AirQualitySensor12FORCE_SIGNALE>:
   d5b54:	f000 b810 	b.w	d5b78 <HAL_Pin_Map>

000d5b58 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5b58:	b508      	push	{r3, lr}
   d5b5a:	4b02      	ldr	r3, [pc, #8]	; (d5b64 <netdb_freeaddrinfo+0xc>)
   d5b5c:	681b      	ldr	r3, [r3, #0]
   d5b5e:	689b      	ldr	r3, [r3, #8]
   d5b60:	9301      	str	r3, [sp, #4]
   d5b62:	bd08      	pop	{r3, pc}
   d5b64:	00030268 	.word	0x00030268

000d5b68 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5b68:	b508      	push	{r3, lr}
   d5b6a:	4b02      	ldr	r3, [pc, #8]	; (d5b74 <netdb_getaddrinfo+0xc>)
   d5b6c:	681b      	ldr	r3, [r3, #0]
   d5b6e:	68db      	ldr	r3, [r3, #12]
   d5b70:	9301      	str	r3, [sp, #4]
   d5b72:	bd08      	pop	{r3, pc}
   d5b74:	00030268 	.word	0x00030268

000d5b78 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5b78:	b508      	push	{r3, lr}
   d5b7a:	4b02      	ldr	r3, [pc, #8]	; (d5b84 <HAL_Pin_Map+0xc>)
   d5b7c:	681b      	ldr	r3, [r3, #0]
   d5b7e:	681b      	ldr	r3, [r3, #0]
   d5b80:	9301      	str	r3, [sp, #4]
   d5b82:	bd08      	pop	{r3, pc}
   d5b84:	0003022c 	.word	0x0003022c

000d5b88 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d5b88:	b508      	push	{r3, lr}
   d5b8a:	4b02      	ldr	r3, [pc, #8]	; (d5b94 <HAL_Validate_Pin_Function+0xc>)
   d5b8c:	681b      	ldr	r3, [r3, #0]
   d5b8e:	685b      	ldr	r3, [r3, #4]
   d5b90:	9301      	str	r3, [sp, #4]
   d5b92:	bd08      	pop	{r3, pc}
   d5b94:	0003022c 	.word	0x0003022c

000d5b98 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5b98:	b508      	push	{r3, lr}
   d5b9a:	4b02      	ldr	r3, [pc, #8]	; (d5ba4 <HAL_Pin_Mode+0xc>)
   d5b9c:	681b      	ldr	r3, [r3, #0]
   d5b9e:	689b      	ldr	r3, [r3, #8]
   d5ba0:	9301      	str	r3, [sp, #4]
   d5ba2:	bd08      	pop	{r3, pc}
   d5ba4:	0003022c 	.word	0x0003022c

000d5ba8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5ba8:	b508      	push	{r3, lr}
   d5baa:	4b02      	ldr	r3, [pc, #8]	; (d5bb4 <HAL_Get_Pin_Mode+0xc>)
   d5bac:	681b      	ldr	r3, [r3, #0]
   d5bae:	68db      	ldr	r3, [r3, #12]
   d5bb0:	9301      	str	r3, [sp, #4]
   d5bb2:	bd08      	pop	{r3, pc}
   d5bb4:	0003022c 	.word	0x0003022c

000d5bb8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5bb8:	b508      	push	{r3, lr}
   d5bba:	4b02      	ldr	r3, [pc, #8]	; (d5bc4 <HAL_GPIO_Write+0xc>)
   d5bbc:	681b      	ldr	r3, [r3, #0]
   d5bbe:	691b      	ldr	r3, [r3, #16]
   d5bc0:	9301      	str	r3, [sp, #4]
   d5bc2:	bd08      	pop	{r3, pc}
   d5bc4:	0003022c 	.word	0x0003022c

000d5bc8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5bc8:	b508      	push	{r3, lr}
   d5bca:	4b02      	ldr	r3, [pc, #8]	; (d5bd4 <HAL_GPIO_Read+0xc>)
   d5bcc:	681b      	ldr	r3, [r3, #0]
   d5bce:	695b      	ldr	r3, [r3, #20]
   d5bd0:	9301      	str	r3, [sp, #4]
   d5bd2:	bd08      	pop	{r3, pc}
   d5bd4:	0003022c 	.word	0x0003022c

000d5bd8 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d5bd8:	b508      	push	{r3, lr}
   d5bda:	4b02      	ldr	r3, [pc, #8]	; (d5be4 <HAL_ADC_Read+0xc>)
   d5bdc:	681b      	ldr	r3, [r3, #0]
   d5bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5be0:	9301      	str	r3, [sp, #4]
   d5be2:	bd08      	pop	{r3, pc}
   d5be4:	0003022c 	.word	0x0003022c

000d5be8 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d5be8:	b508      	push	{r3, lr}
   d5bea:	4b02      	ldr	r3, [pc, #8]	; (d5bf4 <HAL_SPI_Begin+0xc>)
   d5bec:	681b      	ldr	r3, [r3, #0]
   d5bee:	681b      	ldr	r3, [r3, #0]
   d5bf0:	9301      	str	r3, [sp, #4]
   d5bf2:	bd08      	pop	{r3, pc}
   d5bf4:	00030230 	.word	0x00030230

000d5bf8 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d5bf8:	b508      	push	{r3, lr}
   d5bfa:	4b02      	ldr	r3, [pc, #8]	; (d5c04 <HAL_SPI_Send_Receive_Data+0xc>)
   d5bfc:	681b      	ldr	r3, [r3, #0]
   d5bfe:	695b      	ldr	r3, [r3, #20]
   d5c00:	9301      	str	r3, [sp, #4]
   d5c02:	bd08      	pop	{r3, pc}
   d5c04:	00030230 	.word	0x00030230

000d5c08 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5c08:	b508      	push	{r3, lr}
   d5c0a:	4b02      	ldr	r3, [pc, #8]	; (d5c14 <HAL_SPI_Init+0xc>)
   d5c0c:	681b      	ldr	r3, [r3, #0]
   d5c0e:	69db      	ldr	r3, [r3, #28]
   d5c10:	9301      	str	r3, [sp, #4]
   d5c12:	bd08      	pop	{r3, pc}
   d5c14:	00030230 	.word	0x00030230

000d5c18 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5c18:	b508      	push	{r3, lr}
   d5c1a:	4b02      	ldr	r3, [pc, #8]	; (d5c24 <HAL_SPI_Is_Enabled+0xc>)
   d5c1c:	681b      	ldr	r3, [r3, #0]
   d5c1e:	6a1b      	ldr	r3, [r3, #32]
   d5c20:	9301      	str	r3, [sp, #4]
   d5c22:	bd08      	pop	{r3, pc}
   d5c24:	00030230 	.word	0x00030230

000d5c28 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d5c28:	b508      	push	{r3, lr}
   d5c2a:	4b02      	ldr	r3, [pc, #8]	; (d5c34 <HAL_SPI_Info+0xc>)
   d5c2c:	681b      	ldr	r3, [r3, #0]
   d5c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5c30:	9301      	str	r3, [sp, #4]
   d5c32:	bd08      	pop	{r3, pc}
   d5c34:	00030230 	.word	0x00030230

000d5c38 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d5c38:	b508      	push	{r3, lr}
   d5c3a:	4b02      	ldr	r3, [pc, #8]	; (d5c44 <HAL_SPI_DMA_Transfer+0xc>)
   d5c3c:	681b      	ldr	r3, [r3, #0]
   d5c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5c40:	9301      	str	r3, [sp, #4]
   d5c42:	bd08      	pop	{r3, pc}
   d5c44:	00030230 	.word	0x00030230

000d5c48 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d5c48:	b508      	push	{r3, lr}
   d5c4a:	4b02      	ldr	r3, [pc, #8]	; (d5c54 <HAL_SPI_DMA_Transfer_Status+0xc>)
   d5c4c:	681b      	ldr	r3, [r3, #0]
   d5c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5c50:	9301      	str	r3, [sp, #4]
   d5c52:	bd08      	pop	{r3, pc}
   d5c54:	00030230 	.word	0x00030230

000d5c58 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d5c58:	b508      	push	{r3, lr}
   d5c5a:	4b02      	ldr	r3, [pc, #8]	; (d5c64 <HAL_SPI_Set_Settings+0xc>)
   d5c5c:	681b      	ldr	r3, [r3, #0]
   d5c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5c60:	9301      	str	r3, [sp, #4]
   d5c62:	bd08      	pop	{r3, pc}
   d5c64:	00030230 	.word	0x00030230

000d5c68 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d5c68:	b508      	push	{r3, lr}
   d5c6a:	4b02      	ldr	r3, [pc, #8]	; (d5c74 <HAL_SPI_Acquire+0xc>)
   d5c6c:	681b      	ldr	r3, [r3, #0]
   d5c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5c70:	9301      	str	r3, [sp, #4]
   d5c72:	bd08      	pop	{r3, pc}
   d5c74:	00030230 	.word	0x00030230

000d5c78 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d5c78:	b508      	push	{r3, lr}
   d5c7a:	4b02      	ldr	r3, [pc, #8]	; (d5c84 <HAL_SPI_Release+0xc>)
   d5c7c:	681b      	ldr	r3, [r3, #0]
   d5c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5c80:	9301      	str	r3, [sp, #4]
   d5c82:	bd08      	pop	{r3, pc}
   d5c84:	00030230 	.word	0x00030230

000d5c88 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5c88:	b508      	push	{r3, lr}
   d5c8a:	4b02      	ldr	r3, [pc, #8]	; (d5c94 <HAL_RNG_GetRandomNumber+0xc>)
   d5c8c:	681b      	ldr	r3, [r3, #0]
   d5c8e:	685b      	ldr	r3, [r3, #4]
   d5c90:	9301      	str	r3, [sp, #4]
   d5c92:	bd08      	pop	{r3, pc}
   d5c94:	00030218 	.word	0x00030218

000d5c98 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d5c98:	b508      	push	{r3, lr}
   d5c9a:	4b02      	ldr	r3, [pc, #8]	; (d5ca4 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d5c9c:	681b      	ldr	r3, [r3, #0]
   d5c9e:	691b      	ldr	r3, [r3, #16]
   d5ca0:	9301      	str	r3, [sp, #4]
   d5ca2:	bd08      	pop	{r3, pc}
   d5ca4:	00030218 	.word	0x00030218

000d5ca8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5ca8:	b508      	push	{r3, lr}
   d5caa:	4b02      	ldr	r3, [pc, #8]	; (d5cb4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5cac:	681b      	ldr	r3, [r3, #0]
   d5cae:	695b      	ldr	r3, [r3, #20]
   d5cb0:	9301      	str	r3, [sp, #4]
   d5cb2:	bd08      	pop	{r3, pc}
   d5cb4:	00030218 	.word	0x00030218

000d5cb8 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5cb8:	b508      	push	{r3, lr}
   d5cba:	4b02      	ldr	r3, [pc, #8]	; (d5cc4 <os_thread_is_current+0xc>)
   d5cbc:	681b      	ldr	r3, [r3, #0]
   d5cbe:	689b      	ldr	r3, [r3, #8]
   d5cc0:	9301      	str	r3, [sp, #4]
   d5cc2:	bd08      	pop	{r3, pc}
   d5cc4:	00030248 	.word	0x00030248

000d5cc8 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5cc8:	b508      	push	{r3, lr}
   d5cca:	4b02      	ldr	r3, [pc, #8]	; (d5cd4 <os_thread_join+0xc>)
   d5ccc:	681b      	ldr	r3, [r3, #0]
   d5cce:	691b      	ldr	r3, [r3, #16]
   d5cd0:	9301      	str	r3, [sp, #4]
   d5cd2:	bd08      	pop	{r3, pc}
   d5cd4:	00030248 	.word	0x00030248

000d5cd8 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5cd8:	b508      	push	{r3, lr}
   d5cda:	4b02      	ldr	r3, [pc, #8]	; (d5ce4 <os_thread_cleanup+0xc>)
   d5cdc:	681b      	ldr	r3, [r3, #0]
   d5cde:	695b      	ldr	r3, [r3, #20]
   d5ce0:	9301      	str	r3, [sp, #4]
   d5ce2:	bd08      	pop	{r3, pc}
   d5ce4:	00030248 	.word	0x00030248

000d5ce8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5ce8:	b508      	push	{r3, lr}
   d5cea:	4b02      	ldr	r3, [pc, #8]	; (d5cf4 <os_mutex_recursive_create+0xc>)
   d5cec:	681b      	ldr	r3, [r3, #0]
   d5cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5cf0:	9301      	str	r3, [sp, #4]
   d5cf2:	bd08      	pop	{r3, pc}
   d5cf4:	00030248 	.word	0x00030248

000d5cf8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5cf8:	b508      	push	{r3, lr}
   d5cfa:	4b02      	ldr	r3, [pc, #8]	; (d5d04 <os_mutex_recursive_destroy+0xc>)
   d5cfc:	681b      	ldr	r3, [r3, #0]
   d5cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5d00:	9301      	str	r3, [sp, #4]
   d5d02:	bd08      	pop	{r3, pc}
   d5d04:	00030248 	.word	0x00030248

000d5d08 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5d08:	b508      	push	{r3, lr}
   d5d0a:	4b02      	ldr	r3, [pc, #8]	; (d5d14 <inet_inet_ntop+0xc>)
   d5d0c:	681b      	ldr	r3, [r3, #0]
   d5d0e:	695b      	ldr	r3, [r3, #20]
   d5d10:	9301      	str	r3, [sp, #4]
   d5d12:	bd08      	pop	{r3, pc}
   d5d14:	00030264 	.word	0x00030264

000d5d18 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d5d18:	b508      	push	{r3, lr}
   d5d1a:	4b02      	ldr	r3, [pc, #8]	; (d5d24 <HAL_USART_Init+0xc>)
   d5d1c:	681b      	ldr	r3, [r3, #0]
   d5d1e:	681b      	ldr	r3, [r3, #0]
   d5d20:	9301      	str	r3, [sp, #4]
   d5d22:	bd08      	pop	{r3, pc}
   d5d24:	0003023c 	.word	0x0003023c

000d5d28 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5d28:	b508      	push	{r3, lr}
   d5d2a:	4b02      	ldr	r3, [pc, #8]	; (d5d34 <HAL_USART_Write_Data+0xc>)
   d5d2c:	681b      	ldr	r3, [r3, #0]
   d5d2e:	68db      	ldr	r3, [r3, #12]
   d5d30:	9301      	str	r3, [sp, #4]
   d5d32:	bd08      	pop	{r3, pc}
   d5d34:	0003023c 	.word	0x0003023c

000d5d38 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5d38:	b508      	push	{r3, lr}
   d5d3a:	4b02      	ldr	r3, [pc, #8]	; (d5d44 <HAL_USART_Available_Data+0xc>)
   d5d3c:	681b      	ldr	r3, [r3, #0]
   d5d3e:	691b      	ldr	r3, [r3, #16]
   d5d40:	9301      	str	r3, [sp, #4]
   d5d42:	bd08      	pop	{r3, pc}
   d5d44:	0003023c 	.word	0x0003023c

000d5d48 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5d48:	b508      	push	{r3, lr}
   d5d4a:	4b02      	ldr	r3, [pc, #8]	; (d5d54 <HAL_USART_Read_Data+0xc>)
   d5d4c:	681b      	ldr	r3, [r3, #0]
   d5d4e:	695b      	ldr	r3, [r3, #20]
   d5d50:	9301      	str	r3, [sp, #4]
   d5d52:	bd08      	pop	{r3, pc}
   d5d54:	0003023c 	.word	0x0003023c

000d5d58 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5d58:	b508      	push	{r3, lr}
   d5d5a:	4b02      	ldr	r3, [pc, #8]	; (d5d64 <HAL_USART_Peek_Data+0xc>)
   d5d5c:	681b      	ldr	r3, [r3, #0]
   d5d5e:	699b      	ldr	r3, [r3, #24]
   d5d60:	9301      	str	r3, [sp, #4]
   d5d62:	bd08      	pop	{r3, pc}
   d5d64:	0003023c 	.word	0x0003023c

000d5d68 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5d68:	b508      	push	{r3, lr}
   d5d6a:	4b02      	ldr	r3, [pc, #8]	; (d5d74 <HAL_USART_Flush_Data+0xc>)
   d5d6c:	681b      	ldr	r3, [r3, #0]
   d5d6e:	69db      	ldr	r3, [r3, #28]
   d5d70:	9301      	str	r3, [sp, #4]
   d5d72:	bd08      	pop	{r3, pc}
   d5d74:	0003023c 	.word	0x0003023c

000d5d78 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5d78:	b508      	push	{r3, lr}
   d5d7a:	4b02      	ldr	r3, [pc, #8]	; (d5d84 <HAL_USART_Is_Enabled+0xc>)
   d5d7c:	681b      	ldr	r3, [r3, #0]
   d5d7e:	6a1b      	ldr	r3, [r3, #32]
   d5d80:	9301      	str	r3, [sp, #4]
   d5d82:	bd08      	pop	{r3, pc}
   d5d84:	0003023c 	.word	0x0003023c

000d5d88 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5d88:	b508      	push	{r3, lr}
   d5d8a:	4b02      	ldr	r3, [pc, #8]	; (d5d94 <HAL_USART_Available_Data_For_Write+0xc>)
   d5d8c:	681b      	ldr	r3, [r3, #0]
   d5d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5d90:	9301      	str	r3, [sp, #4]
   d5d92:	bd08      	pop	{r3, pc}
   d5d94:	0003023c 	.word	0x0003023c

000d5d98 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d5d98:	b508      	push	{r3, lr}
   d5d9a:	4b02      	ldr	r3, [pc, #8]	; (d5da4 <HAL_I2C_Write_Data+0xc>)
   d5d9c:	681b      	ldr	r3, [r3, #0]
   d5d9e:	6a1b      	ldr	r3, [r3, #32]
   d5da0:	9301      	str	r3, [sp, #4]
   d5da2:	bd08      	pop	{r3, pc}
   d5da4:	00030228 	.word	0x00030228

000d5da8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d5da8:	b508      	push	{r3, lr}
   d5daa:	4b02      	ldr	r3, [pc, #8]	; (d5db4 <HAL_I2C_Available_Data+0xc>)
   d5dac:	681b      	ldr	r3, [r3, #0]
   d5dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5db0:	9301      	str	r3, [sp, #4]
   d5db2:	bd08      	pop	{r3, pc}
   d5db4:	00030228 	.word	0x00030228

000d5db8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d5db8:	b508      	push	{r3, lr}
   d5dba:	4b02      	ldr	r3, [pc, #8]	; (d5dc4 <HAL_I2C_Read_Data+0xc>)
   d5dbc:	681b      	ldr	r3, [r3, #0]
   d5dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5dc0:	9301      	str	r3, [sp, #4]
   d5dc2:	bd08      	pop	{r3, pc}
   d5dc4:	00030228 	.word	0x00030228

000d5dc8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d5dc8:	b508      	push	{r3, lr}
   d5dca:	4b02      	ldr	r3, [pc, #8]	; (d5dd4 <HAL_I2C_Peek_Data+0xc>)
   d5dcc:	681b      	ldr	r3, [r3, #0]
   d5dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5dd0:	9301      	str	r3, [sp, #4]
   d5dd2:	bd08      	pop	{r3, pc}
   d5dd4:	00030228 	.word	0x00030228

000d5dd8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d5dd8:	b508      	push	{r3, lr}
   d5dda:	4b02      	ldr	r3, [pc, #8]	; (d5de4 <HAL_I2C_Flush_Data+0xc>)
   d5ddc:	681b      	ldr	r3, [r3, #0]
   d5dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5de0:	9301      	str	r3, [sp, #4]
   d5de2:	bd08      	pop	{r3, pc}
   d5de4:	00030228 	.word	0x00030228

000d5de8 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d5de8:	b508      	push	{r3, lr}
   d5dea:	4b02      	ldr	r3, [pc, #8]	; (d5df4 <HAL_I2C_Is_Enabled+0xc>)
   d5dec:	681b      	ldr	r3, [r3, #0]
   d5dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5df0:	9301      	str	r3, [sp, #4]
   d5df2:	bd08      	pop	{r3, pc}
   d5df4:	00030228 	.word	0x00030228

000d5df8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d5df8:	b508      	push	{r3, lr}
   d5dfa:	4b02      	ldr	r3, [pc, #8]	; (d5e04 <HAL_I2C_Init+0xc>)
   d5dfc:	681b      	ldr	r3, [r3, #0]
   d5dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5e00:	9301      	str	r3, [sp, #4]
   d5e02:	bd08      	pop	{r3, pc}
   d5e04:	00030228 	.word	0x00030228

000d5e08 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5e08:	b508      	push	{r3, lr}
   d5e0a:	4b02      	ldr	r3, [pc, #8]	; (d5e14 <HAL_USB_USART_Init+0xc>)
   d5e0c:	681b      	ldr	r3, [r3, #0]
   d5e0e:	681b      	ldr	r3, [r3, #0]
   d5e10:	9301      	str	r3, [sp, #4]
   d5e12:	bd08      	pop	{r3, pc}
   d5e14:	0003024c 	.word	0x0003024c

000d5e18 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5e18:	b508      	push	{r3, lr}
   d5e1a:	4b02      	ldr	r3, [pc, #8]	; (d5e24 <HAL_USB_USART_Begin+0xc>)
   d5e1c:	681b      	ldr	r3, [r3, #0]
   d5e1e:	685b      	ldr	r3, [r3, #4]
   d5e20:	9301      	str	r3, [sp, #4]
   d5e22:	bd08      	pop	{r3, pc}
   d5e24:	0003024c 	.word	0x0003024c

000d5e28 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5e28:	b508      	push	{r3, lr}
   d5e2a:	4b02      	ldr	r3, [pc, #8]	; (d5e34 <HAL_USB_USART_Available_Data+0xc>)
   d5e2c:	681b      	ldr	r3, [r3, #0]
   d5e2e:	691b      	ldr	r3, [r3, #16]
   d5e30:	9301      	str	r3, [sp, #4]
   d5e32:	bd08      	pop	{r3, pc}
   d5e34:	0003024c 	.word	0x0003024c

000d5e38 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5e38:	b508      	push	{r3, lr}
   d5e3a:	4b02      	ldr	r3, [pc, #8]	; (d5e44 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5e3c:	681b      	ldr	r3, [r3, #0]
   d5e3e:	695b      	ldr	r3, [r3, #20]
   d5e40:	9301      	str	r3, [sp, #4]
   d5e42:	bd08      	pop	{r3, pc}
   d5e44:	0003024c 	.word	0x0003024c

000d5e48 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5e48:	b508      	push	{r3, lr}
   d5e4a:	4b02      	ldr	r3, [pc, #8]	; (d5e54 <HAL_USB_USART_Receive_Data+0xc>)
   d5e4c:	681b      	ldr	r3, [r3, #0]
   d5e4e:	699b      	ldr	r3, [r3, #24]
   d5e50:	9301      	str	r3, [sp, #4]
   d5e52:	bd08      	pop	{r3, pc}
   d5e54:	0003024c 	.word	0x0003024c

000d5e58 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5e58:	b508      	push	{r3, lr}
   d5e5a:	4b02      	ldr	r3, [pc, #8]	; (d5e64 <HAL_USB_USART_Send_Data+0xc>)
   d5e5c:	681b      	ldr	r3, [r3, #0]
   d5e5e:	69db      	ldr	r3, [r3, #28]
   d5e60:	9301      	str	r3, [sp, #4]
   d5e62:	bd08      	pop	{r3, pc}
   d5e64:	0003024c 	.word	0x0003024c

000d5e68 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5e68:	b508      	push	{r3, lr}
   d5e6a:	4b02      	ldr	r3, [pc, #8]	; (d5e74 <HAL_USB_USART_Flush_Data+0xc>)
   d5e6c:	681b      	ldr	r3, [r3, #0]
   d5e6e:	6a1b      	ldr	r3, [r3, #32]
   d5e70:	9301      	str	r3, [sp, #4]
   d5e72:	bd08      	pop	{r3, pc}
   d5e74:	0003024c 	.word	0x0003024c

000d5e78 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5e78:	b508      	push	{r3, lr}
   d5e7a:	4b02      	ldr	r3, [pc, #8]	; (d5e84 <set_system_mode+0xc>)
   d5e7c:	681b      	ldr	r3, [r3, #0]
   d5e7e:	685b      	ldr	r3, [r3, #4]
   d5e80:	9301      	str	r3, [sp, #4]
   d5e82:	bd08      	pop	{r3, pc}
   d5e84:	00030220 	.word	0x00030220

000d5e88 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5e88:	b508      	push	{r3, lr}
   d5e8a:	4b02      	ldr	r3, [pc, #8]	; (d5e94 <system_delay_ms+0xc>)
   d5e8c:	681b      	ldr	r3, [r3, #0]
   d5e8e:	695b      	ldr	r3, [r3, #20]
   d5e90:	9301      	str	r3, [sp, #4]
   d5e92:	bd08      	pop	{r3, pc}
   d5e94:	00030220 	.word	0x00030220

000d5e98 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5e98:	b508      	push	{r3, lr}
   d5e9a:	4b03      	ldr	r3, [pc, #12]	; (d5ea8 <system_ctrl_set_app_request_handler+0x10>)
   d5e9c:	681b      	ldr	r3, [r3, #0]
   d5e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5ea2:	9301      	str	r3, [sp, #4]
   d5ea4:	bd08      	pop	{r3, pc}
   d5ea6:	0000      	.short	0x0000
   d5ea8:	00030220 	.word	0x00030220

000d5eac <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5eac:	b508      	push	{r3, lr}
   d5eae:	4b03      	ldr	r3, [pc, #12]	; (d5ebc <system_ctrl_set_result+0x10>)
   d5eb0:	681b      	ldr	r3, [r3, #0]
   d5eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5eb6:	9301      	str	r3, [sp, #4]
   d5eb8:	bd08      	pop	{r3, pc}
   d5eba:	0000      	.short	0x0000
   d5ebc:	00030220 	.word	0x00030220

000d5ec0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5ec0:	b508      	push	{r3, lr}
   d5ec2:	4b02      	ldr	r3, [pc, #8]	; (d5ecc <network_connect+0xc>)
   d5ec4:	681b      	ldr	r3, [r3, #0]
   d5ec6:	685b      	ldr	r3, [r3, #4]
   d5ec8:	9301      	str	r3, [sp, #4]
   d5eca:	bd08      	pop	{r3, pc}
   d5ecc:	00030240 	.word	0x00030240

000d5ed0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5ed0:	b508      	push	{r3, lr}
   d5ed2:	4b02      	ldr	r3, [pc, #8]	; (d5edc <network_connecting+0xc>)
   d5ed4:	681b      	ldr	r3, [r3, #0]
   d5ed6:	689b      	ldr	r3, [r3, #8]
   d5ed8:	9301      	str	r3, [sp, #4]
   d5eda:	bd08      	pop	{r3, pc}
   d5edc:	00030240 	.word	0x00030240

000d5ee0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5ee0:	b508      	push	{r3, lr}
   d5ee2:	4b02      	ldr	r3, [pc, #8]	; (d5eec <network_disconnect+0xc>)
   d5ee4:	681b      	ldr	r3, [r3, #0]
   d5ee6:	68db      	ldr	r3, [r3, #12]
   d5ee8:	9301      	str	r3, [sp, #4]
   d5eea:	bd08      	pop	{r3, pc}
   d5eec:	00030240 	.word	0x00030240

000d5ef0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5ef0:	b508      	push	{r3, lr}
   d5ef2:	4b02      	ldr	r3, [pc, #8]	; (d5efc <network_ready+0xc>)
   d5ef4:	681b      	ldr	r3, [r3, #0]
   d5ef6:	691b      	ldr	r3, [r3, #16]
   d5ef8:	9301      	str	r3, [sp, #4]
   d5efa:	bd08      	pop	{r3, pc}
   d5efc:	00030240 	.word	0x00030240

000d5f00 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5f00:	b508      	push	{r3, lr}
   d5f02:	4b02      	ldr	r3, [pc, #8]	; (d5f0c <network_on+0xc>)
   d5f04:	681b      	ldr	r3, [r3, #0]
   d5f06:	695b      	ldr	r3, [r3, #20]
   d5f08:	9301      	str	r3, [sp, #4]
   d5f0a:	bd08      	pop	{r3, pc}
   d5f0c:	00030240 	.word	0x00030240

000d5f10 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5f10:	b508      	push	{r3, lr}
   d5f12:	4b02      	ldr	r3, [pc, #8]	; (d5f1c <network_off+0xc>)
   d5f14:	681b      	ldr	r3, [r3, #0]
   d5f16:	699b      	ldr	r3, [r3, #24]
   d5f18:	9301      	str	r3, [sp, #4]
   d5f1a:	bd08      	pop	{r3, pc}
   d5f1c:	00030240 	.word	0x00030240

000d5f20 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5f20:	b508      	push	{r3, lr}
   d5f22:	4b02      	ldr	r3, [pc, #8]	; (d5f2c <network_listen+0xc>)
   d5f24:	681b      	ldr	r3, [r3, #0]
   d5f26:	69db      	ldr	r3, [r3, #28]
   d5f28:	9301      	str	r3, [sp, #4]
   d5f2a:	bd08      	pop	{r3, pc}
   d5f2c:	00030240 	.word	0x00030240

000d5f30 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5f30:	b508      	push	{r3, lr}
   d5f32:	4b02      	ldr	r3, [pc, #8]	; (d5f3c <network_listening+0xc>)
   d5f34:	681b      	ldr	r3, [r3, #0]
   d5f36:	6a1b      	ldr	r3, [r3, #32]
   d5f38:	9301      	str	r3, [sp, #4]
   d5f3a:	bd08      	pop	{r3, pc}
   d5f3c:	00030240 	.word	0x00030240

000d5f40 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5f40:	b508      	push	{r3, lr}
   d5f42:	4b02      	ldr	r3, [pc, #8]	; (d5f4c <network_set_listen_timeout+0xc>)
   d5f44:	681b      	ldr	r3, [r3, #0]
   d5f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5f48:	9301      	str	r3, [sp, #4]
   d5f4a:	bd08      	pop	{r3, pc}
   d5f4c:	00030240 	.word	0x00030240

000d5f50 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5f50:	b508      	push	{r3, lr}
   d5f52:	4b02      	ldr	r3, [pc, #8]	; (d5f5c <network_get_listen_timeout+0xc>)
   d5f54:	681b      	ldr	r3, [r3, #0]
   d5f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5f58:	9301      	str	r3, [sp, #4]
   d5f5a:	bd08      	pop	{r3, pc}
   d5f5c:	00030240 	.word	0x00030240

000d5f60 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5f60:	b508      	push	{r3, lr}
   d5f62:	4b02      	ldr	r3, [pc, #8]	; (d5f6c <spark_process+0xc>)
   d5f64:	681b      	ldr	r3, [r3, #0]
   d5f66:	689b      	ldr	r3, [r3, #8]
   d5f68:	9301      	str	r3, [sp, #4]
   d5f6a:	bd08      	pop	{r3, pc}
   d5f6c:	00030244 	.word	0x00030244

000d5f70 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5f70:	b508      	push	{r3, lr}
   d5f72:	4b02      	ldr	r3, [pc, #8]	; (d5f7c <spark_set_random_seed_from_cloud_handler+0xc>)
   d5f74:	681b      	ldr	r3, [r3, #0]
   d5f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5f78:	9301      	str	r3, [sp, #4]
   d5f7a:	bd08      	pop	{r3, pc}
   d5f7c:	00030244 	.word	0x00030244

000d5f80 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5f80:	b508      	push	{r3, lr}
   d5f82:	4b02      	ldr	r3, [pc, #8]	; (d5f8c <malloc+0xc>)
   d5f84:	681b      	ldr	r3, [r3, #0]
   d5f86:	681b      	ldr	r3, [r3, #0]
   d5f88:	9301      	str	r3, [sp, #4]
   d5f8a:	bd08      	pop	{r3, pc}
   d5f8c:	0003021c 	.word	0x0003021c

000d5f90 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5f90:	b508      	push	{r3, lr}
   d5f92:	4b02      	ldr	r3, [pc, #8]	; (d5f9c <free+0xc>)
   d5f94:	681b      	ldr	r3, [r3, #0]
   d5f96:	685b      	ldr	r3, [r3, #4]
   d5f98:	9301      	str	r3, [sp, #4]
   d5f9a:	bd08      	pop	{r3, pc}
   d5f9c:	0003021c 	.word	0x0003021c

000d5fa0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5fa0:	b508      	push	{r3, lr}
   d5fa2:	4b02      	ldr	r3, [pc, #8]	; (d5fac <vsnprintf+0xc>)
   d5fa4:	681b      	ldr	r3, [r3, #0]
   d5fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5fa8:	9301      	str	r3, [sp, #4]
   d5faa:	bd08      	pop	{r3, pc}
   d5fac:	0003021c 	.word	0x0003021c

000d5fb0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5fb0:	2200      	movs	r2, #0
   d5fb2:	4611      	mov	r1, r2
   d5fb4:	6840      	ldr	r0, [r0, #4]
   d5fb6:	f7ff bfbb 	b.w	d5f30 <network_listening>

000d5fba <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5fba:	2200      	movs	r2, #0
   d5fbc:	4611      	mov	r1, r2
   d5fbe:	6840      	ldr	r0, [r0, #4]
   d5fc0:	f7ff bfc6 	b.w	d5f50 <network_get_listen_timeout>

000d5fc4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5fc4:	2200      	movs	r2, #0
   d5fc6:	6840      	ldr	r0, [r0, #4]
   d5fc8:	f7ff bfba 	b.w	d5f40 <network_set_listen_timeout>

000d5fcc <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5fcc:	2200      	movs	r2, #0
   d5fce:	f081 0101 	eor.w	r1, r1, #1
   d5fd2:	6840      	ldr	r0, [r0, #4]
   d5fd4:	f7ff bfa4 	b.w	d5f20 <network_listen>

000d5fd8 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5fd8:	2300      	movs	r3, #0
   d5fda:	461a      	mov	r2, r3
   d5fdc:	4619      	mov	r1, r3
   d5fde:	6840      	ldr	r0, [r0, #4]
   d5fe0:	f7ff bf96 	b.w	d5f10 <network_off>

000d5fe4 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5fe4:	2300      	movs	r3, #0
   d5fe6:	461a      	mov	r2, r3
   d5fe8:	4619      	mov	r1, r3
   d5fea:	6840      	ldr	r0, [r0, #4]
   d5fec:	f7ff bf88 	b.w	d5f00 <network_on>

000d5ff0 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5ff0:	2200      	movs	r2, #0
   d5ff2:	4611      	mov	r1, r2
   d5ff4:	6840      	ldr	r0, [r0, #4]
   d5ff6:	f7ff bf7b 	b.w	d5ef0 <network_ready>

000d5ffa <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5ffa:	2200      	movs	r2, #0
   d5ffc:	4611      	mov	r1, r2
   d5ffe:	6840      	ldr	r0, [r0, #4]
   d6000:	f7ff bf66 	b.w	d5ed0 <network_connecting>

000d6004 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6004:	2200      	movs	r2, #0
   d6006:	2102      	movs	r1, #2
   d6008:	6840      	ldr	r0, [r0, #4]
   d600a:	f7ff bf69 	b.w	d5ee0 <network_disconnect>

000d600e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d600e:	2300      	movs	r3, #0
   d6010:	461a      	mov	r2, r3
   d6012:	6840      	ldr	r0, [r0, #4]
   d6014:	f7ff bf54 	b.w	d5ec0 <network_connect>

000d6018 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6018:	4b02      	ldr	r3, [pc, #8]	; (d6024 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d601a:	2203      	movs	r2, #3
   d601c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d601e:	4a02      	ldr	r2, [pc, #8]	; (d6028 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6020:	601a      	str	r2, [r3, #0]
   d6022:	4770      	bx	lr
   d6024:	2003e3dc 	.word	0x2003e3dc
   d6028:	000d71b8 	.word	0x000d71b8

000d602c <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d602c:	2100      	movs	r1, #0
   d602e:	f7ff be1b 	b.w	d5c68 <HAL_SPI_Acquire>

000d6032 <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d6032:	2100      	movs	r1, #0
   d6034:	f7ff be20 	b.w	d5c78 <HAL_SPI_Release>

000d6038 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d6038:	b510      	push	{r4, lr}
   d603a:	4604      	mov	r4, r0
{
    _spi = spi;
   d603c:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d603e:	4608      	mov	r0, r1
   d6040:	f7ff fde2 	bl	d5c08 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6044:	2300      	movs	r3, #0
   d6046:	6063      	str	r3, [r4, #4]
}
   d6048:	4620      	mov	r0, r4
   d604a:	bd10      	pop	{r4, pc}

000d604c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d604c:	b510      	push	{r4, lr}
   d604e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d6050:	7800      	ldrb	r0, [r0, #0]
   d6052:	f7ff ffeb 	bl	d602c <_ZN8SPIClass4lockEv.isra.0>
   d6056:	b948      	cbnz	r0, d606c <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d6058:	7820      	ldrb	r0, [r4, #0]
   d605a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d605e:	f7ff fdc3 	bl	d5be8 <HAL_SPI_Begin>
        unlock();
   d6062:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d6068:	f7ff bfe3 	b.w	d6032 <_ZN8SPIClass6unlockEv.isra.1>
   d606c:	bd10      	pop	{r4, pc}

000d606e <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d606e:	7800      	ldrb	r0, [r0, #0]
   d6070:	f7ff bfdf 	b.w	d6032 <_ZN8SPIClass6unlockEv.isra.1>

000d6074 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6074:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d6076:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6078:	6018      	str	r0, [r3, #0]
   d607a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d607c:	6818      	ldr	r0, [r3, #0]
   d607e:	4288      	cmp	r0, r1
   d6080:	b2e5      	uxtb	r5, r4
   d6082:	d906      	bls.n	d6092 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6084:	3401      	adds	r4, #1
   d6086:	2c08      	cmp	r4, #8
   d6088:	d002      	beq.n	d6090 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d608a:	0840      	lsrs	r0, r0, #1
   d608c:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d608e:	e7f5      	b.n	d607c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d6090:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d6092:	4b02      	ldr	r3, [pc, #8]	; (d609c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6094:	5d5b      	ldrb	r3, [r3, r5]
   d6096:	7013      	strb	r3, [r2, #0]
   d6098:	bd30      	pop	{r4, r5, pc}
   d609a:	bf00      	nop
   d609c:	000d71e4 	.word	0x000d71e4

000d60a0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d60a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d60a4:	4607      	mov	r7, r0
   d60a6:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d60a8:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d60aa:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d60ac:	f7ff ffbe 	bl	d602c <_ZN8SPIClass4lockEv.isra.0>
   d60b0:	2800      	cmp	r0, #0
   d60b2:	db62      	blt.n	d617a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d60b4:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d60b6:	2214      	movs	r2, #20
   d60b8:	2100      	movs	r1, #0
   d60ba:	a809      	add	r0, sp, #36	; 0x24
   d60bc:	f000 ffc4 	bl	d7048 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d60c0:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d60c2:	4620      	mov	r0, r4
   d60c4:	2200      	movs	r2, #0
   d60c6:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d60c8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d60cc:	f7ff fdac 	bl	d5c28 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d60d0:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d60d4:	b154      	cbz	r4, d60ec <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d60d6:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d60da:	b935      	cbnz	r5, d60ea <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d60dc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d60e0:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d60e4:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d60e8:	e003      	b.n	d60f2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d60ea:	2400      	movs	r4, #0
   d60ec:	46a1      	mov	r9, r4
   d60ee:	46a0      	mov	r8, r4
   d60f0:	2501      	movs	r5, #1
   d60f2:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d60f4:	b105      	cbz	r5, d60f8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d60f6:	b9bb      	cbnz	r3, d6128 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d60f8:	429d      	cmp	r5, r3
   d60fa:	d10b      	bne.n	d6114 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d60fc:	68b2      	ldr	r2, [r6, #8]
   d60fe:	4542      	cmp	r2, r8
   d6100:	d108      	bne.n	d6114 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d6102:	f88d 9020 	strb.w	r9, [sp, #32]
   d6106:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d610a:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d610e:	89b2      	ldrh	r2, [r6, #12]
   d6110:	4291      	cmp	r1, r2
   d6112:	d009      	beq.n	d6128 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d6114:	b153      	cbz	r3, d612c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d6116:	2400      	movs	r4, #0
   d6118:	7838      	ldrb	r0, [r7, #0]
   d611a:	9401      	str	r4, [sp, #4]
   d611c:	9400      	str	r4, [sp, #0]
   d611e:	4623      	mov	r3, r4
   d6120:	4622      	mov	r2, r4
   d6122:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d6124:	f7ff fd98 	bl	d5c58 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d6128:	2000      	movs	r0, #0
   d612a:	e026      	b.n	d617a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d612c:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d6130:	68b1      	ldr	r1, [r6, #8]
   d6132:	980a      	ldr	r0, [sp, #40]	; 0x28
   d6134:	ab04      	add	r3, sp, #16
   d6136:	f10d 020f 	add.w	r2, sp, #15
   d613a:	f7ff ff9b 	bl	d6074 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d613e:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d6140:	b105      	cbz	r5, d6144 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d6142:	b9b1      	cbnz	r1, d6172 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d6144:	42a9      	cmp	r1, r5
   d6146:	d008      	beq.n	d615a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d6148:	2400      	movs	r4, #0
   d614a:	7838      	ldrb	r0, [r7, #0]
   d614c:	9401      	str	r4, [sp, #4]
   d614e:	7b74      	ldrb	r4, [r6, #13]
   d6150:	7b33      	ldrb	r3, [r6, #12]
   d6152:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d6156:	9400      	str	r4, [sp, #0]
   d6158:	e7e4      	b.n	d6124 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d615a:	68b3      	ldr	r3, [r6, #8]
   d615c:	4543      	cmp	r3, r8
   d615e:	d3f3      	bcc.n	d6148 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d6160:	f88d 9020 	strb.w	r9, [sp, #32]
   d6164:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d6168:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d616c:	89b3      	ldrh	r3, [r6, #12]
   d616e:	429a      	cmp	r2, r3
   d6170:	d1ea      	bne.n	d6148 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d6172:	9b04      	ldr	r3, [sp, #16]
   d6174:	4543      	cmp	r3, r8
   d6176:	d1e7      	bne.n	d6148 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d6178:	e7d6      	b.n	d6128 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d617a:	b00f      	add	sp, #60	; 0x3c
   d617c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6180 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6180:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d6182:	7800      	ldrb	r0, [r0, #0]
   d6184:	f7ff fd38 	bl	d5bf8 <HAL_SPI_Send_Receive_Data>
}
   d6188:	b2c0      	uxtb	r0, r0
   d618a:	bd08      	pop	{r3, pc}

000d618c <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d618c:	b530      	push	{r4, r5, lr}
   d618e:	b087      	sub	sp, #28
   d6190:	4604      	mov	r4, r0
   d6192:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d6194:	7800      	ldrb	r0, [r0, #0]
   d6196:	9500      	str	r5, [sp, #0]
   d6198:	f7ff fd4e 	bl	d5c38 <HAL_SPI_DMA_Transfer>
    if (user_callback == NULL)
   d619c:	b93d      	cbnz	r5, d61ae <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        HAL_SPI_TransferStatus st;
        do
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d619e:	a902      	add	r1, sp, #8
   d61a0:	7820      	ldrb	r0, [r4, #0]
   d61a2:	f7ff fd51 	bl	d5c48 <HAL_SPI_DMA_Transfer_Status>
{
    HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
    if (user_callback == NULL)
    {
        HAL_SPI_TransferStatus st;
        do
   d61a6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d61aa:	07db      	lsls	r3, r3, #31
   d61ac:	d4f7      	bmi.n	d619e <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
        {
            HAL_SPI_DMA_Transfer_Status(_spi, &st);
        } while (st.transfer_ongoing);
    }
}
   d61ae:	b007      	add	sp, #28
   d61b0:	bd30      	pop	{r4, r5, pc}

000d61b2 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d61b2:	7800      	ldrb	r0, [r0, #0]
   d61b4:	f7ff bd30 	b.w	d5c18 <HAL_SPI_Is_Enabled>

000d61b8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d61b8:	b510      	push	{r4, lr}
   d61ba:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d61bc:	6800      	ldr	r0, [r0, #0]
   d61be:	b118      	cbz	r0, d61c8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d61c0:	f7ff fee6 	bl	d5f90 <free>
            wakeupSource_ = nullptr;
   d61c4:	2300      	movs	r3, #0
   d61c6:	6023      	str	r3, [r4, #0]
   d61c8:	bd10      	pop	{r4, pc}

000d61ca <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d61ca:	b510      	push	{r4, lr}
   d61cc:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d61ce:	f7ff fff3 	bl	d61b8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d61d2:	4620      	mov	r0, r4
   d61d4:	bd10      	pop	{r4, pc}
	...

000d61d8 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d61d8:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d61da:	4c09      	ldr	r4, [pc, #36]	; (d6200 <_GLOBAL__sub_I_System+0x28>)
   d61dc:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d61de:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d61e2:	6020      	str	r0, [r4, #0]
   d61e4:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d61e6:	71a0      	strb	r0, [r4, #6]
   d61e8:	8120      	strh	r0, [r4, #8]
   d61ea:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d61ec:	f7ff fe44 	bl	d5e78 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d61f0:	4620      	mov	r0, r4
   d61f2:	4a04      	ldr	r2, [pc, #16]	; (d6204 <_GLOBAL__sub_I_System+0x2c>)
   d61f4:	4904      	ldr	r1, [pc, #16]	; (d6208 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d61f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d61fa:	f000 bd93 	b.w	d6d24 <__aeabi_atexit>
   d61fe:	bf00      	nop
   d6200:	2003e3e4 	.word	0x2003e3e4
   d6204:	2003dedc 	.word	0x2003dedc
   d6208:	000d61cb 	.word	0x000d61cb

000d620c <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d620c:	b510      	push	{r4, lr}
   d620e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6210:	6800      	ldr	r0, [r0, #0]
   d6212:	b108      	cbz	r0, d6218 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6214:	f7ff fd70 	bl	d5cf8 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d6218:	4620      	mov	r0, r4
   d621a:	bd10      	pop	{r4, pc}

000d621c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d621c:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d621e:	4c06      	ldr	r4, [pc, #24]	; (d6238 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6220:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d6222:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6224:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d6226:	f7ff fd5f 	bl	d5ce8 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d622a:	4620      	mov	r0, r4
   d622c:	4a03      	ldr	r2, [pc, #12]	; (d623c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d622e:	4904      	ldr	r1, [pc, #16]	; (d6240 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6234:	f000 bd76 	b.w	d6d24 <__aeabi_atexit>
   d6238:	2003e3f0 	.word	0x2003e3f0
   d623c:	2003dedc 	.word	0x2003dedc
   d6240:	000d620d 	.word	0x000d620d

000d6244 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6246:	4606      	mov	r6, r0
   d6248:	460d      	mov	r5, r1
   d624a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d624c:	2400      	movs	r4, #0
  while (size--) {
   d624e:	42bd      	cmp	r5, r7
   d6250:	d00c      	beq.n	d626c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6252:	6833      	ldr	r3, [r6, #0]
   d6254:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6258:	689b      	ldr	r3, [r3, #8]
   d625a:	4630      	mov	r0, r6
   d625c:	4798      	blx	r3
     if (chunk>=0)
   d625e:	2800      	cmp	r0, #0
   d6260:	db01      	blt.n	d6266 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6262:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6264:	e7f3      	b.n	d624e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6266:	2c00      	cmp	r4, #0
   d6268:	bf08      	it	eq
   d626a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d626c:	4620      	mov	r0, r4
   d626e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6270 <_ZN5Print5printEPKc>:
   d6270:	b508      	push	{r3, lr}
   d6272:	f7fe ff6f 	bl	d5154 <_ZN5Print5writeEPKc>
   d6276:	bd08      	pop	{r3, pc}

000d6278 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6278:	6803      	ldr	r3, [r0, #0]
   d627a:	689b      	ldr	r3, [r3, #8]
   d627c:	4718      	bx	r3

000d627e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d627e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6280:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6282:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6284:	f7ff fff8 	bl	d6278 <_ZN5Print5printEc>
  n += print('\n');
   d6288:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d628a:	4604      	mov	r4, r0
  n += print('\n');
   d628c:	4628      	mov	r0, r5
   d628e:	f7ff fff3 	bl	d6278 <_ZN5Print5printEc>
  return n;
}
   d6292:	4420      	add	r0, r4
   d6294:	bd38      	pop	{r3, r4, r5, pc}

000d6296 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6296:	b538      	push	{r3, r4, r5, lr}
   d6298:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d629a:	f7fe ff5b 	bl	d5154 <_ZN5Print5writeEPKc>
   d629e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d62a0:	4628      	mov	r0, r5
   d62a2:	f7ff ffec 	bl	d627e <_ZN5Print7printlnEv>
  return n;
}
   d62a6:	4420      	add	r0, r4
   d62a8:	bd38      	pop	{r3, r4, r5, pc}

000d62aa <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d62aa:	b530      	push	{r4, r5, lr}
   d62ac:	b08b      	sub	sp, #44	; 0x2c
   d62ae:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d62b0:	2100      	movs	r1, #0
   d62b2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d62b6:	2a01      	cmp	r2, #1
   d62b8:	bf98      	it	ls
   d62ba:	220a      	movls	r2, #10
   d62bc:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d62c0:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d62c4:	fb05 3312 	mls	r3, r5, r2, r3
   d62c8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d62cc:	2b09      	cmp	r3, #9
   d62ce:	bf94      	ite	ls
   d62d0:	3330      	addls	r3, #48	; 0x30
   d62d2:	3337      	addhi	r3, #55	; 0x37
   d62d4:	b2db      	uxtb	r3, r3
   d62d6:	4621      	mov	r1, r4
   d62d8:	f804 3901 	strb.w	r3, [r4], #-1
   d62dc:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d62de:	2d00      	cmp	r5, #0
   d62e0:	d1ee      	bne.n	d62c0 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d62e2:	f7fe ff37 	bl	d5154 <_ZN5Print5writeEPKc>
}
   d62e6:	b00b      	add	sp, #44	; 0x2c
   d62e8:	bd30      	pop	{r4, r5, pc}

000d62ea <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d62ea:	b40c      	push	{r2, r3}
   d62ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d62f0:	b087      	sub	sp, #28
   d62f2:	af00      	add	r7, sp, #0
   d62f4:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d62f8:	4605      	mov	r5, r0
   d62fa:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d62fe:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6300:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d6302:	4623      	mov	r3, r4
   d6304:	464a      	mov	r2, r9
   d6306:	2114      	movs	r1, #20
   d6308:	1d38      	adds	r0, r7, #4
   d630a:	f7ff fe49 	bl	d5fa0 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d630e:	2813      	cmp	r0, #19
   d6310:	d805      	bhi.n	d631e <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6312:	1d39      	adds	r1, r7, #4
   d6314:	4628      	mov	r0, r5
   d6316:	f7fe ff1d 	bl	d5154 <_ZN5Print5writeEPKc>
   d631a:	4604      	mov	r4, r0
   d631c:	e013      	b.n	d6346 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d631e:	f100 0308 	add.w	r3, r0, #8
   d6322:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d6326:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6328:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d632c:	1c41      	adds	r1, r0, #1
   d632e:	4623      	mov	r3, r4
   d6330:	464a      	mov	r2, r9
   d6332:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d6334:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d6336:	f7ff fe33 	bl	d5fa0 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d633a:	4669      	mov	r1, sp
   d633c:	4628      	mov	r0, r5
   d633e:	f7fe ff09 	bl	d5154 <_ZN5Print5writeEPKc>
   d6342:	4604      	mov	r4, r0
   d6344:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d6346:	b11e      	cbz	r6, d6350 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d6348:	4628      	mov	r0, r5
   d634a:	f7ff ff98 	bl	d627e <_ZN5Print7printlnEv>
   d634e:	4404      	add	r4, r0
    return n;
}
   d6350:	4620      	mov	r0, r4
   d6352:	371c      	adds	r7, #28
   d6354:	46bd      	mov	sp, r7
   d6356:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d635a:	b002      	add	sp, #8
   d635c:	4770      	bx	lr
	...

000d6360 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6360:	4b01      	ldr	r3, [pc, #4]	; (d6368 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6362:	4a02      	ldr	r2, [pc, #8]	; (d636c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6364:	601a      	str	r2, [r3, #0]
   d6366:	4770      	bx	lr
   d6368:	2003e3f4 	.word	0x2003e3f4
   d636c:	000d725f 	.word	0x000d725f

000d6370 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6370:	4b02      	ldr	r3, [pc, #8]	; (d637c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6372:	681a      	ldr	r2, [r3, #0]
   d6374:	4b02      	ldr	r3, [pc, #8]	; (d6380 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6376:	601a      	str	r2, [r3, #0]
   d6378:	4770      	bx	lr
   d637a:	bf00      	nop
   d637c:	2003de74 	.word	0x2003de74
   d6380:	2003e3f8 	.word	0x2003e3f8

000d6384 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6384:	2100      	movs	r1, #0
   d6386:	f7ff bd7f 	b.w	d5e88 <system_delay_ms>

000d638a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d638a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d638c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d638e:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d6390:	b113      	cbz	r3, d6398 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6392:	2203      	movs	r2, #3
   d6394:	4601      	mov	r1, r0
   d6396:	4798      	blx	r3
    }
   d6398:	4620      	mov	r0, r4
   d639a:	bd10      	pop	{r4, pc}

000d639c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d639c:	b510      	push	{r4, lr}
   d639e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d63a0:	f7ff fff3 	bl	d638a <_ZNSt14_Function_baseD1Ev>
   d63a4:	4620      	mov	r0, r4
   d63a6:	bd10      	pop	{r4, pc}

000d63a8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d63a8:	4803      	ldr	r0, [pc, #12]	; (d63b8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d63aa:	4a04      	ldr	r2, [pc, #16]	; (d63bc <_GLOBAL__sub_I_RGB+0x14>)
   d63ac:	4904      	ldr	r1, [pc, #16]	; (d63c0 <_GLOBAL__sub_I_RGB+0x18>)
   d63ae:	2300      	movs	r3, #0
   d63b0:	6083      	str	r3, [r0, #8]
   d63b2:	f000 bcb7 	b.w	d6d24 <__aeabi_atexit>
   d63b6:	bf00      	nop
   d63b8:	2003e3fc 	.word	0x2003e3fc
   d63bc:	2003dedc 	.word	0x2003dedc
   d63c0:	000d639d 	.word	0x000d639d

000d63c4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d63c4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d63c6:	4b0c      	ldr	r3, [pc, #48]	; (d63f8 <serialEventRun+0x34>)
   d63c8:	b133      	cbz	r3, d63d8 <serialEventRun+0x14>
   d63ca:	f000 f957 	bl	d667c <_Z16_fetch_usbserialv>
   d63ce:	6803      	ldr	r3, [r0, #0]
   d63d0:	691b      	ldr	r3, [r3, #16]
   d63d2:	4798      	blx	r3
   d63d4:	2800      	cmp	r0, #0
   d63d6:	dc09      	bgt.n	d63ec <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d63d8:	4b08      	ldr	r3, [pc, #32]	; (d63fc <serialEventRun+0x38>)
   d63da:	b163      	cbz	r3, d63f6 <serialEventRun+0x32>
   d63dc:	f000 f9d0 	bl	d6780 <_Z22__fetch_global_Serial1v>
   d63e0:	6803      	ldr	r3, [r0, #0]
   d63e2:	691b      	ldr	r3, [r3, #16]
   d63e4:	4798      	blx	r3
   d63e6:	2800      	cmp	r0, #0
   d63e8:	dc03      	bgt.n	d63f2 <serialEventRun+0x2e>
   d63ea:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d63ec:	f3af 8000 	nop.w
   d63f0:	e7f2      	b.n	d63d8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d63f2:	f3af 8000 	nop.w
   d63f6:	bd08      	pop	{r3, pc}
	...

000d6400 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6400:	b508      	push	{r3, lr}
	serialEventRun();
   d6402:	f7ff ffdf 	bl	d63c4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6406:	f7ff fc4f 	bl	d5ca8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d640a:	4b01      	ldr	r3, [pc, #4]	; (d6410 <_post_loop+0x10>)
   d640c:	6018      	str	r0, [r3, #0]
   d640e:	bd08      	pop	{r3, pc}
   d6410:	2003e730 	.word	0x2003e730

000d6414 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6414:	4802      	ldr	r0, [pc, #8]	; (d6420 <_Z33system_initialize_user_backup_ramv+0xc>)
   d6416:	4a03      	ldr	r2, [pc, #12]	; (d6424 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6418:	4903      	ldr	r1, [pc, #12]	; (d6428 <_Z33system_initialize_user_backup_ramv+0x14>)
   d641a:	1a12      	subs	r2, r2, r0
   d641c:	f000 be09 	b.w	d7032 <memcpy>
   d6420:	2003f400 	.word	0x2003f400
   d6424:	2003f404 	.word	0x2003f404
   d6428:	000d7520 	.word	0x000d7520

000d642c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d642c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d642e:	2300      	movs	r3, #0
   d6430:	9300      	str	r3, [sp, #0]
   d6432:	461a      	mov	r2, r3
   d6434:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6438:	f7ff fd38 	bl	d5eac <system_ctrl_set_result>
}
   d643c:	b003      	add	sp, #12
   d643e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6444 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6444:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6446:	8843      	ldrh	r3, [r0, #2]
   d6448:	2b0a      	cmp	r3, #10
   d644a:	d008      	beq.n	d645e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d644c:	2b50      	cmp	r3, #80	; 0x50
   d644e:	d109      	bne.n	d6464 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6450:	4b09      	ldr	r3, [pc, #36]	; (d6478 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6452:	681b      	ldr	r3, [r3, #0]
   d6454:	b13b      	cbz	r3, d6466 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6456:	b003      	add	sp, #12
   d6458:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d645c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d645e:	f7ff ffe5 	bl	d642c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6462:	e006      	b.n	d6472 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6464:	2300      	movs	r3, #0
   d6466:	9300      	str	r3, [sp, #0]
   d6468:	461a      	mov	r2, r3
   d646a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d646e:	f7ff fd1d 	bl	d5eac <system_ctrl_set_result>
        break;
    }
}
   d6472:	b003      	add	sp, #12
   d6474:	f85d fb04 	ldr.w	pc, [sp], #4
   d6478:	2003e40c 	.word	0x2003e40c

000d647c <module_user_init_hook>:

void module_user_init_hook()
{
   d647c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d647e:	4c10      	ldr	r4, [pc, #64]	; (d64c0 <module_user_init_hook+0x44>)
   d6480:	4d10      	ldr	r5, [pc, #64]	; (d64c4 <module_user_init_hook+0x48>)
   d6482:	6823      	ldr	r3, [r4, #0]
   d6484:	42ab      	cmp	r3, r5
   d6486:	4b10      	ldr	r3, [pc, #64]	; (d64c8 <module_user_init_hook+0x4c>)
   d6488:	bf0c      	ite	eq
   d648a:	2201      	moveq	r2, #1
   d648c:	2200      	movne	r2, #0
   d648e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6490:	d002      	beq.n	d6498 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d6492:	f7ff ffbf 	bl	d6414 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d6496:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6498:	f7ff fbf6 	bl	d5c88 <HAL_RNG_GetRandomNumber>
   d649c:	4604      	mov	r4, r0
    srand(seed);
   d649e:	f000 fddb 	bl	d7058 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d64a2:	4b0a      	ldr	r3, [pc, #40]	; (d64cc <module_user_init_hook+0x50>)
   d64a4:	b113      	cbz	r3, d64ac <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d64a6:	4620      	mov	r0, r4
   d64a8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d64ac:	2100      	movs	r1, #0
   d64ae:	4807      	ldr	r0, [pc, #28]	; (d64cc <module_user_init_hook+0x50>)
   d64b0:	f7ff fd5e 	bl	d5f70 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d64b4:	2100      	movs	r1, #0
   d64b6:	4806      	ldr	r0, [pc, #24]	; (d64d0 <module_user_init_hook+0x54>)
}
   d64b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d64bc:	f7ff bcec 	b.w	d5e98 <system_ctrl_set_app_request_handler>
   d64c0:	2003f400 	.word	0x2003f400
   d64c4:	9a271c1e 	.word	0x9a271c1e
   d64c8:	2003e410 	.word	0x2003e410
   d64cc:	00000000 	.word	0x00000000
   d64d0:	000d6445 	.word	0x000d6445

000d64d4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d64d4:	4770      	bx	lr

000d64d6 <_ZN9IPAddressD0Ev>:
   d64d6:	b510      	push	{r4, lr}
   d64d8:	2118      	movs	r1, #24
   d64da:	4604      	mov	r4, r0
   d64dc:	f000 fc30 	bl	d6d40 <_ZdlPvj>
   d64e0:	4620      	mov	r0, r4
   d64e2:	bd10      	pop	{r4, pc}

000d64e4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d64e4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d64e6:	7d03      	ldrb	r3, [r0, #20]
   d64e8:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d64ea:	b08d      	sub	sp, #52	; 0x34
   d64ec:	460e      	mov	r6, r1
   d64ee:	f100 0704 	add.w	r7, r0, #4
   d64f2:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d64f6:	d002      	beq.n	d64fe <_ZNK9IPAddress7printToER5Print+0x1a>
   d64f8:	f100 0508 	add.w	r5, r0, #8
   d64fc:	e018      	b.n	d6530 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d64fe:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6500:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6502:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6506:	232f      	movs	r3, #47	; 0x2f
   d6508:	462a      	mov	r2, r5
   d650a:	200a      	movs	r0, #10
   d650c:	f7ff fbfc 	bl	d5d08 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6510:	4628      	mov	r0, r5
   d6512:	f000 fdc9 	bl	d70a8 <strlen>
   d6516:	6833      	ldr	r3, [r6, #0]
   d6518:	4602      	mov	r2, r0
   d651a:	68db      	ldr	r3, [r3, #12]
   d651c:	4629      	mov	r1, r5
   d651e:	4630      	mov	r0, r6
   d6520:	4798      	blx	r3
   d6522:	e00f      	b.n	d6544 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6524:	b124      	cbz	r4, d6530 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6526:	212e      	movs	r1, #46	; 0x2e
   d6528:	4630      	mov	r0, r6
   d652a:	f7ff fea5 	bl	d6278 <_ZN5Print5printEc>
   d652e:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d6530:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6534:	220a      	movs	r2, #10
   d6536:	4630      	mov	r0, r6
   d6538:	f7ff feb7 	bl	d62aa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d653c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d653e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6540:	d1f0      	bne.n	d6524 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6542:	4620      	mov	r0, r4
    }
    return n;
}
   d6544:	b00d      	add	sp, #52	; 0x34
   d6546:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6548 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6548:	b510      	push	{r4, lr}
   d654a:	4b05      	ldr	r3, [pc, #20]	; (d6560 <_ZN9IPAddressC1Ev+0x18>)
   d654c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d654e:	2211      	movs	r2, #17
   d6550:	f840 3b04 	str.w	r3, [r0], #4
   d6554:	2100      	movs	r1, #0
   d6556:	f000 fd77 	bl	d7048 <memset>
{
    clear();
}
   d655a:	4620      	mov	r0, r4
   d655c:	bd10      	pop	{r4, pc}
   d655e:	bf00      	nop
   d6560:	000d7300 	.word	0x000d7300

000d6564 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6564:	4603      	mov	r3, r0
   d6566:	4a07      	ldr	r2, [pc, #28]	; (d6584 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6568:	b510      	push	{r4, lr}
   d656a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d656e:	f101 0210 	add.w	r2, r1, #16
   d6572:	f851 4b04 	ldr.w	r4, [r1], #4
   d6576:	f843 4b04 	str.w	r4, [r3], #4
   d657a:	4291      	cmp	r1, r2
   d657c:	d1f9      	bne.n	d6572 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d657e:	780a      	ldrb	r2, [r1, #0]
   d6580:	701a      	strb	r2, [r3, #0]
}
   d6582:	bd10      	pop	{r4, pc}
   d6584:	000d7300 	.word	0x000d7300

000d6588 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6588:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d658a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d658e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6592:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6596:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d659a:	2304      	movs	r3, #4
   d659c:	6041      	str	r1, [r0, #4]
   d659e:	7503      	strb	r3, [r0, #20]
   d65a0:	bd10      	pop	{r4, pc}

000d65a2 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d65a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d65a4:	780d      	ldrb	r5, [r1, #0]
   d65a6:	788b      	ldrb	r3, [r1, #2]
   d65a8:	784a      	ldrb	r2, [r1, #1]
   d65aa:	78c9      	ldrb	r1, [r1, #3]
   d65ac:	9100      	str	r1, [sp, #0]
   d65ae:	4629      	mov	r1, r5
   d65b0:	f7ff ffea 	bl	d6588 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d65b4:	b003      	add	sp, #12
   d65b6:	bd30      	pop	{r4, r5, pc}

000d65b8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d65b8:	7441      	strb	r1, [r0, #17]
   d65ba:	4770      	bx	lr

000d65bc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d65bc:	4770      	bx	lr

000d65be <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d65be:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d65c0:	2100      	movs	r1, #0
   d65c2:	7c00      	ldrb	r0, [r0, #16]
   d65c4:	f7ff fc40 	bl	d5e48 <HAL_USB_USART_Receive_Data>
}
   d65c8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d65cc:	bf28      	it	cs
   d65ce:	f04f 30ff 	movcs.w	r0, #4294967295
   d65d2:	bd08      	pop	{r3, pc}

000d65d4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d65d4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d65d6:	2101      	movs	r1, #1
   d65d8:	7c00      	ldrb	r0, [r0, #16]
   d65da:	f7ff fc35 	bl	d5e48 <HAL_USB_USART_Receive_Data>
}
   d65de:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d65e2:	bf28      	it	cs
   d65e4:	f04f 30ff 	movcs.w	r0, #4294967295
   d65e8:	bd08      	pop	{r3, pc}

000d65ea <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d65ea:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d65ec:	7c00      	ldrb	r0, [r0, #16]
   d65ee:	f7ff fc23 	bl	d5e38 <HAL_USB_USART_Available_Data_For_Write>
}
   d65f2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d65f6:	bd08      	pop	{r3, pc}

000d65f8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d65f8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d65fa:	7c00      	ldrb	r0, [r0, #16]
   d65fc:	f7ff fc14 	bl	d5e28 <HAL_USB_USART_Available_Data>
}
   d6600:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6604:	bd08      	pop	{r3, pc}

000d6606 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d6606:	7c00      	ldrb	r0, [r0, #16]
   d6608:	f7ff bc2e 	b.w	d5e68 <HAL_USB_USART_Flush_Data>

000d660c <_ZN9USBSerialD0Ev>:
   d660c:	b510      	push	{r4, lr}
   d660e:	2114      	movs	r1, #20
   d6610:	4604      	mov	r4, r0
   d6612:	f000 fb95 	bl	d6d40 <_ZdlPvj>
   d6616:	4620      	mov	r0, r4
   d6618:	bd10      	pop	{r4, pc}

000d661a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d661a:	b538      	push	{r3, r4, r5, lr}
   d661c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d661e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d6620:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6622:	f7ff fc09 	bl	d5e38 <HAL_USB_USART_Available_Data_For_Write>
   d6626:	2800      	cmp	r0, #0
   d6628:	dc01      	bgt.n	d662e <_ZN9USBSerial5writeEh+0x14>
   d662a:	7c60      	ldrb	r0, [r4, #17]
   d662c:	b128      	cbz	r0, d663a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d662e:	4629      	mov	r1, r5
   d6630:	7c20      	ldrb	r0, [r4, #16]
   d6632:	f7ff fc11 	bl	d5e58 <HAL_USB_USART_Send_Data>
   d6636:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d663a:	bd38      	pop	{r3, r4, r5, pc}

000d663c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d663c:	b510      	push	{r4, lr}
   d663e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6640:	2300      	movs	r3, #0
   d6642:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6644:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6648:	60a3      	str	r3, [r4, #8]
   d664a:	4b05      	ldr	r3, [pc, #20]	; (d6660 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d664c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d664e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6650:	4608      	mov	r0, r1
{
  _serial = serial;
   d6652:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d6654:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d6656:	4611      	mov	r1, r2
   d6658:	f7ff fbd6 	bl	d5e08 <HAL_USB_USART_Init>
}
   d665c:	4620      	mov	r0, r4
   d665e:	bd10      	pop	{r4, pc}
   d6660:	000d7314 	.word	0x000d7314

000d6664 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6664:	2200      	movs	r2, #0
   d6666:	7c00      	ldrb	r0, [r0, #16]
   d6668:	f7ff bbd6 	b.w	d5e18 <HAL_USB_USART_Begin>

000d666c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d666c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d666e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6670:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6672:	2100      	movs	r1, #0
   d6674:	f000 fce8 	bl	d7048 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6678:	4620      	mov	r0, r4
   d667a:	bd10      	pop	{r4, pc}

000d667c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d667c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d667e:	4d0e      	ldr	r5, [pc, #56]	; (d66b8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6680:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6682:	a801      	add	r0, sp, #4
   d6684:	f7ff fff2 	bl	d666c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6688:	6829      	ldr	r1, [r5, #0]
   d668a:	f011 0401 	ands.w	r4, r1, #1
   d668e:	d110      	bne.n	d66b2 <_Z16_fetch_usbserialv+0x36>
   d6690:	4628      	mov	r0, r5
   d6692:	f7fd fd04 	bl	d409e <__cxa_guard_acquire>
   d6696:	b160      	cbz	r0, d66b2 <_Z16_fetch_usbserialv+0x36>
   d6698:	aa01      	add	r2, sp, #4
   d669a:	4621      	mov	r1, r4
   d669c:	4807      	ldr	r0, [pc, #28]	; (d66bc <_Z16_fetch_usbserialv+0x40>)
   d669e:	f7ff ffcd 	bl	d663c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d66a2:	4628      	mov	r0, r5
   d66a4:	f7fd fd00 	bl	d40a8 <__cxa_guard_release>
   d66a8:	4a05      	ldr	r2, [pc, #20]	; (d66c0 <_Z16_fetch_usbserialv+0x44>)
   d66aa:	4906      	ldr	r1, [pc, #24]	; (d66c4 <_Z16_fetch_usbserialv+0x48>)
   d66ac:	4803      	ldr	r0, [pc, #12]	; (d66bc <_Z16_fetch_usbserialv+0x40>)
   d66ae:	f000 fb39 	bl	d6d24 <__aeabi_atexit>
	return _usbserial;
}
   d66b2:	4802      	ldr	r0, [pc, #8]	; (d66bc <_Z16_fetch_usbserialv+0x40>)
   d66b4:	b007      	add	sp, #28
   d66b6:	bd30      	pop	{r4, r5, pc}
   d66b8:	2003e414 	.word	0x2003e414
   d66bc:	2003e418 	.word	0x2003e418
   d66c0:	2003dedc 	.word	0x2003dedc
   d66c4:	000d65bd 	.word	0x000d65bd

000d66c8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d66c8:	4770      	bx	lr

000d66ca <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d66ca:	7441      	strb	r1, [r0, #17]
   d66cc:	4770      	bx	lr

000d66ce <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d66ce:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d66d0:	7c00      	ldrb	r0, [r0, #16]
   d66d2:	f7ff fb59 	bl	d5d88 <HAL_USART_Available_Data_For_Write>
}
   d66d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d66da:	bd08      	pop	{r3, pc}

000d66dc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d66dc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d66de:	7c00      	ldrb	r0, [r0, #16]
   d66e0:	f7ff fb2a 	bl	d5d38 <HAL_USART_Available_Data>
}
   d66e4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d66e8:	bd08      	pop	{r3, pc}

000d66ea <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d66ea:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d66ec:	7c00      	ldrb	r0, [r0, #16]
   d66ee:	f7ff fb33 	bl	d5d58 <HAL_USART_Peek_Data>
}
   d66f2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d66f6:	bf28      	it	cs
   d66f8:	f04f 30ff 	movcs.w	r0, #4294967295
   d66fc:	bd08      	pop	{r3, pc}

000d66fe <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d66fe:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d6700:	7c00      	ldrb	r0, [r0, #16]
   d6702:	f7ff fb21 	bl	d5d48 <HAL_USART_Read_Data>
}
   d6706:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d670a:	bf28      	it	cs
   d670c:	f04f 30ff 	movcs.w	r0, #4294967295
   d6710:	bd08      	pop	{r3, pc}

000d6712 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6712:	7c00      	ldrb	r0, [r0, #16]
   d6714:	f7ff bb28 	b.w	d5d68 <HAL_USART_Flush_Data>

000d6718 <_ZN11USARTSerialD0Ev>:
   d6718:	b510      	push	{r4, lr}
   d671a:	2114      	movs	r1, #20
   d671c:	4604      	mov	r4, r0
   d671e:	f000 fb0f 	bl	d6d40 <_ZdlPvj>
   d6722:	4620      	mov	r0, r4
   d6724:	bd10      	pop	{r4, pc}

000d6726 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6726:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6728:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d672a:	4604      	mov	r4, r0
   d672c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d672e:	b925      	cbnz	r5, d673a <_ZN11USARTSerial5writeEh+0x14>
   d6730:	7c00      	ldrb	r0, [r0, #16]
   d6732:	f7ff fb29 	bl	d5d88 <HAL_USART_Available_Data_For_Write>
   d6736:	2800      	cmp	r0, #0
   d6738:	dd05      	ble.n	d6746 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d673a:	4631      	mov	r1, r6
   d673c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d673e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6742:	f7ff baf1 	b.w	d5d28 <HAL_USART_Write_Data>
  }
  return 0;
}
   d6746:	4628      	mov	r0, r5
   d6748:	bd70      	pop	{r4, r5, r6, pc}
	...

000d674c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d674c:	b510      	push	{r4, lr}
   d674e:	4604      	mov	r4, r0
   d6750:	4608      	mov	r0, r1
   d6752:	4611      	mov	r1, r2
   d6754:	2200      	movs	r2, #0
   d6756:	6062      	str	r2, [r4, #4]
   d6758:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d675c:	60a2      	str	r2, [r4, #8]
   d675e:	4a05      	ldr	r2, [pc, #20]	; (d6774 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6760:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6762:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6764:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6766:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6768:	461a      	mov	r2, r3
   d676a:	f7ff fad5 	bl	d5d18 <HAL_USART_Init>
}
   d676e:	4620      	mov	r0, r4
   d6770:	bd10      	pop	{r4, pc}
   d6772:	bf00      	nop
   d6774:	000d7344 	.word	0x000d7344

000d6778 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6778:	7c00      	ldrb	r0, [r0, #16]
   d677a:	f7ff bafd 	b.w	d5d78 <HAL_USART_Is_Enabled>
	...

000d6780 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6780:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6782:	4d0c      	ldr	r5, [pc, #48]	; (d67b4 <_Z22__fetch_global_Serial1v+0x34>)
   d6784:	6829      	ldr	r1, [r5, #0]
   d6786:	f011 0401 	ands.w	r4, r1, #1
   d678a:	d111      	bne.n	d67b0 <_Z22__fetch_global_Serial1v+0x30>
   d678c:	4628      	mov	r0, r5
   d678e:	f7fd fc86 	bl	d409e <__cxa_guard_acquire>
   d6792:	b168      	cbz	r0, d67b0 <_Z22__fetch_global_Serial1v+0x30>
   d6794:	4a08      	ldr	r2, [pc, #32]	; (d67b8 <_Z22__fetch_global_Serial1v+0x38>)
   d6796:	4b09      	ldr	r3, [pc, #36]	; (d67bc <_Z22__fetch_global_Serial1v+0x3c>)
   d6798:	4809      	ldr	r0, [pc, #36]	; (d67c0 <_Z22__fetch_global_Serial1v+0x40>)
   d679a:	4621      	mov	r1, r4
   d679c:	f7ff ffd6 	bl	d674c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d67a0:	4628      	mov	r0, r5
   d67a2:	f7fd fc81 	bl	d40a8 <__cxa_guard_release>
   d67a6:	4a07      	ldr	r2, [pc, #28]	; (d67c4 <_Z22__fetch_global_Serial1v+0x44>)
   d67a8:	4907      	ldr	r1, [pc, #28]	; (d67c8 <_Z22__fetch_global_Serial1v+0x48>)
   d67aa:	4805      	ldr	r0, [pc, #20]	; (d67c0 <_Z22__fetch_global_Serial1v+0x40>)
   d67ac:	f000 faba 	bl	d6d24 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d67b0:	4803      	ldr	r0, [pc, #12]	; (d67c0 <_Z22__fetch_global_Serial1v+0x40>)
   d67b2:	bd38      	pop	{r3, r4, r5, pc}
   d67b4:	2003e4c4 	.word	0x2003e4c4
   d67b8:	2003e4c8 	.word	0x2003e4c8
   d67bc:	2003e440 	.word	0x2003e440
   d67c0:	2003e42c 	.word	0x2003e42c
   d67c4:	2003dedc 	.word	0x2003dedc
   d67c8:	000d66c9 	.word	0x000d66c9

000d67cc <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d67cc:	4770      	bx	lr

000d67ce <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d67ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d67d0:	4606      	mov	r6, r0
   d67d2:	4615      	mov	r5, r2
   d67d4:	460c      	mov	r4, r1
   d67d6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d67d8:	42bc      	cmp	r4, r7
   d67da:	d006      	beq.n	d67ea <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d67dc:	6833      	ldr	r3, [r6, #0]
   d67de:	f814 1b01 	ldrb.w	r1, [r4], #1
   d67e2:	689b      	ldr	r3, [r3, #8]
   d67e4:	4630      	mov	r0, r6
   d67e6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d67e8:	e7f6      	b.n	d67d8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d67ea:	4628      	mov	r0, r5
   d67ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d67ee <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d67ee:	2200      	movs	r2, #0
   d67f0:	7c00      	ldrb	r0, [r0, #16]
   d67f2:	f7ff bad1 	b.w	d5d98 <HAL_I2C_Write_Data>

000d67f6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d67f6:	2100      	movs	r1, #0
   d67f8:	7c00      	ldrb	r0, [r0, #16]
   d67fa:	f7ff bad5 	b.w	d5da8 <HAL_I2C_Available_Data>

000d67fe <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d67fe:	2100      	movs	r1, #0
   d6800:	7c00      	ldrb	r0, [r0, #16]
   d6802:	f7ff bad9 	b.w	d5db8 <HAL_I2C_Read_Data>

000d6806 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6806:	2100      	movs	r1, #0
   d6808:	7c00      	ldrb	r0, [r0, #16]
   d680a:	f7ff badd 	b.w	d5dc8 <HAL_I2C_Peek_Data>

000d680e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d680e:	2100      	movs	r1, #0
   d6810:	7c00      	ldrb	r0, [r0, #16]
   d6812:	f7ff bae1 	b.w	d5dd8 <HAL_I2C_Flush_Data>

000d6816 <_ZN7TwoWireD0Ev>:
   d6816:	b510      	push	{r4, lr}
   d6818:	2114      	movs	r1, #20
   d681a:	4604      	mov	r4, r0
   d681c:	f000 fa90 	bl	d6d40 <_ZdlPvj>
   d6820:	4620      	mov	r0, r4
   d6822:	bd10      	pop	{r4, pc}

000d6824 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6824:	b510      	push	{r4, lr}
   d6826:	4604      	mov	r4, r0
   d6828:	2300      	movs	r3, #0
   d682a:	6063      	str	r3, [r4, #4]
   d682c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6830:	60a3      	str	r3, [r4, #8]
   d6832:	4b04      	ldr	r3, [pc, #16]	; (d6844 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d6834:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d6836:	4608      	mov	r0, r1
   d6838:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d683a:	4611      	mov	r1, r2
   d683c:	f7ff fadc 	bl	d5df8 <HAL_I2C_Init>
}
   d6840:	4620      	mov	r0, r4
   d6842:	bd10      	pop	{r4, pc}
   d6844:	000d7374 	.word	0x000d7374

000d6848 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6848:	2100      	movs	r1, #0
   d684a:	7c00      	ldrb	r0, [r0, #16]
   d684c:	f7ff bacc 	b.w	d5de8 <HAL_I2C_Is_Enabled>

000d6850 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6850:	2200      	movs	r2, #0
   d6852:	4611      	mov	r1, r2
   d6854:	6840      	ldr	r0, [r0, #4]
   d6856:	f7ff bb6b 	b.w	d5f30 <network_listening>

000d685a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d685a:	2200      	movs	r2, #0
   d685c:	4611      	mov	r1, r2
   d685e:	6840      	ldr	r0, [r0, #4]
   d6860:	f7ff bb76 	b.w	d5f50 <network_get_listen_timeout>

000d6864 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6864:	2200      	movs	r2, #0
   d6866:	6840      	ldr	r0, [r0, #4]
   d6868:	f7ff bb6a 	b.w	d5f40 <network_set_listen_timeout>

000d686c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d686c:	2200      	movs	r2, #0
   d686e:	f081 0101 	eor.w	r1, r1, #1
   d6872:	6840      	ldr	r0, [r0, #4]
   d6874:	f7ff bb54 	b.w	d5f20 <network_listen>

000d6878 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6878:	2300      	movs	r3, #0
   d687a:	461a      	mov	r2, r3
   d687c:	2101      	movs	r1, #1
   d687e:	6840      	ldr	r0, [r0, #4]
   d6880:	f7ff bb46 	b.w	d5f10 <network_off>

000d6884 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6884:	2300      	movs	r3, #0
   d6886:	461a      	mov	r2, r3
   d6888:	4619      	mov	r1, r3
   d688a:	6840      	ldr	r0, [r0, #4]
   d688c:	f7ff bb38 	b.w	d5f00 <network_on>

000d6890 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6890:	2200      	movs	r2, #0
   d6892:	4611      	mov	r1, r2
   d6894:	6840      	ldr	r0, [r0, #4]
   d6896:	f7ff bb2b 	b.w	d5ef0 <network_ready>

000d689a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d689a:	2200      	movs	r2, #0
   d689c:	4611      	mov	r1, r2
   d689e:	6840      	ldr	r0, [r0, #4]
   d68a0:	f7ff bb16 	b.w	d5ed0 <network_connecting>

000d68a4 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d68a4:	2200      	movs	r2, #0
   d68a6:	2102      	movs	r1, #2
   d68a8:	6840      	ldr	r0, [r0, #4]
   d68aa:	f7ff bb19 	b.w	d5ee0 <network_disconnect>

000d68ae <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d68ae:	2300      	movs	r3, #0
   d68b0:	461a      	mov	r2, r3
   d68b2:	6840      	ldr	r0, [r0, #4]
   d68b4:	f7ff bb04 	b.w	d5ec0 <network_connect>

000d68b8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d68b8:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d68ba:	4605      	mov	r5, r0
   d68bc:	b188      	cbz	r0, d68e2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d68be:	6804      	ldr	r4, [r0, #0]
   d68c0:	b14c      	cbz	r4, d68d6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d68c2:	68a3      	ldr	r3, [r4, #8]
   d68c4:	b11b      	cbz	r3, d68ce <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d68c6:	2203      	movs	r2, #3
   d68c8:	4621      	mov	r1, r4
   d68ca:	4620      	mov	r0, r4
   d68cc:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d68ce:	2110      	movs	r1, #16
   d68d0:	4620      	mov	r0, r4
   d68d2:	f000 fa35 	bl	d6d40 <_ZdlPvj>
   d68d6:	4628      	mov	r0, r5
   d68d8:	2114      	movs	r1, #20
      }
   d68da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d68de:	f000 ba2f 	b.w	d6d40 <_ZdlPvj>
   d68e2:	bd38      	pop	{r3, r4, r5, pc}

000d68e4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d68e4:	b110      	cbz	r0, d68ec <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d68e6:	6803      	ldr	r3, [r0, #0]
   d68e8:	685b      	ldr	r3, [r3, #4]
   d68ea:	4718      	bx	r3
   d68ec:	4770      	bx	lr

000d68ee <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d68ee:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d68f0:	6803      	ldr	r3, [r0, #0]
   d68f2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d68f4:	b1bb      	cbz	r3, d6926 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d68f6:	6858      	ldr	r0, [r3, #4]
   d68f8:	f7ff f9de 	bl	d5cb8 <os_thread_is_current>
   d68fc:	b978      	cbnz	r0, d691e <_ZN6ThreadD1Ev+0x30>
   d68fe:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6900:	7c5a      	ldrb	r2, [r3, #17]
   d6902:	b912      	cbnz	r2, d690a <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6904:	6858      	ldr	r0, [r3, #4]
   d6906:	f7ff f9df 	bl	d5cc8 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d690a:	6823      	ldr	r3, [r4, #0]
   d690c:	6858      	ldr	r0, [r3, #4]
   d690e:	f7ff f9e3 	bl	d5cd8 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6912:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6914:	2300      	movs	r3, #0
   d6916:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6918:	b128      	cbz	r0, d6926 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d691a:	f7ff ffcd 	bl	d68b8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d691e:	6820      	ldr	r0, [r4, #0]
   d6920:	b108      	cbz	r0, d6926 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6922:	f7ff ffc9 	bl	d68b8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6926:	4620      	mov	r0, r4
   d6928:	bd10      	pop	{r4, pc}

000d692a <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d692a:	b538      	push	{r3, r4, r5, lr}
   d692c:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d692e:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d6932:	b108      	cbz	r0, d6938 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6934:	f7fd fbb1 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6938:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d693c:	b108      	cbz	r0, d6942 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d693e:	f7ff f9db 	bl	d5cf8 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6942:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d6946:	b135      	cbz	r5, d6956 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6948:	4628      	mov	r0, r5
   d694a:	f7ff ffd0 	bl	d68ee <_ZN6ThreadD1Ev>
   d694e:	2104      	movs	r1, #4
   d6950:	4628      	mov	r0, r5
   d6952:	f000 f9f5 	bl	d6d40 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6956:	6820      	ldr	r0, [r4, #0]
   d6958:	b108      	cbz	r0, d695e <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d695a:	f7ff ffc3 	bl	d68e4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d695e:	4620      	mov	r0, r4
   d6960:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6964 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6964:	b510      	push	{r4, lr}
   d6966:	4b04      	ldr	r3, [pc, #16]	; (d6978 <_ZN5spark9MeshClassD1Ev+0x14>)
   d6968:	4604      	mov	r4, r0
   d696a:	f840 3b08 	str.w	r3, [r0], #8
   d696e:	f7ff ffdc 	bl	d692a <_ZN5spark11MeshPublishD1Ev>
   d6972:	4620      	mov	r0, r4
   d6974:	bd10      	pop	{r4, pc}
   d6976:	bf00      	nop
   d6978:	000d739c 	.word	0x000d739c

000d697c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d697c:	b538      	push	{r3, r4, r5, lr}
   d697e:	4c0e      	ldr	r4, [pc, #56]	; (d69b8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6980:	4b0e      	ldr	r3, [pc, #56]	; (d69bc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6982:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6984:	2500      	movs	r5, #0
   d6986:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6988:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d698c:	6063      	str	r3, [r4, #4]
   d698e:	60a5      	str	r5, [r4, #8]
   d6990:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6994:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6998:	f7ff f9a6 	bl	d5ce8 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d699c:	4b08      	ldr	r3, [pc, #32]	; (d69c0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d699e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d69a2:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d69a6:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d69a8:	4620      	mov	r0, r4
   d69aa:	4a06      	ldr	r2, [pc, #24]	; (d69c4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d69ac:	4906      	ldr	r1, [pc, #24]	; (d69c8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d69ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d69b2:	f000 b9b7 	b.w	d6d24 <__aeabi_atexit>
   d69b6:	bf00      	nop
   d69b8:	2003e54c 	.word	0x2003e54c
   d69bc:	000d7404 	.word	0x000d7404
   d69c0:	000d739c 	.word	0x000d739c
   d69c4:	2003dedc 	.word	0x2003dedc
   d69c8:	000d6965 	.word	0x000d6965

000d69cc <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d69cc:	2200      	movs	r2, #0
   d69ce:	4611      	mov	r1, r2
   d69d0:	6840      	ldr	r0, [r0, #4]
   d69d2:	f7ff ba8d 	b.w	d5ef0 <network_ready>

000d69d6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d69d6:	2200      	movs	r2, #0
   d69d8:	4611      	mov	r1, r2
   d69da:	6840      	ldr	r0, [r0, #4]
   d69dc:	f7ff baa8 	b.w	d5f30 <network_listening>

000d69e0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d69e0:	2200      	movs	r2, #0
   d69e2:	4611      	mov	r1, r2
   d69e4:	6840      	ldr	r0, [r0, #4]
   d69e6:	f7ff bab3 	b.w	d5f50 <network_get_listen_timeout>

000d69ea <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d69ea:	2200      	movs	r2, #0
   d69ec:	6840      	ldr	r0, [r0, #4]
   d69ee:	f7ff baa7 	b.w	d5f40 <network_set_listen_timeout>

000d69f2 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d69f2:	2200      	movs	r2, #0
   d69f4:	f081 0101 	eor.w	r1, r1, #1
   d69f8:	6840      	ldr	r0, [r0, #4]
   d69fa:	f7ff ba91 	b.w	d5f20 <network_listen>

000d69fe <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d69fe:	2300      	movs	r3, #0
   d6a00:	461a      	mov	r2, r3
   d6a02:	4619      	mov	r1, r3
   d6a04:	6840      	ldr	r0, [r0, #4]
   d6a06:	f7ff ba83 	b.w	d5f10 <network_off>

000d6a0a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d6a0a:	2300      	movs	r3, #0
   d6a0c:	461a      	mov	r2, r3
   d6a0e:	4619      	mov	r1, r3
   d6a10:	6840      	ldr	r0, [r0, #4]
   d6a12:	f7ff ba75 	b.w	d5f00 <network_on>

000d6a16 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6a16:	2200      	movs	r2, #0
   d6a18:	4611      	mov	r1, r2
   d6a1a:	6840      	ldr	r0, [r0, #4]
   d6a1c:	f7ff ba58 	b.w	d5ed0 <network_connecting>

000d6a20 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6a20:	2200      	movs	r2, #0
   d6a22:	2102      	movs	r1, #2
   d6a24:	6840      	ldr	r0, [r0, #4]
   d6a26:	f7ff ba5b 	b.w	d5ee0 <network_disconnect>

000d6a2a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6a2a:	2300      	movs	r3, #0
   d6a2c:	461a      	mov	r2, r3
   d6a2e:	6840      	ldr	r0, [r0, #4]
   d6a30:	f7ff ba46 	b.w	d5ec0 <network_connect>

000d6a34 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6a34:	4b02      	ldr	r3, [pc, #8]	; (d6a40 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6a36:	2204      	movs	r2, #4
   d6a38:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d6a3a:	4a02      	ldr	r2, [pc, #8]	; (d6a44 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d6a3c:	601a      	str	r2, [r3, #0]
   d6a3e:	4770      	bx	lr
   d6a40:	2003e720 	.word	0x2003e720
   d6a44:	000d73d0 	.word	0x000d73d0

000d6a48 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6a48:	2300      	movs	r3, #0
   d6a4a:	461a      	mov	r2, r3
   d6a4c:	6840      	ldr	r0, [r0, #4]
   d6a4e:	f7ff ba37 	b.w	d5ec0 <network_connect>

000d6a52 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6a52:	2200      	movs	r2, #0
   d6a54:	2102      	movs	r1, #2
   d6a56:	6840      	ldr	r0, [r0, #4]
   d6a58:	f7ff ba42 	b.w	d5ee0 <network_disconnect>

000d6a5c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6a5c:	2200      	movs	r2, #0
   d6a5e:	4611      	mov	r1, r2
   d6a60:	6840      	ldr	r0, [r0, #4]
   d6a62:	f7ff ba35 	b.w	d5ed0 <network_connecting>

000d6a66 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6a66:	2200      	movs	r2, #0
   d6a68:	4611      	mov	r1, r2
   d6a6a:	6840      	ldr	r0, [r0, #4]
   d6a6c:	f7ff ba40 	b.w	d5ef0 <network_ready>

000d6a70 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6a70:	2300      	movs	r3, #0
   d6a72:	461a      	mov	r2, r3
   d6a74:	4619      	mov	r1, r3
   d6a76:	6840      	ldr	r0, [r0, #4]
   d6a78:	f7ff ba42 	b.w	d5f00 <network_on>

000d6a7c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6a7c:	2300      	movs	r3, #0
   d6a7e:	461a      	mov	r2, r3
   d6a80:	4619      	mov	r1, r3
   d6a82:	6840      	ldr	r0, [r0, #4]
   d6a84:	f7ff ba44 	b.w	d5f10 <network_off>

000d6a88 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6a88:	2200      	movs	r2, #0
   d6a8a:	f081 0101 	eor.w	r1, r1, #1
   d6a8e:	6840      	ldr	r0, [r0, #4]
   d6a90:	f7ff ba46 	b.w	d5f20 <network_listen>

000d6a94 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6a94:	2200      	movs	r2, #0
   d6a96:	6840      	ldr	r0, [r0, #4]
   d6a98:	f7ff ba52 	b.w	d5f40 <network_set_listen_timeout>

000d6a9c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6a9c:	2200      	movs	r2, #0
   d6a9e:	4611      	mov	r1, r2
   d6aa0:	6840      	ldr	r0, [r0, #4]
   d6aa2:	f7ff ba55 	b.w	d5f50 <network_get_listen_timeout>

000d6aa6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6aa6:	2200      	movs	r2, #0
   d6aa8:	4611      	mov	r1, r2
   d6aaa:	6840      	ldr	r0, [r0, #4]
   d6aac:	f7ff ba40 	b.w	d5f30 <network_listening>

000d6ab0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6ab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6ab4:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6ab6:	b095      	sub	sp, #84	; 0x54
   d6ab8:	4616      	mov	r6, r2
   d6aba:	460d      	mov	r5, r1
   d6abc:	4607      	mov	r7, r0
    IPAddress addr;
   d6abe:	f7ff fd43 	bl	d6548 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6ac2:	4621      	mov	r1, r4
   d6ac4:	2220      	movs	r2, #32
   d6ac6:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6ac8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6aca:	f000 fabd 	bl	d7048 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6ace:	2340      	movs	r3, #64	; 0x40
   d6ad0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6ad2:	4621      	mov	r1, r4
   d6ad4:	466b      	mov	r3, sp
   d6ad6:	aa0c      	add	r2, sp, #48	; 0x30
   d6ad8:	4630      	mov	r0, r6
   d6ada:	f7ff f845 	bl	d5b68 <netdb_getaddrinfo>
    if (!r) {
   d6ade:	4604      	mov	r4, r0
   d6ae0:	2800      	cmp	r0, #0
   d6ae2:	d144      	bne.n	d6b6e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6ae4:	4602      	mov	r2, r0
   d6ae6:	2101      	movs	r1, #1
   d6ae8:	6868      	ldr	r0, [r5, #4]
   d6aea:	f7ff fa01 	bl	d5ef0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6aee:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6af0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6af2:	4622      	mov	r2, r4
   d6af4:	6868      	ldr	r0, [r5, #4]
   d6af6:	f7ff f9fb 	bl	d5ef0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6afa:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6afc:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6afe:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6b00:	2e00      	cmp	r6, #0
   d6b02:	d034      	beq.n	d6b6e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6b04:	2900      	cmp	r1, #0
   d6b06:	d132      	bne.n	d6b6e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6b08:	6873      	ldr	r3, [r6, #4]
   d6b0a:	2b02      	cmp	r3, #2
   d6b0c:	d002      	beq.n	d6b14 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6b0e:	2b0a      	cmp	r3, #10
   d6b10:	d009      	beq.n	d6b26 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d6b12:	e02a      	b.n	d6b6a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6b14:	f1b8 0f00 	cmp.w	r8, #0
   d6b18:	d027      	beq.n	d6b6a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6b1a:	6971      	ldr	r1, [r6, #20]
   d6b1c:	4638      	mov	r0, r7
   d6b1e:	3104      	adds	r1, #4
   d6b20:	f7ff fd3f 	bl	d65a2 <_ZN9IPAddressaSEPKh>
   d6b24:	e020      	b.n	d6b68 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6b26:	f1b9 0f00 	cmp.w	r9, #0
   d6b2a:	d01e      	beq.n	d6b6a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6b2c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6b2e:	2211      	movs	r2, #17
   d6b30:	a801      	add	r0, sp, #4
   d6b32:	f000 fa89 	bl	d7048 <memset>
                    a.v = 6;
   d6b36:	2306      	movs	r3, #6
   d6b38:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6b3c:	ad01      	add	r5, sp, #4
   d6b3e:	f104 0308 	add.w	r3, r4, #8
   d6b42:	3418      	adds	r4, #24
   d6b44:	6818      	ldr	r0, [r3, #0]
   d6b46:	6859      	ldr	r1, [r3, #4]
   d6b48:	462a      	mov	r2, r5
   d6b4a:	c203      	stmia	r2!, {r0, r1}
   d6b4c:	3308      	adds	r3, #8
   d6b4e:	42a3      	cmp	r3, r4
   d6b50:	4615      	mov	r5, r2
   d6b52:	d1f7      	bne.n	d6b44 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6b54:	a901      	add	r1, sp, #4
   d6b56:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6b58:	ad07      	add	r5, sp, #28
   d6b5a:	f7ff fd03 	bl	d6564 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6b5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6b60:	1d3c      	adds	r4, r7, #4
   d6b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6b64:	682b      	ldr	r3, [r5, #0]
   d6b66:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6b68:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6b6a:	69f6      	ldr	r6, [r6, #28]
   d6b6c:	e7c8      	b.n	d6b00 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6b6e:	9800      	ldr	r0, [sp, #0]
   d6b70:	f7fe fff2 	bl	d5b58 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6b74:	4638      	mov	r0, r7
   d6b76:	b015      	add	sp, #84	; 0x54
   d6b78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6b7c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6b7c:	4b02      	ldr	r3, [pc, #8]	; (d6b88 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6b7e:	4a03      	ldr	r2, [pc, #12]	; (d6b8c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6b80:	601a      	str	r2, [r3, #0]
   d6b82:	2200      	movs	r2, #0
   d6b84:	605a      	str	r2, [r3, #4]
   d6b86:	4770      	bx	lr
   d6b88:	2003e728 	.word	0x2003e728
   d6b8c:	000d7404 	.word	0x000d7404

000d6b90 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d6b90:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6b92:	4e18      	ldr	r6, [pc, #96]	; (d6bf4 <pinAvailable+0x64>)
   d6b94:	6831      	ldr	r1, [r6, #0]
   d6b96:	f011 0501 	ands.w	r5, r1, #1
   d6b9a:	4604      	mov	r4, r0
   d6b9c:	d10a      	bne.n	d6bb4 <pinAvailable+0x24>
   d6b9e:	4630      	mov	r0, r6
   d6ba0:	f7fd fa7d 	bl	d409e <__cxa_guard_acquire>
   d6ba4:	b130      	cbz	r0, d6bb4 <pinAvailable+0x24>
   d6ba6:	4629      	mov	r1, r5
   d6ba8:	4813      	ldr	r0, [pc, #76]	; (d6bf8 <pinAvailable+0x68>)
   d6baa:	f7ff fa45 	bl	d6038 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6bae:	4630      	mov	r0, r6
   d6bb0:	f7fd fa7a 	bl	d40a8 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d6bb4:	4810      	ldr	r0, [pc, #64]	; (d6bf8 <pinAvailable+0x68>)
   d6bb6:	f7ff fafc 	bl	d61b2 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6bba:	b128      	cbz	r0, d6bc8 <pinAvailable+0x38>
   d6bbc:	f1a4 030b 	sub.w	r3, r4, #11
   d6bc0:	2b02      	cmp	r3, #2
   d6bc2:	d801      	bhi.n	d6bc8 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d6bc4:	2000      	movs	r0, #0
   d6bc6:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6bc8:	f000 f886 	bl	d6cd8 <_Z19__fetch_global_Wirev>
   d6bcc:	f7ff fe3c 	bl	d6848 <_ZN7TwoWire9isEnabledEv>
   d6bd0:	b108      	cbz	r0, d6bd6 <pinAvailable+0x46>
   d6bd2:	2c01      	cmp	r4, #1
   d6bd4:	d9f6      	bls.n	d6bc4 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6bd6:	f7ff fdd3 	bl	d6780 <_Z22__fetch_global_Serial1v>
   d6bda:	f7ff fdcd 	bl	d6778 <_ZN11USARTSerial9isEnabledEv>
   d6bde:	b118      	cbz	r0, d6be8 <pinAvailable+0x58>
   d6be0:	f1a4 0309 	sub.w	r3, r4, #9
   d6be4:	2b01      	cmp	r3, #1
   d6be6:	d9ed      	bls.n	d6bc4 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6be8:	2c23      	cmp	r4, #35	; 0x23
   d6bea:	bf8c      	ite	hi
   d6bec:	2000      	movhi	r0, #0
   d6bee:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6bf0:	bd70      	pop	{r4, r5, r6, pc}
   d6bf2:	bf00      	nop
   d6bf4:	2003dee0 	.word	0x2003dee0
   d6bf8:	2003dee4 	.word	0x2003dee4

000d6bfc <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6bfc:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6bfe:	b538      	push	{r3, r4, r5, lr}
   d6c00:	4604      	mov	r4, r0
   d6c02:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6c04:	d80a      	bhi.n	d6c1c <pinMode+0x20>
   d6c06:	29ff      	cmp	r1, #255	; 0xff
   d6c08:	d008      	beq.n	d6c1c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6c0a:	f7ff ffc1 	bl	d6b90 <pinAvailable>
   d6c0e:	b128      	cbz	r0, d6c1c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6c10:	4629      	mov	r1, r5
   d6c12:	4620      	mov	r0, r4
}
   d6c14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6c18:	f7fe bfbe 	b.w	d5b98 <HAL_Pin_Mode>
   d6c1c:	bd38      	pop	{r3, r4, r5, pc}

000d6c1e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6c1e:	b538      	push	{r3, r4, r5, lr}
   d6c20:	4604      	mov	r4, r0
   d6c22:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6c24:	f7fe ffc0 	bl	d5ba8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6c28:	28ff      	cmp	r0, #255	; 0xff
   d6c2a:	d010      	beq.n	d6c4e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6c2c:	2806      	cmp	r0, #6
   d6c2e:	d804      	bhi.n	d6c3a <digitalWrite+0x1c>
   d6c30:	234d      	movs	r3, #77	; 0x4d
   d6c32:	fa23 f000 	lsr.w	r0, r3, r0
   d6c36:	07c3      	lsls	r3, r0, #31
   d6c38:	d409      	bmi.n	d6c4e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6c3a:	4620      	mov	r0, r4
   d6c3c:	f7ff ffa8 	bl	d6b90 <pinAvailable>
   d6c40:	b128      	cbz	r0, d6c4e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6c42:	4629      	mov	r1, r5
   d6c44:	4620      	mov	r0, r4
}
   d6c46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6c4a:	f7fe bfb5 	b.w	d5bb8 <HAL_GPIO_Write>
   d6c4e:	bd38      	pop	{r3, r4, r5, pc}

000d6c50 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d6c50:	b510      	push	{r4, lr}
   d6c52:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6c54:	f7fe ffa8 	bl	d5ba8 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d6c58:	3804      	subs	r0, #4
   d6c5a:	b2c0      	uxtb	r0, r0
   d6c5c:	2801      	cmp	r0, #1
   d6c5e:	d908      	bls.n	d6c72 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d6c60:	4620      	mov	r0, r4
   d6c62:	f7ff ff95 	bl	d6b90 <pinAvailable>
   d6c66:	b120      	cbz	r0, d6c72 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6c68:	4620      	mov	r0, r4
}
   d6c6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d6c6e:	f7fe bfab 	b.w	d5bc8 <HAL_GPIO_Read>
}
   d6c72:	2000      	movs	r0, #0
   d6c74:	bd10      	pop	{r4, pc}

000d6c76 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d6c76:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d6c78:	b510      	push	{r4, lr}
   d6c7a:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d6c7c:	bf9c      	itt	ls
   d6c7e:	340e      	addls	r4, #14
   d6c80:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6c82:	4620      	mov	r0, r4
   d6c84:	f7ff ff84 	bl	d6b90 <pinAvailable>
   d6c88:	b150      	cbz	r0, d6ca0 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d6c8a:	2103      	movs	r1, #3
   d6c8c:	4620      	mov	r0, r4
   d6c8e:	f7fe ff7b 	bl	d5b88 <HAL_Validate_Pin_Function>
   d6c92:	2803      	cmp	r0, #3
   d6c94:	d104      	bne.n	d6ca0 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6c96:	4620      	mov	r0, r4
}
   d6c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d6c9c:	f7fe bf9c 	b.w	d5bd8 <HAL_ADC_Read>
}
   d6ca0:	2000      	movs	r0, #0
   d6ca2:	bd10      	pop	{r4, pc}

000d6ca4 <_Z17acquireWireBufferv>:
   d6ca4:	b570      	push	{r4, r5, r6, lr}
   d6ca6:	4604      	mov	r4, r0
   d6ca8:	2514      	movs	r5, #20
   d6caa:	462a      	mov	r2, r5
   d6cac:	4e09      	ldr	r6, [pc, #36]	; (d6cd4 <_Z17acquireWireBufferv+0x30>)
   d6cae:	2100      	movs	r1, #0
   d6cb0:	f000 f9ca 	bl	d7048 <memset>
   d6cb4:	8025      	strh	r5, [r4, #0]
   d6cb6:	2520      	movs	r5, #32
   d6cb8:	4631      	mov	r1, r6
   d6cba:	60a5      	str	r5, [r4, #8]
   d6cbc:	6125      	str	r5, [r4, #16]
   d6cbe:	4628      	mov	r0, r5
   d6cc0:	f000 f840 	bl	d6d44 <_ZnajRKSt9nothrow_t>
   d6cc4:	4631      	mov	r1, r6
   d6cc6:	6060      	str	r0, [r4, #4]
   d6cc8:	4628      	mov	r0, r5
   d6cca:	f000 f83b 	bl	d6d44 <_ZnajRKSt9nothrow_t>
   d6cce:	60e0      	str	r0, [r4, #12]
   d6cd0:	4620      	mov	r0, r4
   d6cd2:	bd70      	pop	{r4, r5, r6, pc}
   d6cd4:	000d7430 	.word	0x000d7430

000d6cd8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6cd8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6cda:	4d0e      	ldr	r5, [pc, #56]	; (d6d14 <_Z19__fetch_global_Wirev+0x3c>)
   d6cdc:	6829      	ldr	r1, [r5, #0]
   d6cde:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6ce2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6ce4:	d113      	bne.n	d6d0e <_Z19__fetch_global_Wirev+0x36>
   d6ce6:	4628      	mov	r0, r5
   d6ce8:	f7fd f9d9 	bl	d409e <__cxa_guard_acquire>
   d6cec:	b178      	cbz	r0, d6d0e <_Z19__fetch_global_Wirev+0x36>
   d6cee:	a801      	add	r0, sp, #4
   d6cf0:	f7ff ffd8 	bl	d6ca4 <_Z17acquireWireBufferv>
   d6cf4:	aa01      	add	r2, sp, #4
   d6cf6:	4621      	mov	r1, r4
   d6cf8:	4807      	ldr	r0, [pc, #28]	; (d6d18 <_Z19__fetch_global_Wirev+0x40>)
   d6cfa:	f7ff fd93 	bl	d6824 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d6cfe:	4628      	mov	r0, r5
   d6d00:	f7fd f9d2 	bl	d40a8 <__cxa_guard_release>
   d6d04:	4a05      	ldr	r2, [pc, #20]	; (d6d1c <_Z19__fetch_global_Wirev+0x44>)
   d6d06:	4906      	ldr	r1, [pc, #24]	; (d6d20 <_Z19__fetch_global_Wirev+0x48>)
   d6d08:	4803      	ldr	r0, [pc, #12]	; (d6d18 <_Z19__fetch_global_Wirev+0x40>)
   d6d0a:	f000 f80b 	bl	d6d24 <__aeabi_atexit>
	return wire;
}
   d6d0e:	4802      	ldr	r0, [pc, #8]	; (d6d18 <_Z19__fetch_global_Wirev+0x40>)
   d6d10:	b007      	add	sp, #28
   d6d12:	bd30      	pop	{r4, r5, pc}
   d6d14:	2003e734 	.word	0x2003e734
   d6d18:	2003e738 	.word	0x2003e738
   d6d1c:	2003dedc 	.word	0x2003dedc
   d6d20:	000d67cd 	.word	0x000d67cd

000d6d24 <__aeabi_atexit>:
   d6d24:	460b      	mov	r3, r1
   d6d26:	4601      	mov	r1, r0
   d6d28:	4618      	mov	r0, r3
   d6d2a:	f000 b965 	b.w	d6ff8 <__cxa_atexit>
	...

000d6d30 <_ZSt15get_new_handlerv>:
   d6d30:	4b02      	ldr	r3, [pc, #8]	; (d6d3c <_ZSt15get_new_handlerv+0xc>)
   d6d32:	6818      	ldr	r0, [r3, #0]
   d6d34:	f3bf 8f5f 	dmb	sy
   d6d38:	4770      	bx	lr
   d6d3a:	bf00      	nop
   d6d3c:	2003e74c 	.word	0x2003e74c

000d6d40 <_ZdlPvj>:
   d6d40:	f7fd b9a9 	b.w	d4096 <_ZdlPv>

000d6d44 <_ZnajRKSt9nothrow_t>:
   d6d44:	f000 b800 	b.w	d6d48 <_ZnwjRKSt9nothrow_t>

000d6d48 <_ZnwjRKSt9nothrow_t>:
   d6d48:	b510      	push	{r4, lr}
   d6d4a:	2800      	cmp	r0, #0
   d6d4c:	bf14      	ite	ne
   d6d4e:	4604      	movne	r4, r0
   d6d50:	2401      	moveq	r4, #1
   d6d52:	4620      	mov	r0, r4
   d6d54:	f7ff f914 	bl	d5f80 <malloc>
   d6d58:	b920      	cbnz	r0, d6d64 <_ZnwjRKSt9nothrow_t+0x1c>
   d6d5a:	f7ff ffe9 	bl	d6d30 <_ZSt15get_new_handlerv>
   d6d5e:	b108      	cbz	r0, d6d64 <_ZnwjRKSt9nothrow_t+0x1c>
   d6d60:	4780      	blx	r0
   d6d62:	e7f6      	b.n	d6d52 <_ZnwjRKSt9nothrow_t+0xa>
   d6d64:	bd10      	pop	{r4, pc}
	...

000d6d68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6d68:	4b18      	ldr	r3, [pc, #96]	; (d6dcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6d6a:	681a      	ldr	r2, [r3, #0]
   d6d6c:	07d1      	lsls	r1, r2, #31
   d6d6e:	bf5c      	itt	pl
   d6d70:	2201      	movpl	r2, #1
   d6d72:	601a      	strpl	r2, [r3, #0]
   d6d74:	4b16      	ldr	r3, [pc, #88]	; (d6dd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6d76:	681a      	ldr	r2, [r3, #0]
   d6d78:	07d2      	lsls	r2, r2, #31
   d6d7a:	bf5c      	itt	pl
   d6d7c:	2201      	movpl	r2, #1
   d6d7e:	601a      	strpl	r2, [r3, #0]
   d6d80:	4b14      	ldr	r3, [pc, #80]	; (d6dd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6d82:	681a      	ldr	r2, [r3, #0]
   d6d84:	07d0      	lsls	r0, r2, #31
   d6d86:	bf5c      	itt	pl
   d6d88:	2201      	movpl	r2, #1
   d6d8a:	601a      	strpl	r2, [r3, #0]
   d6d8c:	4b12      	ldr	r3, [pc, #72]	; (d6dd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6d8e:	681a      	ldr	r2, [r3, #0]
   d6d90:	07d1      	lsls	r1, r2, #31
   d6d92:	bf5c      	itt	pl
   d6d94:	2201      	movpl	r2, #1
   d6d96:	601a      	strpl	r2, [r3, #0]
   d6d98:	4b10      	ldr	r3, [pc, #64]	; (d6ddc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6d9a:	681a      	ldr	r2, [r3, #0]
   d6d9c:	07d2      	lsls	r2, r2, #31
   d6d9e:	bf5c      	itt	pl
   d6da0:	2201      	movpl	r2, #1
   d6da2:	601a      	strpl	r2, [r3, #0]
   d6da4:	4b0e      	ldr	r3, [pc, #56]	; (d6de0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6da6:	681a      	ldr	r2, [r3, #0]
   d6da8:	07d0      	lsls	r0, r2, #31
   d6daa:	bf5c      	itt	pl
   d6dac:	2201      	movpl	r2, #1
   d6dae:	601a      	strpl	r2, [r3, #0]
   d6db0:	4b0c      	ldr	r3, [pc, #48]	; (d6de4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6db2:	681a      	ldr	r2, [r3, #0]
   d6db4:	07d1      	lsls	r1, r2, #31
   d6db6:	bf5c      	itt	pl
   d6db8:	2201      	movpl	r2, #1
   d6dba:	601a      	strpl	r2, [r3, #0]
   d6dbc:	4b0a      	ldr	r3, [pc, #40]	; (d6de8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6dbe:	681a      	ldr	r2, [r3, #0]
   d6dc0:	07d2      	lsls	r2, r2, #31
   d6dc2:	bf5c      	itt	pl
   d6dc4:	2201      	movpl	r2, #1
   d6dc6:	601a      	strpl	r2, [r3, #0]
   d6dc8:	4770      	bx	lr
   d6dca:	bf00      	nop
   d6dcc:	2003e76c 	.word	0x2003e76c
   d6dd0:	2003e768 	.word	0x2003e768
   d6dd4:	2003e764 	.word	0x2003e764
   d6dd8:	2003e760 	.word	0x2003e760
   d6ddc:	2003e75c 	.word	0x2003e75c
   d6de0:	2003e758 	.word	0x2003e758
   d6de4:	2003e754 	.word	0x2003e754
   d6de8:	2003e750 	.word	0x2003e750

000d6dec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6dec:	4b24      	ldr	r3, [pc, #144]	; (d6e80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6dee:	681a      	ldr	r2, [r3, #0]
   d6df0:	07d0      	lsls	r0, r2, #31
   d6df2:	bf5c      	itt	pl
   d6df4:	2201      	movpl	r2, #1
   d6df6:	601a      	strpl	r2, [r3, #0]
   d6df8:	4b22      	ldr	r3, [pc, #136]	; (d6e84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6dfa:	681a      	ldr	r2, [r3, #0]
   d6dfc:	07d1      	lsls	r1, r2, #31
   d6dfe:	bf5c      	itt	pl
   d6e00:	2201      	movpl	r2, #1
   d6e02:	601a      	strpl	r2, [r3, #0]
   d6e04:	4b20      	ldr	r3, [pc, #128]	; (d6e88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6e06:	681a      	ldr	r2, [r3, #0]
   d6e08:	07d2      	lsls	r2, r2, #31
   d6e0a:	bf5c      	itt	pl
   d6e0c:	2201      	movpl	r2, #1
   d6e0e:	601a      	strpl	r2, [r3, #0]
   d6e10:	4b1e      	ldr	r3, [pc, #120]	; (d6e8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6e12:	681a      	ldr	r2, [r3, #0]
   d6e14:	07d0      	lsls	r0, r2, #31
   d6e16:	bf5c      	itt	pl
   d6e18:	2201      	movpl	r2, #1
   d6e1a:	601a      	strpl	r2, [r3, #0]
   d6e1c:	4b1c      	ldr	r3, [pc, #112]	; (d6e90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6e1e:	681a      	ldr	r2, [r3, #0]
   d6e20:	07d1      	lsls	r1, r2, #31
   d6e22:	bf5c      	itt	pl
   d6e24:	2201      	movpl	r2, #1
   d6e26:	601a      	strpl	r2, [r3, #0]
   d6e28:	4b1a      	ldr	r3, [pc, #104]	; (d6e94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6e2a:	681a      	ldr	r2, [r3, #0]
   d6e2c:	07d2      	lsls	r2, r2, #31
   d6e2e:	bf5c      	itt	pl
   d6e30:	2201      	movpl	r2, #1
   d6e32:	601a      	strpl	r2, [r3, #0]
   d6e34:	4b18      	ldr	r3, [pc, #96]	; (d6e98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d6e36:	681a      	ldr	r2, [r3, #0]
   d6e38:	07d0      	lsls	r0, r2, #31
   d6e3a:	bf5c      	itt	pl
   d6e3c:	2201      	movpl	r2, #1
   d6e3e:	601a      	strpl	r2, [r3, #0]
   d6e40:	4b16      	ldr	r3, [pc, #88]	; (d6e9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6e42:	681a      	ldr	r2, [r3, #0]
   d6e44:	07d1      	lsls	r1, r2, #31
   d6e46:	bf5c      	itt	pl
   d6e48:	2201      	movpl	r2, #1
   d6e4a:	601a      	strpl	r2, [r3, #0]
   d6e4c:	4b14      	ldr	r3, [pc, #80]	; (d6ea0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6e4e:	681a      	ldr	r2, [r3, #0]
   d6e50:	07d2      	lsls	r2, r2, #31
   d6e52:	bf5c      	itt	pl
   d6e54:	2201      	movpl	r2, #1
   d6e56:	601a      	strpl	r2, [r3, #0]
   d6e58:	4b12      	ldr	r3, [pc, #72]	; (d6ea4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d6e5a:	681a      	ldr	r2, [r3, #0]
   d6e5c:	07d0      	lsls	r0, r2, #31
   d6e5e:	bf5c      	itt	pl
   d6e60:	2201      	movpl	r2, #1
   d6e62:	601a      	strpl	r2, [r3, #0]
   d6e64:	4b10      	ldr	r3, [pc, #64]	; (d6ea8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d6e66:	681a      	ldr	r2, [r3, #0]
   d6e68:	07d1      	lsls	r1, r2, #31
   d6e6a:	bf5c      	itt	pl
   d6e6c:	2201      	movpl	r2, #1
   d6e6e:	601a      	strpl	r2, [r3, #0]
   d6e70:	4b0e      	ldr	r3, [pc, #56]	; (d6eac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6e72:	681a      	ldr	r2, [r3, #0]
   d6e74:	07d2      	lsls	r2, r2, #31
   d6e76:	bf5c      	itt	pl
   d6e78:	2201      	movpl	r2, #1
   d6e7a:	601a      	strpl	r2, [r3, #0]
   d6e7c:	4770      	bx	lr
   d6e7e:	bf00      	nop
   d6e80:	2003e79c 	.word	0x2003e79c
   d6e84:	2003e798 	.word	0x2003e798
   d6e88:	2003e794 	.word	0x2003e794
   d6e8c:	2003e790 	.word	0x2003e790
   d6e90:	2003e78c 	.word	0x2003e78c
   d6e94:	2003e788 	.word	0x2003e788
   d6e98:	2003e784 	.word	0x2003e784
   d6e9c:	2003e780 	.word	0x2003e780
   d6ea0:	2003e77c 	.word	0x2003e77c
   d6ea4:	2003e778 	.word	0x2003e778
   d6ea8:	2003e774 	.word	0x2003e774
   d6eac:	2003e770 	.word	0x2003e770

000d6eb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6eb0:	4b24      	ldr	r3, [pc, #144]	; (d6f44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6eb2:	681a      	ldr	r2, [r3, #0]
   d6eb4:	07d0      	lsls	r0, r2, #31
   d6eb6:	bf5c      	itt	pl
   d6eb8:	2201      	movpl	r2, #1
   d6eba:	601a      	strpl	r2, [r3, #0]
   d6ebc:	4b22      	ldr	r3, [pc, #136]	; (d6f48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6ebe:	681a      	ldr	r2, [r3, #0]
   d6ec0:	07d1      	lsls	r1, r2, #31
   d6ec2:	bf5c      	itt	pl
   d6ec4:	2201      	movpl	r2, #1
   d6ec6:	601a      	strpl	r2, [r3, #0]
   d6ec8:	4b20      	ldr	r3, [pc, #128]	; (d6f4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6eca:	681a      	ldr	r2, [r3, #0]
   d6ecc:	07d2      	lsls	r2, r2, #31
   d6ece:	bf5c      	itt	pl
   d6ed0:	2201      	movpl	r2, #1
   d6ed2:	601a      	strpl	r2, [r3, #0]
   d6ed4:	4b1e      	ldr	r3, [pc, #120]	; (d6f50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6ed6:	681a      	ldr	r2, [r3, #0]
   d6ed8:	07d0      	lsls	r0, r2, #31
   d6eda:	bf5c      	itt	pl
   d6edc:	2201      	movpl	r2, #1
   d6ede:	601a      	strpl	r2, [r3, #0]
   d6ee0:	4b1c      	ldr	r3, [pc, #112]	; (d6f54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6ee2:	681a      	ldr	r2, [r3, #0]
   d6ee4:	07d1      	lsls	r1, r2, #31
   d6ee6:	bf5c      	itt	pl
   d6ee8:	2201      	movpl	r2, #1
   d6eea:	601a      	strpl	r2, [r3, #0]
   d6eec:	4b1a      	ldr	r3, [pc, #104]	; (d6f58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6eee:	681a      	ldr	r2, [r3, #0]
   d6ef0:	07d2      	lsls	r2, r2, #31
   d6ef2:	bf5c      	itt	pl
   d6ef4:	2201      	movpl	r2, #1
   d6ef6:	601a      	strpl	r2, [r3, #0]
   d6ef8:	4b18      	ldr	r3, [pc, #96]	; (d6f5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6efa:	681a      	ldr	r2, [r3, #0]
   d6efc:	07d0      	lsls	r0, r2, #31
   d6efe:	bf5c      	itt	pl
   d6f00:	2201      	movpl	r2, #1
   d6f02:	601a      	strpl	r2, [r3, #0]
   d6f04:	4b16      	ldr	r3, [pc, #88]	; (d6f60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6f06:	681a      	ldr	r2, [r3, #0]
   d6f08:	07d1      	lsls	r1, r2, #31
   d6f0a:	bf5c      	itt	pl
   d6f0c:	2201      	movpl	r2, #1
   d6f0e:	601a      	strpl	r2, [r3, #0]
   d6f10:	4b14      	ldr	r3, [pc, #80]	; (d6f64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6f12:	681a      	ldr	r2, [r3, #0]
   d6f14:	07d2      	lsls	r2, r2, #31
   d6f16:	bf5c      	itt	pl
   d6f18:	2201      	movpl	r2, #1
   d6f1a:	601a      	strpl	r2, [r3, #0]
   d6f1c:	4b12      	ldr	r3, [pc, #72]	; (d6f68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6f1e:	681a      	ldr	r2, [r3, #0]
   d6f20:	07d0      	lsls	r0, r2, #31
   d6f22:	bf5c      	itt	pl
   d6f24:	2201      	movpl	r2, #1
   d6f26:	601a      	strpl	r2, [r3, #0]
   d6f28:	4b10      	ldr	r3, [pc, #64]	; (d6f6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6f2a:	681a      	ldr	r2, [r3, #0]
   d6f2c:	07d1      	lsls	r1, r2, #31
   d6f2e:	bf5c      	itt	pl
   d6f30:	2201      	movpl	r2, #1
   d6f32:	601a      	strpl	r2, [r3, #0]
   d6f34:	4b0e      	ldr	r3, [pc, #56]	; (d6f70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6f36:	681a      	ldr	r2, [r3, #0]
   d6f38:	07d2      	lsls	r2, r2, #31
   d6f3a:	bf5c      	itt	pl
   d6f3c:	2201      	movpl	r2, #1
   d6f3e:	601a      	strpl	r2, [r3, #0]
   d6f40:	4770      	bx	lr
   d6f42:	bf00      	nop
   d6f44:	2003e7cc 	.word	0x2003e7cc
   d6f48:	2003e7c8 	.word	0x2003e7c8
   d6f4c:	2003e7c4 	.word	0x2003e7c4
   d6f50:	2003e7c0 	.word	0x2003e7c0
   d6f54:	2003e7bc 	.word	0x2003e7bc
   d6f58:	2003e7b8 	.word	0x2003e7b8
   d6f5c:	2003e7b4 	.word	0x2003e7b4
   d6f60:	2003e7b0 	.word	0x2003e7b0
   d6f64:	2003e7ac 	.word	0x2003e7ac
   d6f68:	2003e7a8 	.word	0x2003e7a8
   d6f6c:	2003e7a4 	.word	0x2003e7a4
   d6f70:	2003e7a0 	.word	0x2003e7a0

000d6f74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6f74:	4b18      	ldr	r3, [pc, #96]	; (d6fd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6f76:	681a      	ldr	r2, [r3, #0]
   d6f78:	07d1      	lsls	r1, r2, #31
   d6f7a:	bf5c      	itt	pl
   d6f7c:	2201      	movpl	r2, #1
   d6f7e:	601a      	strpl	r2, [r3, #0]
   d6f80:	4b16      	ldr	r3, [pc, #88]	; (d6fdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6f82:	681a      	ldr	r2, [r3, #0]
   d6f84:	07d2      	lsls	r2, r2, #31
   d6f86:	bf5c      	itt	pl
   d6f88:	2201      	movpl	r2, #1
   d6f8a:	601a      	strpl	r2, [r3, #0]
   d6f8c:	4b14      	ldr	r3, [pc, #80]	; (d6fe0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6f8e:	681a      	ldr	r2, [r3, #0]
   d6f90:	07d0      	lsls	r0, r2, #31
   d6f92:	bf5c      	itt	pl
   d6f94:	2201      	movpl	r2, #1
   d6f96:	601a      	strpl	r2, [r3, #0]
   d6f98:	4b12      	ldr	r3, [pc, #72]	; (d6fe4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6f9a:	681a      	ldr	r2, [r3, #0]
   d6f9c:	07d1      	lsls	r1, r2, #31
   d6f9e:	bf5c      	itt	pl
   d6fa0:	2201      	movpl	r2, #1
   d6fa2:	601a      	strpl	r2, [r3, #0]
   d6fa4:	4b10      	ldr	r3, [pc, #64]	; (d6fe8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6fa6:	681a      	ldr	r2, [r3, #0]
   d6fa8:	07d2      	lsls	r2, r2, #31
   d6faa:	bf5c      	itt	pl
   d6fac:	2201      	movpl	r2, #1
   d6fae:	601a      	strpl	r2, [r3, #0]
   d6fb0:	4b0e      	ldr	r3, [pc, #56]	; (d6fec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6fb2:	681a      	ldr	r2, [r3, #0]
   d6fb4:	07d0      	lsls	r0, r2, #31
   d6fb6:	bf5c      	itt	pl
   d6fb8:	2201      	movpl	r2, #1
   d6fba:	601a      	strpl	r2, [r3, #0]
   d6fbc:	4b0c      	ldr	r3, [pc, #48]	; (d6ff0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6fbe:	681a      	ldr	r2, [r3, #0]
   d6fc0:	07d1      	lsls	r1, r2, #31
   d6fc2:	bf5c      	itt	pl
   d6fc4:	2201      	movpl	r2, #1
   d6fc6:	601a      	strpl	r2, [r3, #0]
   d6fc8:	4b0a      	ldr	r3, [pc, #40]	; (d6ff4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6fca:	681a      	ldr	r2, [r3, #0]
   d6fcc:	07d2      	lsls	r2, r2, #31
   d6fce:	bf5c      	itt	pl
   d6fd0:	2201      	movpl	r2, #1
   d6fd2:	601a      	strpl	r2, [r3, #0]
   d6fd4:	4770      	bx	lr
   d6fd6:	bf00      	nop
   d6fd8:	2003e7ec 	.word	0x2003e7ec
   d6fdc:	2003e7e8 	.word	0x2003e7e8
   d6fe0:	2003e7e4 	.word	0x2003e7e4
   d6fe4:	2003e7e0 	.word	0x2003e7e0
   d6fe8:	2003e7dc 	.word	0x2003e7dc
   d6fec:	2003e7d8 	.word	0x2003e7d8
   d6ff0:	2003e7d4 	.word	0x2003e7d4
   d6ff4:	2003e7d0 	.word	0x2003e7d0

000d6ff8 <__cxa_atexit>:
   d6ff8:	b510      	push	{r4, lr}
   d6ffa:	4c05      	ldr	r4, [pc, #20]	; (d7010 <__cxa_atexit+0x18>)
   d6ffc:	4613      	mov	r3, r2
   d6ffe:	b12c      	cbz	r4, d700c <__cxa_atexit+0x14>
   d7000:	460a      	mov	r2, r1
   d7002:	4601      	mov	r1, r0
   d7004:	2002      	movs	r0, #2
   d7006:	f3af 8000 	nop.w
   d700a:	bd10      	pop	{r4, pc}
   d700c:	4620      	mov	r0, r4
   d700e:	bd10      	pop	{r4, pc}
   d7010:	00000000 	.word	0x00000000

000d7014 <memcmp>:
   d7014:	b510      	push	{r4, lr}
   d7016:	3901      	subs	r1, #1
   d7018:	4402      	add	r2, r0
   d701a:	4290      	cmp	r0, r2
   d701c:	d007      	beq.n	d702e <memcmp+0x1a>
   d701e:	f810 3b01 	ldrb.w	r3, [r0], #1
   d7022:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7026:	42a3      	cmp	r3, r4
   d7028:	d0f7      	beq.n	d701a <memcmp+0x6>
   d702a:	1b18      	subs	r0, r3, r4
   d702c:	bd10      	pop	{r4, pc}
   d702e:	2000      	movs	r0, #0
   d7030:	bd10      	pop	{r4, pc}

000d7032 <memcpy>:
   d7032:	b510      	push	{r4, lr}
   d7034:	1e43      	subs	r3, r0, #1
   d7036:	440a      	add	r2, r1
   d7038:	4291      	cmp	r1, r2
   d703a:	d004      	beq.n	d7046 <memcpy+0x14>
   d703c:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7040:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7044:	e7f8      	b.n	d7038 <memcpy+0x6>
   d7046:	bd10      	pop	{r4, pc}

000d7048 <memset>:
   d7048:	4402      	add	r2, r0
   d704a:	4603      	mov	r3, r0
   d704c:	4293      	cmp	r3, r2
   d704e:	d002      	beq.n	d7056 <memset+0xe>
   d7050:	f803 1b01 	strb.w	r1, [r3], #1
   d7054:	e7fa      	b.n	d704c <memset+0x4>
   d7056:	4770      	bx	lr

000d7058 <srand>:
   d7058:	b538      	push	{r3, r4, r5, lr}
   d705a:	4b12      	ldr	r3, [pc, #72]	; (d70a4 <srand+0x4c>)
   d705c:	681c      	ldr	r4, [r3, #0]
   d705e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7060:	4605      	mov	r5, r0
   d7062:	b9d3      	cbnz	r3, d709a <srand+0x42>
   d7064:	2018      	movs	r0, #24
   d7066:	f7fe ff8b 	bl	d5f80 <malloc>
   d706a:	f243 330e 	movw	r3, #13070	; 0x330e
   d706e:	63a0      	str	r0, [r4, #56]	; 0x38
   d7070:	8003      	strh	r3, [r0, #0]
   d7072:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7076:	8043      	strh	r3, [r0, #2]
   d7078:	f241 2334 	movw	r3, #4660	; 0x1234
   d707c:	8083      	strh	r3, [r0, #4]
   d707e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7082:	80c3      	strh	r3, [r0, #6]
   d7084:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7088:	8103      	strh	r3, [r0, #8]
   d708a:	2305      	movs	r3, #5
   d708c:	8143      	strh	r3, [r0, #10]
   d708e:	230b      	movs	r3, #11
   d7090:	8183      	strh	r3, [r0, #12]
   d7092:	2201      	movs	r2, #1
   d7094:	2300      	movs	r3, #0
   d7096:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d709a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d709c:	2200      	movs	r2, #0
   d709e:	611d      	str	r5, [r3, #16]
   d70a0:	615a      	str	r2, [r3, #20]
   d70a2:	bd38      	pop	{r3, r4, r5, pc}
   d70a4:	2003ded8 	.word	0x2003ded8

000d70a8 <strlen>:
   d70a8:	4603      	mov	r3, r0
   d70aa:	f813 2b01 	ldrb.w	r2, [r3], #1
   d70ae:	2a00      	cmp	r2, #0
   d70b0:	d1fb      	bne.n	d70aa <strlen+0x2>
   d70b2:	1a18      	subs	r0, r3, r0
   d70b4:	3801      	subs	r0, #1
   d70b6:	4770      	bx	lr

000d70b8 <dynalib_user>:
   d70b8:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d70c8:	0000 0000                                   ....

000d70cc <_ZTVN8particle13__SPISettingsE>:
	...
   d70d4:	40cd 000d                                   .@..

000d70d8 <_ZTV4File>:
	...
   d70e0:	40cb 000d 416f 000d 4157 000d 4151 000d     .@..oA..WA..QA..
   d70f0:	40af 000d 4131 000d 412b 000d 4125 000d     .@..1A..+A..%A..
   d7100:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   d7110:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   d7120:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   d7130:	676e 2073 7325 6c25 2075 7325 4d20 444f     ngs %s%lu %s MOD
   d7140:	2545 3e64 7300 2064 6e69 7469 6420 6e6f     E%d>.sd init don
   d7150:	0065 7320 2064 6e69 7469 6620 6961 656c     e. sd init faile
   d7160:	0064 7161 6f4c 2e67 7874 0074 6966 656c     d.aqLog.txt.file
   d7170:	6f20 6570 656e 2164 6100 7269 7120 6175      opened!.air qua
   d7180:	696c 7974 7620 6c61 6575 203a 6925 0a20     lity value: %i .
   d7190:	7000 6972 746e 6e69 2e67 2e2e 0000 0000     .printing.......

000d71a0 <_ZN16AirQualitySensor13LOW_POLLUTIONE>:
   d71a0:	0002 0000                                   ....

000d71a4 <_ZN16AirQualitySensor9FRESH_AIRE>:
   d71a4:	0003 0000                                   ....

000d71a8 <_ZN16AirQualitySensor14HIGH_POLLUTIONE>:
   d71a8:	0001 0000                                   ....

000d71ac <_ZN16AirQualitySensor12FORCE_SIGNALE>:
   d71ac:	0000 0000                                   ....

000d71b0 <_ZTVN5spark13EthernetClassE>:
	...
   d71b8:	600f 000d 6005 000d 5ffb 000d 5ff1 000d     .`...`..._..._..
   d71c8:	5fe5 000d 5fd9 000d 5fcd 000d 5fc5 000d     ._..._..._..._..
   d71d8:	5fbb 000d 5fb1 000d 6ab1 000d               ._..._...j..

000d71e4 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d71e4:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
   d71f4:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d7204:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d7214:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d7224:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d7234:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d7244:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d7254:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d7264:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
   d7274:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   d7284:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   d7294:	0066 6e6c 6600 006e 6f63 6564 6400 7465     f.ln.fn.code.det
   d72a4:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
   d72b4:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
   d72c4:	6e61 6369 6100 6c6c 5a00 2500 302b 6433     anic.all.Z.%+03d
   d72d4:	253a 3230 0075 5925 252d 2d6d 6425 2554     :%02u.%Y-%m-%dT%
   d72e4:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   d72f4:	0065 0000                                   e...

000d72f8 <_ZTV9IPAddress>:
	...
   d7300:	64e5 000d 64d5 000d 64d7 000d               .d...d...d..

000d730c <_ZTV9USBSerial>:
	...
   d7314:	65bd 000d 660d 000d 661b 000d 6245 000d     .e...f...f..Eb..
   d7324:	65f9 000d 65bf 000d 65d5 000d 6607 000d     .e...e...e...f..
   d7334:	65eb 000d 65b9 000d                         .e...e..

000d733c <_ZTV11USARTSerial>:
	...
   d7344:	66c9 000d 6719 000d 6727 000d 6245 000d     .f...g..'g..Eb..
   d7354:	66dd 000d 66ff 000d 66eb 000d 6713 000d     .f...f...f...g..
   d7364:	66cb 000d 66cf 000d                         .f...f..

000d736c <_ZTV7TwoWire>:
	...
   d7374:	67cd 000d 6817 000d 67ef 000d 67cf 000d     .g...h...g...g..
   d7384:	67f7 000d 67ff 000d 6807 000d 680f 000d     .g...g...h...h..

000d7394 <_ZTVN5spark9MeshClassE>:
	...
   d739c:	68af 000d 68a5 000d 689b 000d 6891 000d     .h...h...h...h..
   d73ac:	6885 000d 6879 000d 686d 000d 6865 000d     .h..yh..mh..eh..
   d73bc:	685b 000d 6851 000d 6ab1 000d               [h..Qh...j..

000d73c8 <_ZTVN5spark9WiFiClassE>:
	...
   d73d0:	6a2b 000d 6a21 000d 6a17 000d 69cd 000d     +j..!j...j...i..
   d73e0:	6a0b 000d 69ff 000d 69f3 000d 69eb 000d     .j...i...i...i..
   d73f0:	69e1 000d 69d7 000d 6ab1 000d               .i...i...j..

000d73fc <_ZTVN5spark12NetworkClassE>:
	...
   d7404:	6a49 000d 6a53 000d 6a5d 000d 6a67 000d     Ij..Sj..]j..gj..
   d7414:	6a71 000d 6a7d 000d 6a89 000d 6a95 000d     qj..}j...j...j..
   d7424:	6a9d 000d 6aa7 000d 6ab1 000d               .j...j...j..

000d7430 <_ZSt7nothrow>:
   d7430:	0000 0000                                   ....

000d7434 <__sf_fake_stdin>:
	...

000d7454 <__sf_fake_stdout>:
	...

000d7474 <__sf_fake_stderr>:
	...
   d7494:	0043                                        C.

000d7496 <link_const_variable_data_end>:
	...

000d7498 <link_constructors_location>:
   d7498:	000d4399 	.word	0x000d4399
   d749c:	000d4445 	.word	0x000d4445
   d74a0:	000d4449 	.word	0x000d4449
   d74a4:	000d444d 	.word	0x000d444d
   d74a8:	000d4451 	.word	0x000d4451
   d74ac:	000d4a79 	.word	0x000d4a79
   d74b0:	000d4a7d 	.word	0x000d4a7d
   d74b4:	000d4a81 	.word	0x000d4a81
   d74b8:	000d4a85 	.word	0x000d4a85
   d74bc:	000d5151 	.word	0x000d5151
   d74c0:	000d5175 	.word	0x000d5175
   d74c4:	000d5179 	.word	0x000d5179
   d74c8:	000d549d 	.word	0x000d549d
   d74cc:	000d54a1 	.word	0x000d54a1
   d74d0:	000d54a5 	.word	0x000d54a5
   d74d4:	000d59df 	.word	0x000d59df
   d74d8:	000d59e3 	.word	0x000d59e3
   d74dc:	000d59e7 	.word	0x000d59e7
   d74e0:	000d5a8d 	.word	0x000d5a8d
   d74e4:	000d5b55 	.word	0x000d5b55
   d74e8:	000d6019 	.word	0x000d6019
   d74ec:	000d61d9 	.word	0x000d61d9
   d74f0:	000d621d 	.word	0x000d621d
   d74f4:	000d6361 	.word	0x000d6361
   d74f8:	000d6371 	.word	0x000d6371
   d74fc:	000d63a9 	.word	0x000d63a9
   d7500:	000d697d 	.word	0x000d697d
   d7504:	000d6a35 	.word	0x000d6a35
   d7508:	000d6b7d 	.word	0x000d6b7d
   d750c:	000d6d69 	.word	0x000d6d69
   d7510:	000d6ded 	.word	0x000d6ded
   d7514:	000d6eb1 	.word	0x000d6eb1
   d7518:	000d6f75 	.word	0x000d6f75

000d751c <link_constructors_end>:
   d751c:	00000000 	.word	0x00000000
